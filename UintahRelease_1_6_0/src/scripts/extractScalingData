#!/bin/csh
#______________________________________________________________________
#  This script parses the output file from sus and 
#  generates a data file used for scaling plots
#  It computes the mean time per timestep and the average 
#  TaskWaitCommTime, TaskExec, TaskLocalComm
# 
#  usage:
#      extractScalingData  <sus_output.1, sus_output_2, sus_output_3 >
#  
#______________________________________________________________________

if ( $#argv < 1 ) then
  echo "    Usage:  extractScalingData  <sus_output.1, sus_output_2, sus_output_3 >"
  exit
endif

#__________________________________
# DEFAULTS:  Edit these
set startTimestep = "3"
set endTimestep   = "10"  # timestep to extract elapsed time from.
set nThreads      = 16     # number of threads per mpi process.
#__________________________________

set out = ($argv)

set here = .tmpFiles

/bin/rm  -rf $here  >& /dev/null
mkdir $here
touch $here/data

foreach X ( $out[*] )

  grep -q "(timestep $endTimestep)" $X
  
  # if the final timestep exists
  if ($status == 0 ) then
    echo $X > $here/file
    grep "Patch layout:" $X | cut -d"(" -f2 > $here/patches
    grep processors $X | awk -v nThreads=$nThreads -F" " '{ print $2*nThreads }' > $here/processors
    
    grep "(timestep $startTimestep)" $X | awk -F "=" '{print $4}' | cut -d "," -f1 > $here/startTime
    grep "(timestep $endTimestep)"   $X | awk -F "=" '{print $4}' | cut -d "," -f1 > $here/endTime

    paste -d " " $here/file $here/processors $here/startTime $here/endTime >> $here/data

    echo "working on $X"
  else
    echo "---------------------$X did not run to completion"
  endif
  
end
#__________________________________
# compute the average mean time per timestep

@ n = $endTimestep - $startTimestep
echo " computing average mean time per timestep for $n timesteps"
echo "#file procs startTime endTime aveMean">$here/data2  

awk -vnSteps=$n '{print ($4-$3)/nSteps}' $here/data >> $here/aveMeanTime

paste -d " " $here/data $here/aveMeanTime >> $here/data2
sort -n -k2 $here/data2| column -t >scalingData



#______________________________________________________________________
# Now extract: 
#  TaskWaitCommTime:ave, TaskExec:ave, 
# if the file contains it and compute the average
#______________________________________________________________________
set these = `grep --files-with-matches "TaskExec" $out`

if ( $#these != 0 ) then

  echo " Now computing the averages for the SCI_DEBUG: ComponenTimings variables, if they exist."
  foreach X ( $out[*] )

    grep -q "TaskExec" $X

    if ($status == 0 ) then
      grep -q "(timestep $endTimestep)" $X

      # if the final timestep exists then process it
      if ($status == 0 ) then  
        echo $X > $here/file
        grep processors $X | awk -v nThreads=$nThreads -F" " '{ print $2*nThreads }' > $here/processors

        # extract the output between the start and ending timesteps
        sed -n /"timestep $startTimestep"/,/"timestep $startTimestep"/p $X > $here/out.clean

        set me = $here/out.clean
        grep TaskExec $me      | cut -d: -f2 | awk 'BEGIN {sum=0}; {sum=sum+$1}; END {print sum/NR}' > $here/ave.taskExec
        grep TaskLocalComm $me | cut -d: -f2 | awk 'BEGIN {sum=0}; {sum=sum+$1}; END {print sum/NR}' > $here/ave.taskLocalComm
        grep TaskWaitComm $me  | cut -d: -f2 | awk 'BEGIN {sum=0}; {sum=sum+$1}; END {print sum/NR}' > $here/ave.taskWaitComm
        paste -d " " $here/file $here/processors $here/ave.taskExec $here/ave.taskLocalComm $here/ave.taskWaitComm >> $here/aveComponentTimes
      else
        echo "---------------------$X did not run to completion"
      endif
    endif   # 
  end  # loop over files

    #  header
    echo "#file procs aveTaskExec aveTaskLocalComm aveTaskWaitComm" > $here/aveComponentTimes2
  sort -n -k2 $here/aveComponentTimes >>  $here/aveComponentTimes2
  column -t $here/aveComponentTimes2 > aveComponentTimes

  more aveComponentTimes
endif

more scalingData

/bin/rm -rf $here
exit
