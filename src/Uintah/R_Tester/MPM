#!/usr/bin/python

from sys import argv,exit
from helpers.runSusTests import runSusTests

UNUSED = [  ("test_cyl_pene_hypo_jc_ero", "test_cyl_pene_hypo_jc_ero.ups", 1, "ALL"), \
	    ("testConvert1MAdd", "testConvert1MAdd.ups", 1, "ALL"), \
            ]


#  Test syntax: ( "name", "input file", # processors, "OS", ["flags1","flag2"])
#  flags: 
#       no_uda_comparison:      - skip the uda comparisons
#       no_memoryTest:          - skip all memory checks
#       no_restart:             - skip the restart tests
#       no_dbg:                 - skip all debug compilation tests
#       no_opt:                 - skip all optimized compilation tests
#       do_performance_test:    - Run the performance test
#       doesTestRun:            - Checks if a test successfully runs
#       abs_tolerance=[double]  - absolute tolerance used in comparisons
#       rel_tolerance=[double]  - relative tolerance used in comparisons
#       exactComparison         - set absolute/relative tolerance = 0  for uda comparisons
#       startFromCheckpoint     - start test from checkpoint. (/home/csafe-tester/CheckPoints/..../testname.uda.000)

TESTS = [  
           ("disks2mat4patch",                 "disks2mat4patch.ups",                4,  "Linux", ["exactComparison"]),    \
           ("heatcond2mat",                   "heatcond2mat.ups",                   1,  "Linux", ["exactComparison"]),    \
           ("inclined_plane_sphere",          "inclined_plane_sphere.ups",          1,  "Linux", ["exactComparison"]),    \
           ("foam_crush",                     "foam_crush.ups",                     4,  "Linux", ["exactComparison"]),    \
           ("periodic_disks",                 "periodic_disks.ups",                 6,  "Linux", ["exactComparison"]),    \
           ("const_test_hypo",                "const_test_hypo.ups",                1,  "Linux", ["exactComparison"]),    \
           ("const_test_cmr",                 "const_test_cmr.ups",                 1,  "Linux", ["exactComparison"]),    \
           ("const_test_nhp",                 "const_test_nhp.ups",                 1,  "Linux", ["exactComparison"]),    \
           ("const_test_vs",                  "const_test_vs.ups",                  1,  "Linux", ["exactComparison"]),    \
           ("adiCuJC4000s696K",               "adiCuJC4000s696K.ups",               1,  "Linux", ["exactComparison"]),    \
           ("adiCuMTS4000s696K",              "adiCuMTS4000s696K.ups",              1,  "Linux", ["exactComparison"]),    \
           ("adiCuPTW4000s696K",              "adiCuPTW4000s696K.ups",              1,  "Linux", ["exactComparison"]),    \
           ("adiCuSCG4000s696K",              "adiCuSCG4000s696K.ups",              1,  "Linux", ["exactComparison"]),    \
           ("adiCuZA4000s696K",               "adiCuZA4000s696K.ups",               1,  "Linux", ["exactComparison"]),    \
           ("test_corrug_plate",              "test_corrug_plate.ups",              1,  "Linux", ["exactComparison"]),    \
           ("test_cyl_pene_no_ero",           "test_cyl_pene_no_ero.ups",           1,  "Linux", ["exactComparison"]),    \
           ("test_gurson_beckerdrucker_mts",  "test_gurson_beckerdrucker_mts.ups",  1,  "Linux", ["exactComparison"]),    \
           
           ("disks2mat4patch",                "disks2mat4patch.ups",                4,  "Darwin", ["doesTestRun"]),    \
           ("heatcond2mat",                   "heatcond2mat.ups",                   1,  "Darwin", ["doesTestRun"]),    \
           ("inclined_plane_sphere",          "inclined_plane_sphere.ups",          1,  "Darwin", ["doesTestRun"]),    \
           ("const_test_cmr",                 "const_test_cmr.ups",                 1,  "Darwin", ["doesTestRun"]),    \
           ("const_test_nhp",                 "const_test_nhp.ups",                 1,  "Darwin", ["doesTestRun"]),    \
           ("adiCuJC4000s696K",               "adiCuJC4000s696K.ups",               1,  "Darwin", ["doesTestRun"]),    \
           ("adiCuMTS4000s696K",              "adiCuMTS4000s696K.ups",              1,  "Darwin", ["doesTestRun"]),    \
           ("adiCuPTW4000s696K",              "adiCuPTW4000s696K.ups",              1,  "Darwin", ["doesTestRun"]),    \
           ("adiCuSCG4000s696K",              "adiCuSCG4000s696K.ups",              1,  "Darwin", ["doesTestRun"]),    \
           ("adiCuZA4000s696K",               "adiCuZA4000s696K.ups",               1,  "Darwin", ["doesTestRun"]),    \
           ("test_corrug_plate",              "test_corrug_plate.ups",              1,  "Darwin", ["doesTestRun"]),    \
           ("test_cyl_pene_no_ero",           "test_cyl_pene_no_ero.ups",           1,  "Darwin", ["doesTestRun"]),    \
           ("test_gurson_beckerdrucker_mts",  "test_gurson_beckerdrucker_mts.ups",  1,  "Darwin", ["doesTestRun"]),    \
    	]

exit(runSusTests(argv, TESTS, "MPM"))
