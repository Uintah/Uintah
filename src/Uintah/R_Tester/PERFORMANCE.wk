#!/usr/bin/python

from sys import argv,exit
from helpers.runSusTests import runSusTests, inputs_root
from helpers.modUPS import modUPS

methane8patch_ups = modUPS("%s/ARCHES" % inputs_root(), \
                           "methane_explicit_table.ups", \
                           ["<patches>[2,2,2]</patches>", \
                            "<maxTime>10.0</maxTime>"])

#  Test syntax: ( "name", "input file", # processors, "OS", ["flags1","flag2"])
#  flags: 
#       no_uda_comparison:      - skip the uda comparisons
#       no_memoryTest:          - skip all memory checks
#       no_restart:             - skip the restart tests
#       no_dbg:                 - skip all debug compilation tests
#       no_opt:                 - skip all optimized compilation tests
#       do_performance_test:    - Run the performance test
#       doesTestRun:            - Checks if a test successfully runs
#       abs_tolerance=[double]  - absolute tolerance used in comparisons
#       rel_tolerance=[double]  - relative tolerance used in comparisons
#       exactComparison         - set absolute/relative tolerance = 0  for uda comparisons
#       startFromCheckpoint     - start test from checkpoint. (/usr/local/home/csafe-tester/CheckPoints/..../testname.uda.000)

TESTS = [ ("hotBlob8patch",           "hotBlob2mat8patch.ups", "", 8, "ALL", "ice"),     \
          ("disks2mat4patch4proc",    "disks2mat4patch.ups",   "", 4, "ALL", "mpm"), \
          ("methane_explicit_8patch", methane8patch_ups,       "", 8, "ALL", "chem_meth", "arches") \
    	]

def chemfileCallback (test, susdir, inputsdir, compare_root, algo, mode, max_parallelism):
  symlink("%s/input.dtd" % (inputsdir), "input.dtd")
  cfile = chemfile(test)
  if platform[0:5] == "linux":
      cfile = cfile + ".linux.bin"
  else:
      cfile = cfile + ".bin"
  symlink("%s/%s" % (inputsdir, cfile), "chem.bin")


exit(runSusTests(argv, TESTS, "performance"))
