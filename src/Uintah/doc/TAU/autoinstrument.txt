To instrument using TAU and PDT:

Index: configVars.mk.in
===================================================================
RCS file: /csafe_noexport/cvs/cvsroot/SCIRun/src/configVars.mk.in,v
retrieving revision 1.98
diff -r1.98 configVars.mk.in
25a26,28
> PDTPARSE        = $(PDTDIR)/$(PDTARCHDIR)/bin/cxxparse
> TAUINSTR        = $(TAUROOT)/$(CONFIG_ARCH)/bin/tau_instrumentor
> 
283a287,300
> ifneq ($(TAU_MAKEFILE),)
> 	-echo "Building $*.o ..." ; \
> 	$(PDTPARSE) $< $(TAU_INCLUDE) $(TAU_MPI_INCLUDE) $(CFLAGS) $(INCLUDES) $(CC_DEPEND_REGEN) $(call repository,$@) -DSCI_Hash_Map_h -DSCI_HASH_SET_H ; \
> 	pdbfile=`basename $< .cc`.pdb ; \
> 	$(TAUINSTR) $$pdbfile $< -o $*.inst.cc -f $(SRCTOP)/tau/select.dat ; \
>         $(CXX) $(CFLAGS) $(INCLUDES) $(CC_DEPEND_REGEN) $(call repository,$@) -c $*.inst.cc -o $@ ; \
> 	if [ -f $@ ] ; then  \
> 	echo "Instrumented $*.o successfully  " ; \
> 	else \
> 	$(CXX) $(CFLAGS) $(INCLUDES) $(CC_DEPEND_REGEN) $(call repository,$@) -c $< -o $@ ; \
> 	ls -l $@; \
> 	fi ; \
> 	rm -f $$pdbfile ; 
> else
284a302
> endif
Index: Core/Datatypes/CurveMesh.cc
===================================================================
RCS file: /csafe_noexport/cvs/cvsroot/SCIRun/src/Core/Datatypes/CurveMesh.cc,v
retrieving revision 1.3
diff -r1.3 CurveMesh.cc
39c39
< #include <sci_hash_map.h>
---
> //#include <sci_hash_map.h>
Index: Core/Malloc/AllocOS.cc
===================================================================
RCS file: /csafe_noexport/cvs/cvsroot/SCIRun/src/Core/Malloc/AllocOS.cc,v
retrieving revision 1.14
diff -r1.14 AllocOS.cc
29a30
> #include <TauProfilerForSCIRun.h>
130a132,136
> }
> 
> void ALLOCOS_DONTINSTRUMENT(void)
> {
>   TAU_PROFILE("Malloc don't instrument", " " , TAU_DEFAULT);
Index: Core/Malloc/Allocator.cc
===================================================================
RCS file: /csafe_noexport/cvs/cvsroot/SCIRun/src/Core/Malloc/Allocator.cc,v
retrieving revision 1.34
diff -r1.34 Allocator.cc
35a36
> #include <TauProfilerForSCIRun.h>
534c535
< 	if(nfree >= 10){
---
> 	if(nfree >= 200){
537c538
< 	    for(int i=0;i<4;i++)
---
> 	    for(int i=0;i<0;i++)
1244a1246,1250
> }
> 
> void ALLOC_DONTINSTRUMENT(void)
> {
>   TAU_PROFILE("Malloc don't instrument", " " , TAU_DEFAULT);
Index: Core/Malloc/malloc.cc
===================================================================
RCS file: /csafe_noexport/cvs/cvsroot/SCIRun/src/Core/Malloc/malloc.cc,v
retrieving revision 1.17
diff -r1.17 malloc.cc
29a30
> #include <TauProfilerForSCIRun.h>
115a117,120
> void MALLOC_DONTINSTRUMENT(void)
> {
>   TAU_PROFILE("Malloc don't instrument", " " , TAU_DEFAULT);
> }
Index: Core/Malloc/new.cc
===================================================================
RCS file: /csafe_noexport/cvs/cvsroot/SCIRun/src/Core/Malloc/new.cc,v
retrieving revision 1.8
diff -r1.8 new.cc
29a30
> #include <TauProfilerForSCIRun.h>
138a140
> 
139a142,145
> void NEW_DONTINSTRUMENT(void)
> {
>   TAU_PROFILE("new don't instrument", " " , TAU_DEFAULT);
> }
Index: Packages/Uintah/CCA/Components/Arches/MomentumSolver.cc
===================================================================
RCS file: /csafe_noexport/cvs/cvsroot/SCIRun/src/Packages/Uintah/CCA/Components/Arches/MomentumSolver.cc,v
retrieving revision 1.33
diff -r1.33 MomentumSolver.cc
1a2
> #include <TauProfilerForSCIRun.h>
2209a2211,2214
>   TAU_PROFILE_TIMER(inittimer, "MomentumSolver::buildLinearMatrixVelHatPred: Initialization", "[Momentum.cc: 2211 ]", TAU_USER2);
>   TAU_PROFILE_TIMER(sourcetimer, "MomentumSolver::buildLinearMatrixVelHatPred: SOURCE", "[Momentum.cc: 2212 ]", TAU_USER2);
> 
>   TAU_PROFILE_START(inittimer);
2397a2403,2404
>       TAU_PROFILE_STOP(inittimer);
>       TAU_PROFILE_START(sourcetimer);
2454a2462,2463
> 
>       TAU_PROFILE_STOP(sourcetimer);
Index: Packages/Uintah/Core/Grid/ReductionVariable.h
===================================================================
RCS file: /csafe_noexport/cvs/cvsroot/SCIRun/src/Packages/Uintah/Core/Grid/ReductionVariable.h,v
retrieving revision 1.18
diff -r1.18 ReductionVariable.h
81c81,82
<     { out << value; }
---
>     { // out << value; 
>     }
Index: Packages/Uintah/StandAlone/sus.cc
===================================================================
RCS file: /csafe_noexport/cvs/cvsroot/SCIRun/src/Packages/Uintah/StandAlone/sus.cc,v
retrieving revision 1.98
diff -r1.98 sus.cc
15a16,18
> 
> #include <sci_defs.h>
> 
164,166d166
<   TAU_PROFILE("main()", "void (int, char **)", TAU_DEFAULT);
< 
<   TAU_PROFILE_INIT(argc,argv);
352d351
< 	  TAU_PROFILE_SET_NODE(0);

You will also need a selective instrumentation file: 
SCIRun/src/tau/select.dat that contains:

# Selective instrumentation: Specify an exclude/include list.


BEGIN_EXCLUDE_LIST

void Uintah::Patch::findCellAndShapeDerivatives(const SCIRun::Point &, SCIRun::IntVector *, SCIRun::Vector *) const  

SCIRun::Point Uintah::Level::positionToIndex(const SCIRun::Point &) const  

void Uintah::Patch::findCellAndWeightsAndShapeDerivatives(const SCIRun::Point &, SCIRun::IntVector *, double *, SCIRun::Vector *) const  

Uintah::Box Uintah::Level::getBox(const SCIRun::IntVector &, const SCIRun::IntVector &) const  

SCIRun::Point Uintah::Level::getNodePosition(const SCIRun::IntVector &) const  

Uintah::Box Uintah::Patch::getBox() const  

void Uintah::Patch::findCellAndWeights(const SCIRun::Point &, SCIRun::IntVector *, double *) const  

bool Uintah::BoxGeometryPiece::inside(const SCIRun::Point &) const  

int SCIRun::Point::operator==(const SCIRun::Point &) const  

std::string Uintah::ForceBC::getType() const  

int Uintah::Material::getDWIndex() const  

const SCIRun::Point &Uintah::ForceBC::getUpperRange() const  

const SCIRun::Point &Uintah::ForceBC::getLowerRange() const  

bool SCIRun::Thread::isInitialized()  

END_EXCLUDE_LIST


Questions? Please contact Sameer Shende <sameer@cs.uoregon.edu> or Dav. 
These files are in ~sameer/SCIRun/src directory.

