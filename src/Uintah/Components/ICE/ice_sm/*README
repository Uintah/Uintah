UINTAH-CFD ICE README FILE  06/02/00
________________________________________________________________________

The purpose is to introduce and warn the new developer to this code.



________________________________________________________________________
         D  I  R  E  C  T  O  R  Y     L  A  Y  O  U  T 
________________________________________________________________________
Each one the steps in the algoritm has a separate folder which contains ONLY the source code for that particular step.  All of the include and header files are located in the the Header_file/ directory.  Currently, the folders and a description of what is inside is given below  

Uintah_cfd_code
---------------------
Contains the input file "if" and some of the source code that is currently being developed.


Advection_2D/  
---------------------     
2-D Compatible fluxes advection source code.


Boundary_Cond/
---------------------      
Code for Nuemann Dirichlet and wall boundary conditions 


Doc_utils/
---------------------        
Perl scripts and a makefile that generates the web page and a latex printout of 
the source code.


Eventually_trash/
---------------------   
Code that I'm afraid to throw away but will eventually.


Header_files/
---------------------       
This folder contains all of the header and include files used by all of the different 


Libraries/
---------------------          
Contains all of the special libraries for ploting, writing tecplot files, and special malloc libraries.


Plot_routines/
---------------------      
Code associated with the debugging plotting routines


PressureSolve/
---------------------      
Code for the iterative pressure solver.

PressureSolve_PCG/
---------------------      
Pressure solver based on PETSc package


Results/
---------------------            
All of the tecplot files pgplot files are placed in this folder 

Results/
--------------------- 
Contains a suite of tests.

Write_output/
---------------------        
Code for writing both face-centered and cell-centered variables to a binary tecplot files.




________________________________________________________________________
             C  O  D  E     C  O  N  V  E  N  T  I  O  N  S 
________________________________________________________________________
Here are some of the coding conventions that you'll see throughout the code

1)  The int variables i,j,k,f,m represent the array indices in the x, y, z, face, and material respectively.


2)  The variable extension "_CC" is used to designate cell-centered and "_FC" for face-centered. 


3)  All lagrangian variables have the "_L" somewhere in there name.


4)  All main code memory allocation is done in the include file "allocate_memory.i" and deallocated in "free_memory.i"  All of the memory for the arrays are allocated using the Numerical Recipies in C routines (nrutil+.c).


5)  The "*_FC" arrays are treated slight different than all of the other arrays.  These array are treated as pointers in that to access the value you would use "*variablename[i][j][k][m] = 1.0" as opposed to "variable[i][j][k][m]= 1.0"  Additionally, the address of 
cell[i][j][k][RIGHT] is equated to cell[i+1][j][k][LEFT] and similarly for the TOP, BOTTOM, FRONT AND BACK.


6)  Array indexing convention
    ***Array    -> Array[i][j][k]
    ****Arrays  -> Array[m][i][j][k]
    *****Arrays -> *Array[i][j][k][face]
    ******Array -> *Array[i][j][k][face][m]

    
7)  Variables that are in all capitals are either defined at the top of function or in the file "parameters.h"


8)  At the bottom of most of the routines is a section
where you can printout pertainant variables either by writing to stderr or plotted to an X11 window.  If variables are plotted then you see something similar to

                 #if switchDebug_main
                          #define switchInclude_main 1
                          #include "debugcode.i"
                          #undef switchInclude_main
                 #endif

If you turn on the debuggind switch "switchDebug_main 1" in the file "/Header_files/switches.h" or in the "./switches.h" then pgplot will dump a series of contour plots to the screen

9)  I usually refer to source and sinks of momentum and energy as sources.  So the variable xmom_sources actually contains sources and sinks of momentum.


10) Frequently you'll see seemly unecessary temporary variable used when equation are written
The reason is that SGI's debugger CVD won't display an array element when one of the indices has been previously defined.  For example cvd won't show uvel_FC[i][j][k][RIGHT][m] so I might use
uvel_FC = uvel_FC[i][j][k][RIGHT][m] 


11) Occasionally at the bottom a function there will be a section entitled "QUITE_FULL WARN"
When compiling the code the flag -fullwarn on the SGI compiler is used.  Occasionally, the 
compiler will printout warnings indicating which variables haven't been referenced.  To eliminate
these warnings I'll somehow reference that particular variable.  This is either done by using
the macro QUITE_FULLWARN() or setting the variable equal to itself.



12) In a function's parameter list you might see the comments (INPUT), (OUPUT)   or (INPUT) /(OUPUT).  This represents the main inputs and outputs to that function.  The comment (INPUT) /(OUPUT)  means that the variable is both
input and output.

13) As a general rule only the array limits 

                        xLoLimit,       yLoLimit,       zLoLimit,
                        xHiLimit,       yHiLimit,       zHiLimit,
    
    are passed into a function.  If that function needs to access the entire
    domain including the ghost cells then inside of the function the limits
    are set using the following 
    
        xLo = GC_LO(xLoLimit);
        xHi = GC_HI(xHiLimit);
        yLo = GC_LO(yLoLimit);
        yHi = GC_HI(yHiLimit);
        zLo = GC_LO(zLoLimit);
        zHi = GC_HI(zHiLimit);
        
 14) In the guts of each function you'll see  /*STOP_DOC*/ which tells the autodocumentations script to stop at that particular point.



 15) In the main code you'll see
      
        #if switch_step4_OnOff                  /* Debugging switch                  */
     
     This switch is used during the debugging process so you can easily turnoff entire 
     steps in the algorithm without having to comment out that function.  The switch
     is defined in "switches.h"
     
 16) In the folder "./Tests" are subfolders that contain code verfication tests that can be run.
     Inside of these subfolders are the files "switches.h" "parameters.h" and "Makefile."  These
     files have been customized for that particular test.  There is also a file called "overides.c"
     which is a version of main that may have the necessary changes.  Any code that resides in your
     test folder will overide the base code, assuming that you've modified the Makefile.
     

________________________________________________________________________
        B  O  U  N  D  A  R  Y     C  O  N  D  I  T  I  O  N  S 
________________________________________________________________________
1) Boundary conditions:
Currently there are two main arrays "BC_types" and "BC_Values" that control what 
the boundary conditons are surrounding the computational domain. 

BC_types[wall][variable] defines what type of boundary condition is defined
For example

    BC_types[TOP][VEL_BC]= DIRICHLET 

indicates that along the top of the domain  the velocity boundary condition is dirichlet.  
The value of each of the components is set through the "BC_Values" array.  For 
example for a flow with u=v=1.0 through the top face the "BC_Values" array specification is

    BC_Values[TOP][UVEL] = 1.0
    BC_Values[TOP][VVEL] = 1.0
    BC_Values[TOP][WVEL] = 0.0 


Currently the different boundary condition types that are available is 
    NO_BC        = -9
    DIRICHLET    = 0
    NEUMANN      = 1
    WALL         = 2

There are no safegaurds or bullet proofing preventing you to do something 
less than smart :)

    ---------------------------------------------
    | o |   |   |   |   |   |   |   |   |   | 0 |   -- top_GC       
    ---------------------------------------------                   
    |   | + | + | + | + | + | + | + | + | + |   |   -- yHiLimit     
    ---------------------------------------------                   
    |   | + | + | + | + | + | + | + | + | + |   |                   
    ---------------------------------------------                   
    |   | + | + | + | + | + | + | + | + | + |   |                   
    ---------------------------------------------                    
    |   | + | + | + | + | + | + | + | + | + |   |   -- yLoLimit     
    ---------------------------------------------                   
    | o |   |   |   |   |   |   |   |   |   | o |   -- bottom_GC    
    ---------------------------------------------                   
      |   | xLoLimit             xHiLimit |   |                     
      |                                       |                     
      left_GC                               right_GC




________________________________________________________________________
      RELATED TO TIME
________________________________________________________________________
In the input file "if" the varables related to time are    
    
Finish Time (sec)                 ~0.1          End of the problem
t_initial_output                  ~0.0          When to start dumping output
t_final_output                    ~0.1          Time for final output dump
t_delta_output                    ~0.0          Time between dumps.  if this 
                                                equals 0.0 then it dumps every
                                                timestep.
                                            
delt_min                          ~0.0          minimum allowable time step
delt_max                          ~1.75         maximum allowable time step
delt_initial_iteration            ~0.0001       time step for the initial 
                                                iterations
                                                
          
    
________________________________________________________________________
             P  G  P  L  O  T     N  O  T  E  S 
________________________________________________________________________


The foundation of these routines is the PGPLOT Graphics Subroutine Library written by Tim Pearsons, California Institute of Technology, http://astro.caltech.edu/~tjp/pgplot/.  PGPLOT is not public-domain software. However, it is freely available for  non-commercial use. The source code and documentation are copyrighted by California Institute of Technology, and may not be redistributed or placed on public Web servers without permission. The software is provided ``as is'' with no warranty.

Essentially what I've done is to write a series of interfaces between Uintah-CFD and the pgplot routines.  Pgplot depends on three files "cpgplot.h", the font file "grfont.dat" and the library "libcpgplot.a"  These libraries were compiled on an SGI Octane (R10K) using Mips 7.2.1 compilers.
Currently I've compiled a 64 and 32 bit version of the libraries for the SGI.  If you have problems you'll have to download and compile a the package and place the libraries in the Libraries folder.  In the current implementation you have a choice of either dumping X11 displays, gif files, postscript files, or xwd files.  If you are going to write a time series of gif files then you need to specify a directory to which the files will be written, do this in "parameter.h" in the PLOTTING
VARIABLES  section.


#define filepath "/usr/people/harman/Csafe/Uintah_cfd_code/Results/" 

Additional flags in the file parameters.h include:
contourplot_type            if you want a smooth or checker board contour plot.
GRAPHDESC(*)                Graph description on the top of each plot.


Inside of the file debug.i, for most functions there is section of code that defines plot characteristics  For example you might see something like

        /*__________________________________
        * Define plotting variables 
        *___________________________________*/
        plot_type           = 1;
        Number_sub_plots    = 4;
        strcpy(file_basename,"");
        outputfile_type     = 0;
        x_axis_origin       = (xLoLimit);
        y_axis_origin       = (yLoLimit);
        x_axis              = (xHiLimit);
        y_axis              = (yHiLimit);
        outline_ghostcells  = 1;
        strcpy(x_label,"cell\0");
        strcpy(y_label,"cell\0");
        strcpy(graph_label,"Main Program INPUTS rho_CC\0");


      Variable            Description
      --------            -----------
      plot_type           1= contour plot, 2 = Line plot, 3 = vector plot
      Number_sub_plots    Dictates the number of subplots that will be placed
                          in the main window.  Currently, the maximum number 
                          of subplots is 4.  FOR EACH SUBPLOT THERE MUST BE A                      
                          CALL TO PLOT.

      outputfile_type     0 = screen, 1 = gif, 2 = postscript, 3 = xwd
      
      file_basename       If your going to dump to a file then put something
                          here.

      (*)_axis_orgin      Lower array limits 

      x_axis              Upper array limits (this should be renamed )

      outline_ghostcells  =1 then draw a line showing the boundary between 
                          the main cells and the ghost cells.

      (*)_label           Axis labels                  


___________________________
Example of plotting a contour plot of the temperature field for material 1 
Place the follow after all of the local variables have been defined.

    #include "plot_declare_vars.h"   
This will declare all of the variables need by pgplot.


Then paste the following code at the bottom of the function or inside of a loop

      /*__________________________________
        * Define plotting variables 
        *___________________________________*/
        plot_type           = 1;
        Number_sub_plots    = 0;
        strcpy(file_basename,"");           /* use this if you want to dumpfiles */
        outputfile_type     = 0;
        x_axis_origin       = GC_LO(xLoLimit);
        y_axis_origin       = GC_LO(yLoLimit);
        x_axis              = GC_HI(xHiLimit);
        y_axis              = GC_HI(yHiLimit);  
        outline_ghostcells  = 0;
        strcpy(x_label,"cell\0");
        strcpy(y_label,"Temperature [K]\0");                      
         
/*__________________________________
*   MAIN WINDOW 
*   - Convert the 4D array into a 1D array
*     that pgplot can understand.
*   - Plot the data
*   - Free the allocated memory
*___________________________________*/       
        strcpy(graph_label,"Main Program Temp_CC\0");
        data_array1    = convert_darray_4d_to_vector(
                                Temp_CC,
                                (xLoLimit),             (xHiLimit),         (yLoLimit),
                                (yHiLimit),             (zLoLimit),          (zHiLimit),    
                                m,                      m,
                                &max_len);
        PLOT;
        free_vector(    data_array1,       1, max_len);

If you want to keep your code clean then I recommend placing all of the debugging code inside
of the file "debug.i" and use switches to turn it on and off.  Look at the code for an example
of how to use switches.


___________________________
PGPLOT CONFIGURATION
___________________________    

Some enviromental variables that I recommend setting in your .cshrc file before you pgplot are
PGPLOT_GIF_WIDTH=500
PGPLOT_DEV=/XWIN
PGPLOT_GIF_HEIGHT=500

In your .Xdefaults file you should also put the following
!__________________________________________________________
! pgplot resources
!__________________________________________________________
pgxwin.Win.maxColors:               255
pgxwin.Win.minColors:               10
pgxwin.Win.acceptQuit:              True
pgxwin.Win.crosshair:               True
pgxwin.win1.geometry:               420x480+0+20
pgxwin.win2.geometry:               420x480+425+17
pgxwin.win3.geometry:               420x480-0+2
pgxwin.win4.geometry:               420x480-0-50
pgxwin.win5.geometry:               420x480+425-50
pgxwin.win6.geometry:               420x480+0-50
pgxwin.win7.geometry:               420x480+425+200
pgxwin.win8.geometry:               420x480+0+200
pgxwin.win9.geometry:               420x480-0+200
pgxwin.win10.geometry:              420x480-10+200

so that the different windows aren't continuously overlapping each other.



___________________________
Making movies with pgplot
___________________________ 
Below are the steps you need to take to make movies with pgplot.  Note this has
only been tested for single materials.


1)  Edit the local version of "parameters.h" and edit 

   #define filepath "/usr/people/harman/Csafe/ICE_SM_TEST/Tests/NIST_fire/Results/"
   
    to the path where you want the files to dump.

   Add a description of the header of the plots 
    #define GRAPHDESC  "Test of Nist Fire Code"
    #define GRAPHDESC2 "Gravity is currenty turned off in CFD"
    #define GRAPHDESC3 ""
    #define GRAPHDESC4 ""
   
2)  Edit the "debugcode.i" file and set the "outputfile_type = 1" on those windows
    that you wish to make a movie of.  Additionally set the variable file_basename to 
    something you'll remember, don't include an extension the code will do it automatically.
    
3)  Run the code to generate the gif files of the window.

4)  Run the script "makemove <basefilename> <output movie name>" to generate and play the movie.
  
   




________________________________________________________________________
         M  I  S  C  . 
________________________________________________________________________
In this version the the thermodynamic and transport properties
are assumed to be constant.  However, the "hooks" are in place for variable coeffients.



There are two macros that calculate 
GC_LO{x}:  macro that returns x - N_GHOSTCELLS
GC_HI(x):  macro that returns x + N_GHOSTCELLS

