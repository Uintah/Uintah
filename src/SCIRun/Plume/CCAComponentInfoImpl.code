/*
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/


/*
 *  CCAComponentInfoImpl.code: 
 *
 *  Written by:
 *   Yarden Livnat
 *   SCI Institute
 *   University of Utah
 *   Sept 2005
 *
 */

#ifndef SCIRun_CCAComponentInfoImp_code
#define SCIRun_CCAComponentInfoImp_code

//#include <SCIRun/Plume/CCAComponentInfoImpl.h>
#include <SCIRun/Distributed/TypeMap.h>
#include <SCIRun/Distributed/PortInfo.h>
#include <SCIRun/Distributed/ComponentID.h>
#include <SCIRun/Distributed/CCAException.h>

#include <SCIRun/Distributed/ComponentInfoImpl.code>
#include <SCIRun/Plume/CCAComponentModel.h>

#include <Core/Thread/Guard.h>

namespace SCIRun {
  
  /**
   * \class CCAComponentInfo
   *
   */
  
  template<class Base>
  CCAComponentInfoImpl<Base>::CCAComponentInfoImpl(const Distributed::DistributedFramework::pointer &framework,
						   const std::string& instanceName,
						   const std::string& className,
						   const sci::cca::TypeMap::pointer& properties,
						   const sci::cca::Component::pointer& component,
						   CCAComponentModel *model)
    : ComponentInfoImpl<Base>(framework, instanceName, className, properties, component ),
      model(model)
  {
  }
  
  template<class Base>
  CCAComponentInfoImpl<Base>::~CCAComponentInfoImpl() 
  {
    // first inform the model to remove the component
    model->destroyComponent(pointer(this));

    // now we can remove any additional resources we allocated
    // note: none at this point in time.
 }

  // from cca.Services
  template<class Base>
  void
  CCAComponentInfoImpl<Base>::releasePort(const std::string&name)
  {
    Guard guard(&ports_lock);
    
    typename PortMap::iterator iter = ports.find(name);
    if ( iter == ports.end() )
      throw CCAException::create("Port already exist", sci::cca::PortNotDefined);
    
    // FIXME [yarden]: PortNotDefined is not an appropriate type here
    PortInfo::pointer port = (*iter).second;
    if ( port->getPortType() == Distributed::ProvidePort )
      throw CCAException::create("Cannot release a provides port", sci::cca::PortNotDefined);

    if ( !port->decrementUseCount())
      throw CCAException::create("Port released without corresponding get", sci::cca::PortNotInUse);
  }

  template<class Base>
  void
  CCAComponentInfoImpl<Base>::registerUsesPort(const std::string &name, 
					       const std::string &type, 
					       const TypeMap::pointer &properties)
  {
    Guard guard(&ports_lock);
    
    if ( ports.find(name) != ports.end() )
      throw CCAException::create("Port already exist", sci::cca::PortAlreadyDefined);

    PortInfo *info = new PortInfo(name, type, properties, Distributed::UsePort);
    ports[name] = PortInfo::pointer(info);
  }

  template<class Base>
  void
  CCAComponentInfoImpl<Base>::unregisterUsesPort(const std::string &name)
  {
    Guard guard(&ports_lock);
    
    typename PortMap::iterator port = ports.find(name);
    if ( port == ports.end() )
      throw CCAException::create("Port does not exist", sci::cca::PortNotDefined);
    ports.erase(port);
  }

  template<class Base>
  void
  CCAComponentInfoImpl<Base>::addProvidesPort(const sci::cca::Port::pointer &port, 
					      const std::string &name, 
					      const std::string &type, 
					      const TypeMap::pointer &propertied)
  {
    Guard guard(&ports_lock);
    if ( ports.find(name) != ports.end() )
      throw CCAException::create("Port already exist", sci::cca::PortAlreadyDefined);

    PortInfo *info = new PortInfo(name, type, propertied, port, Distributed::ProvidePort);
    ports[name] = PortInfo::pointer(info);
  }

  template<class Base>
  void
  CCAComponentInfoImpl<Base>::registerForRelease( const sci::cca::ComponentRelease::pointer &)
  {
    throw CCAException::create("registerForRelase::not implemented");
  }

  template<class Base>
  void
  CCAComponentInfoImpl<Base>::removeProvidesPort(const std::string &name)
  {
    Guard guard(&ports_lock);
    
    typename PortMap::iterator port = ports.find(name);
    if ( port == ports.end() )
      throw CCAException::create("Port does not exist", sci::cca::PortAlreadyDefined);
    ports.erase(port);
  }
  
  template<class Base>
  sci::cca::Port::pointer   
  CCAComponentInfoImpl<Base>::getPort(const std::string &name)
  {
    Guard guard(&ports_lock);
    
    typename PortMap::iterator iter = ports.find(name);
    if ( iter == ports.end() )
      throw CCAException::create("Port does not exist", sci::cca::PortNotDefined);

    PortInfo::pointer port = (*iter).second;
    if ( port->getPortType() == Distributed::ProvidePort)
      throw CCAException::create("Canot call getPort on a Provides port", sci::cca::BadPortName);
    
    if ( !!port->isConnected()  )
      throw CCAException::create("Port not connected", sci::cca::PortNotConnected);

    port->incrementUseCount();
    return port->getPeer()->getPort();
  }

  template<class Base>
  sci::cca::Port::pointer 
  CCAComponentInfoImpl<Base>::getPortNonblocking(const std::string &name)
  {
    sci::cca::Port::pointer Null(0);

    if ( !ports_lock.tryLock() ) return Null;
    
    Guard guard(&ports_lock, Guard::AlreadyLocked);
    
    typename PortMap::iterator iter = ports.find(name);
    if ( iter == ports.end() )
      throw CCAException::create("Port does not exist", sci::cca::PortNotDefined);

    PortInfo::pointer port = iter->second;
    if ( port->getPortType() == Distributed::ProvidePort)
      throw CCAException::create("Canot call getPort on a Provides port", sci::cca::BadPortName);
    
    if ( !port->isConnected() )
      throw CCAException::create("Canot call getPort on a Provides port", sci::cca::PortNotConnected);

    port->incrementUseCount();
    return port->getPeer()->getPort();
  }

  template<class Base>
  TypeMap::pointer 
  CCAComponentInfoImpl<Base>::createTypeMap()
  {
    TypeMap::pointer properties(new TypeMap);
    // FIXME [yarden] from SCIRUn code:
    // It is not clear why we need addReference here.
    // But removing it can cause random crash
    // when creating remote parallel components
    // TODO: possible memory leak?
    properties->addReference();

    return properties;
  }

  template<class Base>
  TypeMap::pointer
  CCAComponentInfoImpl<Base>::getPortProperties(const std::string &name)
  {
    Guard guard(&ports_lock);
    
    typename PortMap::iterator port = ports.find(name);
    if ( port == ports.end() )
      throw CCAException::create("Port does not exist", sci::cca::PortNotDefined);

    return port->second->getProperties();
  }

  template<class Base>
  ComponentID::pointer 
  CCAComponentInfoImpl<Base>::getComponentID()
  {
    return ComponentID::pointer(this);
  }
  
} // end namespace SCIRun

#endif
