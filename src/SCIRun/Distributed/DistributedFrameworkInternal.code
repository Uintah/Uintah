/*
  For more information, please see: http://software.sci.utah.edu

  The MIT License

  Copyright (c) 2005 Scientific Computing and Imaging Institute,
  University of Utah.

  License for the specific language governing rights and limitations under
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
*/


/*
 *  DistributedFrameworkInternal.code: 
 *
 *  Written by:
 *   Yarden Livnat
 *   SCI Institute
 *   University of Utah
 *   August 2005
 *
 */

#ifndef SCIRun_DistributedFrameworkInternalImpl_code
#define SCIRun_DistributedFrameworkInternalImpl_code

#include <SCIRun/Distributed/CCAException.h>
#include <SCIRun/Distributed/FrameworkInternalException.h>
#include <SCIRun/Distributed/ConnectionID.h>
#include <SCIRun/Distributed/ConnectionInfo.h>
#include <SCIRun/Distributed/ComponentID.h>
#include <SCIRun/Distributed/ComponentInfo.h>
#include <SCIRun/Distributed/TypeMap.h>

#include <Core/Thread/Guard.h>

#include <SCIRun/Distributed/DistributedFrameworkImpl.code>
#include <algorithm>

namespace SCIRun {
  
  template<class Base>
  DistributedFrameworkInternal<Base>::DistributedFrameworkInternal(const pointer &parent )
    : DistributedFrameworkImpl<Base>(parent),
      connection_lock("DistributedFrameworkInternal::connection_lock"),
      component_lock("DistributedFrameworkInternal::component_lock"),
      factory_lock("DistributedFrameworkInternal::factory_lock")
  {
  }
  
  template<class Base>
  DistributedFrameworkInternal<Base>::~DistributedFrameworkInternal()
  {
  }
  

  template<class Base>
  ComponentInfo::pointer DistributedFrameworkInternal<Base>::createInstance( const std::string& instanceName,
							       const std::string& className,
							       const sci::cca::TypeMap::pointer& properties)
  {
    Guard guard(&component_lock);

    if ( components.find(instanceName) != components.end() )
      throw CCAException::create("can not create component ["+instanceName+"]: name in use");

    ComponentInfo::pointer info(0);
    {
      Guard guard(&factory_lock);
      
      ComponentClassFactoryMap::iterator factory = factories.find(className);
      if ( factory == factories.end() )
	throw CCAException::create("Can not create a component of type ["+className+"]: no factory");
      
      // this may throw a cca exception.
      // do not catch it. 
      info = factory->second->create( pointer(this), instanceName, properties);
    }
    
    components[instanceName] = info;

    return info;
  }
 
  template<class Base>
  SSIDL::array1<sci::cca::ComponentClassDescription::pointer> 
  DistributedFrameworkInternal<Base>::listAllComponentTypes( bool )
  {
    SSIDL::array1<sci::cca::ComponentClassDescription::pointer> types;

    Guard guard(&factory_lock);
    
    for (ComponentClassFactoryMap::iterator factory = factories.begin(); factory != factories.end(); ++factory)
      types.push_back(factory->second->getClassDescription());

    return types;
  }

  template<class Base>
  ComponentID::pointer DistributedFrameworkInternal<Base>::lookupComponentID(const std::string &name) 
  {
    SCIRun::Guard guard(&component_lock);

    ComponentMap::iterator id = components.find(name);
    if (id == components.end())
      return ComponentID::pointer(0);
    else 
      return id->second;
  }

  template<class Base>
  sci::cca::TypeMap ::pointer
  DistributedFrameworkInternal<Base>::createTypeMap()
  {
    return TypeMap::pointer( new TypeMap );
  }
    
  template<class Base>
  sci::cca::Services::pointer DistributedFrameworkInternal<Base>::getServices( const std::string &name, 
									       const std::string &type, 
									       const sci::cca::TypeMap::pointer &properties)
  {
    throw CCAException::create("getServices is not implemented by DistributedFramework.");
  }

  template<class Base>
  void DistributedFrameworkInternal<Base>::releaseServices( const sci::cca::Services::pointer &services)
  {
    // same as regular destroyInstance
  }
    
  template<class Base>
  sci::cca::AbstractFramework::pointer DistributedFrameworkInternal<Base>::createEmptyFramework()
  {
    return pointer(new DistributedFramework(pointer(this)));
  }

  template<class Base>
  void DistributedFrameworkInternal<Base>::shutdownFramework()
  {
    // Fixme [yarden]: is there anything to do here ?
  }

  template<class Base>
  SSIDL::array1<ComponentID::pointer>
  DistributedFrameworkInternal<Base>::getComponentIDs()
  {
    SSIDL::array1<ComponentID::pointer> ids;

    SCIRun::Guard guard(&component_lock);

    for (ComponentMap::iterator iter = components.begin(); iter != components.end(); ++iter ) 
      ids.push_back(iter->second);

    return ids;
  }


  template<class Base>
  SSIDL::array1<ConnectionID::pointer>
  DistributedFrameworkInternal<Base>::getConnectionIDs(const SSIDL::array1<ComponentID::pointer> &componentList)
  {
    SSIDL::array1<ConnectionID::pointer> selected;

    SCIRun::Guard guard(&connection_lock);

    for (ConnectionList::const_iterator iter = connections.begin(); iter != connections.end(); ++iter ) {
      const ConnectionID::pointer &connection = (*iter);

      ComponentID::pointer user = connection->getUser();
      ComponentID::pointer provider = connection->getProvider();

      for (unsigned j = 0; j < componentList.size(); j++) {
	const ComponentID::pointer &component = componentList[j];
	if (user == component || provider == component) {
	  selected.push_back(connection);
	  break;
	}
      }
    }
    return selected;
  }

  
  template<class Base>
  void 
  DistributedFrameworkInternal<Base>::addConnection( const sci::cca::ConnectionID::pointer &connection )
  {
    SCIRun::Guard guard(&connection_lock);

    ConnectionInfo::pointer connectionInfo = pidl_cast<ConnectionInfo::pointer>(connection);

    if ( find( connections.begin(), connections.end(), connectionInfo ) != connections.end() )
      throw CCAException::create("connection already exist ", sci::cca::Unexpected);

    connections.push_back(connectionInfo);
  }

  template<class Base>
  void 
  DistributedFrameworkInternal<Base>::disconnect( const sci::cca::ConnectionID::pointer &connection )
  {
    SCIRun::Guard guard(&connection_lock);

    ConnectionInfo::pointer connectionInfo = pidl_cast<ConnectionInfo::pointer>(connection);

    ConnectionList::iterator c = find(connections.begin(), connections.end(), connectionInfo);
    if ( c == connections.end() )
      throw CCAException::create("connection does not exist ", sci::cca::Unexpected);

    connections.erase(c);
  }


  template<class Base>
  void DistributedFrameworkInternal<Base>::destroyInstance( const ComponentID::pointer &componentID )
  {
    SCIRun::Guard guard(&component_lock);
    
    ComponentInfo::pointer info = pidl_cast<ComponentInfo::pointer>(componentID);
    ComponentMap::iterator c = components.find( info->getInstanceName() );

    if ( c == components.end() ) {
      throw CCAException::create("request to desrtoy an instance that is not registered with the framework [" + 
				 info->getInstanceName() + "]");
    }

    // reduce reference to the component info
    components.erase(c);
  }

  template<class Base>
  Distributed::internal::Service::pointer // DistributedFrameworkInternal<Base>::ServicePointer
  DistributedFrameworkInternal<Base>::getFrameworkService(const std::string &name)
  {
    ServiceMap::const_iterator service = services.find(name);
    return service != services.end() ? (*service).second : ServicePointer(0);
  }

  template<class Base>
  void
  DistributedFrameworkInternal<Base>::releaseFrameworkService(const ServicePointer &service)
  {
    // for now we only have singleton services and we can forgo deleting them.
  }


  template<class Base>
  void 
  DistributedFrameworkInternal<Base>::addComponentClassFactory( const Internal::ComponentClassFactory::pointer &factory )
  {
    Guard guard(&factory_lock);

    if ( factories.find(factory->getClassName()) != factories.end() )
      throw CCAException::create("ComponentClassFactory ["+factory->getClassName()+"] registerd twice");

    factories[factory->getClassName()] = factory;
  }
  
} // SCIRun namespace

#endif // 
