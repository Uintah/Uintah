/*
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/


/*
 *  BuilderServiceImpl.code: Implementation of CCA BuilderService for SCIRun
 *
 *  Written by:
 *   Steven G. Parker
 *   Department of Computer Science
 *   University of Utah
 *   October 2001
 *
 */

#ifndef SCIRun_BuilderServiceImpl_code
#define SCIRun_BuilderServiceImpl_code

#include <Core/CCA/spec/sci_sidl.h>
#include <Core/CCA/PIDL/PIDL.h>

#include <SCIRun/Distributed/CCAException.h>
#include <SCIRun/Distributed/PortInfo.h>
#include <SCIRun/Distributed/ComponentID.h>
#include <SCIRun/Distributed/ComponentInfo.h>
#include <SCIRun/Distributed/ConnectionID.h>
#include <SCIRun/Distributed/ConnectionInfo.h>
#include <SCIRun/Distributed/ConnectionEvent.h>
#include <SCIRun/Distributed/ConnectionEventService.h>

#include <SCIRun/Distributed/ServiceImpl.code>

#include <iostream>
#include <string>

using namespace std;

namespace SCIRun {
  
  template<class Base>
  BuilderServiceImpl<Base>::BuilderServiceImpl(const DistributedFramework::internalPointer &framework)
    : ServiceImpl<Base>(framework, "BuilderService"), framework(framework)
  {
  }
  
  template<class Base>
  BuilderServiceImpl<Base>::~BuilderServiceImpl()
  {
  }
  
  template<class Base>
  sci::cca::Port::pointer 
  BuilderServiceImpl<Base>::getService(const std::string&) 
  {
    return sci::cca::Port::pointer(this);
  }


  template<class Base>
  sci::cca::ComponentID::pointer
  BuilderServiceImpl<Base>::createInstance(const std::string& instanceName,
					   const std::string& className,
					   const sci::cca::TypeMap::pointer& properties)
  {
    return framework->createInstance(instanceName, className, properties);
  }
  
  template<class Base>
  sci::cca::ConnectionID::pointer
  BuilderServiceImpl<Base>::connect(const sci::cca::ComponentID::pointer &userID,
				    const std::string &usesPortName,
				    const sci::cca::ComponentID::pointer &providerID,
				    const ::std::string &providesPortName)
  {
    // sanity check
    if (userID.isNull()) {
      throw sci::cca::CCAException::pointer(new CCAException("Cannot connect: invalid user componentID"));
    }
    if (providerID.isNull()) {
      throw sci::cca::CCAException::pointer(new CCAException("Cannot connect: invalid provider componentID"));
    }

    ComponentInfo::pointer user = pidl_cast<ComponentInfo::pointer>(userID);
    ComponentInfo::pointer provider = pidl_cast<ComponentInfo::pointer>(providerID);

    // FIXME [yarden]: need to allow the builder to connect components from different framework
    //                 by using the other frameowrk's builder
    if (user->getFramework() != this->getFramework() || provider->getFramework() != this->getFramework()) {
      throw sci::cca::CCAException::pointer(new CCAException("Cannot connect components from different frameworks"));
    }

    
    // user
    sci::cca::TypeMap::pointer uProps = user->getProperties();
    PortInfo::pointer usesPort = user->getPortInfo(usesPortName);
    if (usesPort.isNull()) {
      throw sci::cca::CCAException::pointer(new CCAException("Unknown port " + usesPortName, sci::cca::BadPortName));
    }
    
    // provider
    sci::cca::TypeMap::pointer pProps = provider->getProperties();
    PortInfo::pointer providesPort = provider->getPortInfo(providesPortName);
    if (providesPort.isNull()) {
      throw sci::cca::CCAException::pointer(new CCAException("Unknown port " + providesPortName));
    }
    
    if ( !usesPort->connect(providesPort)) {
      std::cerr << "BuilderServiceImpl<Base>::connect: attempt to connect " << usesPortName << " with " << providesPortName << " failed." << std::endl;
      throw sci::cca::CCAException::pointer(new CCAException("Cannot connect " + usesPortName + " with " + providesPortName));
    }
    
    sci::cca::TypeMap::pointer properties = framework->createTypeMap();
    properties->putString("user", user->getInstanceName());
    properties->putString("provider", provider->getInstanceName());
    properties->putString("uses port", usesPortName);
    properties->putString("provides port", providesPortName);
    
    sci::cca::ConnectionID::pointer connection(new ConnectionInfo(userID, usesPortName, providerID, providesPortName));
    framework->addConnection(connection);

    // TODO [yarden]: is this a race ?[emit event and return connection]
    // what if someone acts on this event but the Builder did not get the information yet ... 
    emitConnectionEvent(new ConnectionEvent(sci::cca::ports::Connected, properties));
    return connection;
  }
  

  template<class Base>
  SSIDL::array1<sci::cca::ComponentID::pointer>
  BuilderServiceImpl<Base>::getComponentIDs()
  {
    return framework->getComponentIDs();
  }

  template<class Base>
  sci::cca::TypeMap::pointer
  BuilderServiceImpl<Base>::getComponentProperties(const sci::cca::ComponentID::pointer &cid)
  {
    if (cid.isNull()) {
      throw sci::cca::CCAException::pointer(new CCAException("Invalid ComponentID"));
    }
    
    ComponentInfo::pointer ci = pidl_cast<ComponentInfo::pointer>(cid);
    return ci->getProperties();
  }
  
  template<class Base>
  void
  BuilderServiceImpl<Base>::setComponentProperties(const sci::cca::ComponentID::pointer &cid,
					 const sci::cca::TypeMap::pointer &map)
  {
    if (cid.isNull()) {
      throw sci::cca::CCAException::pointer(new CCAException("Invalid ComponentID"));
    }
    if (map.isNull()) {
      throw sci::cca::CCAException::pointer(new CCAException("Invalid TypeMap"));
    }
    
    ComponentInfo::pointer ci = pidl_cast<ComponentInfo::pointer>(cid);
    ci->setProperties(map);
  }
  
  template<class Base>
  sci::cca::ComponentID::pointer
  BuilderServiceImpl<Base>::getDeserialization(const std::string& /*s*/)
  {
    // TODO: finish this!
    std::cerr << "BuilderService::getDeserialization not finished\n";
    return sci::cca::ComponentID::pointer(0);
  }
  
  template<class Base>
  sci::cca::ComponentID::pointer
  BuilderServiceImpl<Base>::getComponentID(const std::string &componentInstanceName)
  {
    sci::cca::ComponentID::pointer cid = framework->lookupComponentID(componentInstanceName);
    if (cid.isNull()) {
      throw sci::cca::CCAException::pointer(new CCAException("ComponentID not found"));
    }
    return cid;
  }
  
  template<class Base>
  void
  BuilderServiceImpl<Base>::destroyInstance(const ComponentID::pointer &component, float /*timeout*/)
  {

    // TODO [yarden]: use timeout
    
    // inform framework there is no need for the component info anymore
    // the framework should then delete the component as well
    framework->destroyInstance(component);
  }
  
  template<class Base>
  SSIDL::array1<std::string>
  BuilderServiceImpl<Base>::getProvidedPortNames(const ComponentID::pointer &cid)
  {
    SSIDL::array1<std::string> result;
    ComponentInfo::pointer ci = pidl_cast<ComponentInfo::pointer>(cid);
    if (ci.isNull()) 
      throw sci::cca::CCAException::pointer(new CCAException("Invalid component " + cid->getInstanceName()));
    
    SSIDL::array1<Distributed::PortInfo::pointer> ports = ci->getPorts();
    
    SSIDL::array1<PortInfo::pointer>::const_iterator port;
    for (port=ports.begin(); port != ports.end(); ++port ) {
      if ((*port)->getPortType() == Distributed::ProvidePort) {
	result.push_back((*port)->getName());
      }
    }
    return result;
  }
  
  template<class Base>
  SSIDL::array1<std::string>
  BuilderServiceImpl<Base>::getUsedPortNames(const ComponentID::pointer &cid)
  {
    SSIDL::array1<std::string> result;
    ComponentInfo::pointer ci = pidl_cast<ComponentInfo::pointer>(cid);
    if (ci.isNull()) {
      throw sci::cca::CCAException::pointer(new CCAException("Invalid component " + cid->getInstanceName()));
    }

    SSIDL::array1<PortInfo::pointer> ports = ci->getPorts();

    SSIDL::array1<PortInfo::pointer>::const_iterator port;
    for (port=ports.begin(); port != ports.end(); ++port ) {
      if ((*port)->getPortType() == Distributed::UsePort) {
	result.push_back((*port)->getName());
      }
    }
    return result;
  }

  // TODO: make sure that port properties are actually created
  template<class Base>
  sci::cca::TypeMap::pointer
  BuilderServiceImpl<Base>::getPortProperties(const sci::cca::ComponentID::pointer &cid, const std::string &portname)
  {
    ComponentInfo::pointer info = pidl_cast<ComponentInfo::pointer>(cid);
    return info.isNull() ? framework->createTypeMap() : info->getProperties();
  }

  template<class Base>
  void BuilderServiceImpl<Base>::setPortProperties(const sci::cca::ComponentID::pointer& /*cid*/,
					 const std::string& /*portname*/,
					 const sci::cca::TypeMap::pointer& /*map*/)
  {
    // TODO: finish this!!!
    std::cerr << "BuilderService::setPortProperties not finished\n";
  }

  template<class Base>
  SSIDL::array1<sci::cca::ConnectionID::pointer>
  BuilderServiceImpl<Base>::getConnectionIDs(const SSIDL::array1<sci::cca::ComponentID::pointer> &componentList)
  {
    return framework->getConnectionIDs(componentList);
  }

  template<class Base>
  sci::cca::TypeMap::pointer
  BuilderServiceImpl<Base>::getConnectionProperties(const ConnectionID::pointer& connection)
  {
    ConnectionInfo::pointer info = pidl_cast<ConnectionInfo::pointer>(connection);
    return info.isNull() ? sci::cca::TypeMap::pointer(0) : info->getProperties();
  }

  template<class Base>
  void
  BuilderServiceImpl<Base>::setConnectionProperties(const ConnectionID::pointer &connection,
						    const sci::cca::TypeMap::pointer &properties)
  {
    ConnectionInfo::pointer info = pidl_cast<ConnectionInfo::pointer>(connection);
    if ( !info.isNull() )
      info->setProperties(properties);
  }

  // TODO: disconnect event
  // TODO: timeout never used
  template<class Base>
  void
  BuilderServiceImpl<Base>::disconnect(const ConnectionID::pointer& connection, float timeout)
  {
    ComponentInfo::pointer user = pidl_cast<ComponentInfo::pointer>(connection->getUser());
    ComponentInfo::pointer provider = pidl_cast<ComponentInfo::pointer>(connection->getProvider());
    
    PortInfo::pointer userPort = user->getPortInfo(connection->getUserPortName());
    PortInfo::pointer providerPort = provider->getPortInfo(connection->getProviderPortName());
    
    // TODO [yarden]: need to add a timer on next command
    userPort->disconnect(providerPort);
    
    framework->disconnect(connection);
  }
  
  template<class Base>
  void
  BuilderServiceImpl<Base>::disconnectAll(const sci::cca::ComponentID::pointer& /*id1*/,
					  const sci::cca::ComponentID::pointer& /*id2*/,
					  float /*timeout*/)
  {
    std::cerr << "BuilderService::disconnectAll not finished\n";
  }

  template<class Base>
  std::string
  BuilderServiceImpl<Base>::getFrameworkURL() {
    return framework->getURL().getString();
  }

  template<class Base>
  void BuilderServiceImpl<Base>::emitConnectionEvent(ConnectionEvent* event)
  {
    ConnectionEventService::pointer service = pidl_cast<ConnectionEventService::pointer>
      ( framework->getFrameworkService("cca.ConnectionEventService") );
    if (service.isNull()) {
      std::cerr << "Error: could not find ConnectionEventService" << std::endl;
    } else {
      ConnectionEventService *internal_service = dynamic_cast<ConnectionEventService *>(service.getPointer());
      internal_service->emitConnectionEvent(ConnectionEvent::pointer(event));
      framework->releaseFrameworkService(service);
    }
  }


} // end namespace SCIRun

#endif // SCIRun_BuilderServiceImpl_code
