#!/bin/bash
#______________________________________________________________________

# to differentiate among the build names & even directories
COMPILE="yes"                                       # yes/no for compiling uintah
DEFAULT_MAIL_TO="uintah-developers@lists.utah.edu"

DO_DBG="1"                                          # compile and run debug tests
DO_OPT="1"                                          # compile and run optimized tests
LOCAL_OR_NIGHTLY_TEST="nightly"
WHICH_TESTS="NIGHTLYTESTS"
BUILDONLY="0"                                       # Compile Uintah, don't run RT tests
OS=$(uname -s)                                      # operating sytem
PARALLELISM=0                                       # number of cores to use
REPLY_TO="uintah-developers@lists.utah.edu"
AUTO_UPDATE_PERF_GS="yes"                           # Automatically update performance GS if they improve
AUTO_UPDATE_GIT_STAMP="yes"                         # Automatically update the git hash when a test passes

SEND_MAIL_TO=""                                     # array of email names to send mail to
USE_PREVTREE="no"                                   # yes/no use the previous tree
USE_TREE="new"                                      # name of tree to use if not using the default
VERBOSE="no"
COMMON_GROUP=""                                     # common group the developers belong to
CHECKPOINTS=""                                      # path to the checkpoints directory
MPIRUN_PATH=""                                      # non-system path to mpirun
GIT_url="https://github.com/Uintah/Uintah.git"      # url for github
GIT_branch="yoyodyne"                               # github branch name
OUTPUT_HTML="yes"

ID=$(date +%m%d%y)

#__________________________________
# Machine specific variables

MACHINE=$(hostname)

if [ "$MACHINE" == "lscad5" ]; then
  COMMON_GROUP="lifespans"
  BUILD_DIR=/home/${LOGNAME}/"$OS"
  TEST_DATA_DIR=/home/${LOGNAME}/"$OS"/TestData
  SCRIPT_DIR=/home/${LOGNAME}/scripts
  CHECKPOINTS=/home/${LOGNAME}/CheckPoints

  # Where the webpage will be, and init webpage
  # Note you need the following directory structure:
  #     public_html/
  #       opt/
  #       dbg/
  #       Plots/
  #          Memory/
  #          simRunTime/

  PUBLIC_HTML=/home/${LOGNAME}/public_html
  HTMLLOG=${PUBLIC_HTML}/Uintah.html
  RT_URL=http://lscad5/~$LOGNAME 
  
  export TEST_COMPONENTS="MPM"
fi

#______________________________________________________________________


# test OS
if [ "$OS" != "Linux" ]; then
  echo "Linux OS is the only OS that is currently configured to work. Abort"
  exit -1
fi

export OS
umask 002

show_help=0
if [ $# -eq 0 ]; then
    show_help=1
fi

# command line arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
    -sendmail)
        SEND_MAIL_TO="$DEFAULT_MAIL_TO"
        ;;
    -sendmailto)
        if [ "$#" -gt 1 ]; then
            shift
            SEND_MAIL_TO="$1"
            REPLY_TO=""
        fi
        ;;
    -verbose)
        VERBOSE="yes"
        ;;
    -use_prevtree)
        USE_PREVTREE="yes"
        ;;
    -use_tree)
        if [ "$#" -gt 1 ]; then
            shift
            USE_TREE="$1"
        fi
        ;;
    -build_dir)
        if [ "$#" -gt 1 ]; then
            shift
            BUILD_DIR="$1"
        fi
        ;;
    -test_data)
        if [ "$#" -gt 1 ]; then
            shift
            TEST_DATA_DIR="$1"
        fi
        ;;
    -j)
        if [ "$#" -gt 1 ]; then
            shift
            PARALLELISM="$1"
        fi
        ;;
    -build_only)
        BUILDONLY="1"
        ;;
    -dbg_only)
        DO_DBG="1"
        DO_OPT="0"
        ;;
    -opt_only)
        DO_DBG="0"
        DO_OPT="1"
        ;;
    -no_compile)
        COMPILE="no"
        ;;
    -help)
        show_help=1
        ;;
     *)
        echo "$1: Unknown option, -help for help"
        exit 1
        ;;
     esac
     shift
done

#______________________________________________________________________
# usage string - exit
if [ $show_help != "0" ]; then
    cat <<EOF
    Usage: startTester should only be run by at(1) or cron(1)

        Options:
            -sendmail:              Send error messages to the default people
            -sendmailto "emails":   Send error messages to these people
            -j #:                   Use # number of processors maximum
            -use_tree "tree":       Use the given tree instead of checking one out
            -use_prevtree:          Use the previous (last_ran.lock) checkout and/or build
            -build_only:            Test the compilation only.  Do not run the regression tests.
            -dbg_only:              Only run debug tests.
            -opt_only:              Only run optimized tests.
            -no_compile:            Run the tests only; assume the build is already done.
            -verbose:               Display verbose output
            -build_dir:             Change the directory where Uintah is downloaded to.
            -test_data:             Change the GoldStandard directory.
            -help:                  Display this option summary
EOF
    exit 0
fi
#______________________________________________________________________


PATH=:"$MPIRUN_PATH":"$PATH":"$SCRIPT_DIR":.
export PATH BUILDONLY COMPILE LOCAL_OR_NIGHTLY_TEST WHICH_TESTS COMMON_GROUP CHECKPOINTS AUTO_UPDATE_PERF_GS AUTO_UPDATE_GIT_STAMP

# set number of processors to use when building
if [ $PARALLELISM -eq 0 ]; then
  MAKE_PARALLELISM=1
else
  MAKE_PARALLELISM="$PARALLELISM"
fi

# use /usr/var/tmp on machines that have it, with the assumption that it will
# have more space than /tmp
if [ -d /usr/var/tmp ]; then
  TMPDIR=/usr/var/tmp
  export TMPDIR
fi

export BUILD_DIR BUILDROOT TEST_DATA_DIR PARALLELISM MAKE_PARALLELISM SEND_MAIL_TO  REPLY_TO

date

if [ "${USE_TREE}" != "new" ]; then
  # use the Uintah specified on the command line
  cd "$USE_TREE" || exit
  BUILDROOT=$(pwd)
  cd ..
  echo "Using tree at $BUILDROOT" > "${BUILDROOT}"/log

  ID="$ID"-old

elif [ $USE_PREVTREE = "yes" ]; then
  # use the previous build of Uintah
  if [ ! -d "${BUILD_DIR}/last_ran.lock" ]; then
      echo "No previous build found"
      echo "${BUILD_DIR}/last_ran.lock does not exist"
      exit -1
  fi
  
  cd "${BUILD_DIR}/last_ran.lock" || exit
  BUILDROOT=$(pwd)
  cd ..
  echo "Using previous tree at $BUILDROOT" > "${BUILDROOT}"/log

  ID="$ID"-old
  
else
  #check out the current version
  cd "$BUILD_DIR" || exit

  BUILDROOT="${BUILD_DIR}/Uintah.${ID}"
  if [ -d "${BUILDROOT}" ]; then

    # don\t just set the ID directly, we have two different possibilities for ID
    NID=$(date +_%H)
    ID="${ID}${NID}"
    BUILDROOT="${BUILDROOT}${NID}"
    
    if [ -d "${BUILDROOT}" ]; then
      NID=$(date +%M)
      ID="${ID}${NID}"
      BUILDROOT="${BUILDROOT}${NID}"
      
      if [ -d "${BUILDROOT}" ]; then
        echo "Uintah.${ID} dir already exists"
        exit -1
      fi
    fi
  fi

  umask 002

  mkdir "${BUILDROOT}"
  
  unlink "${BUILD_DIR}/last_ran.lock"
  ln -s "${BUILDROOT}" "${BUILD_DIR}/last_ran.lock"



  #__________________________________
  # clone src tree
  
  cd "${BUILDROOT}" || exit
  gitLog="git_clone_${LOGNAME}.log"

  git clone  --verbose --progress --depth 100 --branch $GIT_branch $GIT_url .  > /tmp/"${gitLog}" 2>&1
  rc=$?
  
  # Set th URL so a user can checkin code using ssh keys
  git remote set-url origin git@github.com:Uintah/Uintah
 
  mv /tmp/"${gitLog}" "${BUILDROOT}"/"${gitLog}"
  
  echo "Cloning the latest version of Uintah at $(date) to $BUILDROOT" |tee "${BUILDROOT}"/log
  git log -1 --pretty=format:'%H' | tee --append "${BUILDROOT}"/log
  
  echo -e "\n git clone  --verbose --progress --depth 100 --branch $GIT_branch $GIT_url .\n">> "${BUILDROOT}"/"${gitLog}" 2>&1
 
  if [ $rc -ne 0 ]; then
    echo -e "ERROR: There was a problem with git clone.\n  See ${BUILDROOT}/${gitLog}.   Now exiting...." |tee --append "${BUILDROOT}"/log
    exit -1
  fi

  cd "$BUILD_DIR" || exit
  date
fi

#__________________________________
# create html web page
rm -f "${HTMLLOG}"

TITLE=$(date)

echo "<HTML><HEAD><TITLE> $OS tests on $TITLE</TITLE></HEAD><BODY><pre>" >> "${HTMLLOG}"
date +'%r %D' >> "${HTMLLOG}"
echo "Regression Tester results from $(hostname)" >> "${HTMLLOG}"
echo "Architecture: ${OS}" >> "${HTMLLOG}"
echo "" >> "${HTMLLOG}"
echo "Using build: ${BUILDROOT}" >> "${HTMLLOG}"
echo "LOG: ${HTMLLOG}" >> "${HTMLLOG}"


PATH="${BUILDROOT}"/src/R_Tester/helpers:"$PATH"
echo "${PATH}"
export PATH DO_DBG DO_OPT HTMLLOG PUBLIC_HTML RT_URL OUTPUT_HTML VERBOSE

if [ $VERBOSE = "yes" ]; then
   echo "Running Tests"
fi

runTests
retval=$?

chgrp -R $COMMON_GROUP "${BUILDROOT}" > /dev/null 2>&1
chmod -R g+w "${BUILDROOT}" > /dev/null 2>&1


if [ $VERBOSE = "yes" ]; then
  echo "TIME STAMP: REGRESSION TESTER DONE AT:"
  date
fi

exit $retval
