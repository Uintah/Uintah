#!/bin/bash

#______________________________________________________________________
#  startLocalTest:
#     This script executes the local regression tests for a single component

#__________________________________
# define environmental variables and export them
HTMLLOG=""
LOCAL_OR_NIGHTLY_TEST="local"
WHICH_TESTS=${WHICH_TESTS:="LOCALTESTS"}  # default value is local tests, it can be set by the buildbot
OS=`uname -s`
PARALLELISM=8
WEBLOG=""
BUILD_DIR=/dev/null
AUTO_UPDATE_PERF_GS="no"                  # Variable for automatically update performance GS if they improve

export BUILD_DIR  HTMLLOG WEBLOG LOCAL_OR_NIGHTLY_TEST WHICH_TESTS OS AUTO_UPDATE_PERF_GS

#__________________________________
unset SHELL
umask 002

if [ "$#" != 4 ]; then
  echo ""
  echo "Usage: startLocalTest <Path to Build Directory> <path to src directory> <is_debug_build> <sci_malloc_enabled>"
  echo "           <is_debug_build>     : 'yes' or 'no'"
  echo "           <sci_malloc_enabled> : 'yes' or 'no'"
  echo ""
  exit
fi

BUILD_DIR="$1"
SRCTOP="$2"
IS_DEBUG_BUILD="$3"     # Will be 'yes', or 'no'
SCI_MALLOC_ENABLED="$4" # Will be 'yes', or 'no'

if [ ! -d "${BUILD_DIR}" ]; then
  echo "ERROR: The build directory $BUILD_DIR does not exist.  Now exiting"
  exit -1
fi

cd "${BUILD_DIR}"

TEST_DATA_DIR="${BUILD_DIR}/TestData"

#  If the user has set the GOLD_STANDARDS environmental variable
#  then override
if [ "$GOLD_STANDARDS" != "" ]; then
  TEST_DATA_DIR="$GOLD_STANDARDS"
fi 

#__________________________________
#    - generate the symbolic links
#    - check for the goldStandards
mkdir local_RT > /dev/null 2>&1
cd    local_RT

if [ ! -d TestScripts ]; then
  ln -sf ${SRCTOP}/R_Tester TestScripts
fi

if [ ! -f replace_all_GS ]; then
  ln -sf ${SRCTOP}/R_Tester/helpers/replace_all_GS replace_all_GS
fi

if [ ! -d susdir ]; then
  ln -sf ../StandAlone susdir
fi

if [ ! -d tools ]; then
  ln -sf ${SRCTOP}/tools tools
fi

if [ ! -d inputs ]; then
  ln -sf ${SRCTOP}/StandAlone/inputs inputs
fi

# The gold standard path must be updated every time local_rt is run
# The user can set the environmenal variable and over ride the default path.
/bin/rm -f goldStandard
ln -sf "${TEST_DATA_DIR}" goldStandard


# if the user has set the path to the checkpoints directory create a symbolic link
# The checkpoints dir is needed for some restart tests
if [ "$RT_CHECKPOINTS" != "" ]; then
  echo " Creating symbolic link: ln -sf ${RT_CHECKPOINTS} CheckPoints"
  ln -sf "${RT_CHECKPOINTS}" CheckPoints
fi


#__________________________________
# bulletproofing
if [ ! -d "$TEST_DATA_DIR" ]; then
  echo "__________________________________"
  echo "ERROR: gold standards directory doesn't exist: $TEST_DATA_DIR."
  echo "Run the command:"
  echo "    make gold_standards"
  echo " to generate them.  Now exiting"
  echo "__________________________________"
  exit -1;
fi

if [ ! -f susdir/sus ]; then
  echo "ERROR: The executable sus was not found.  Please compile it by running make uintah.  Now exiting"
  exit -1;
fi
if [ ! -f susdir/compare_uda ]; then
  echo "ERROR: The comparison utility compare_uda was not found.  Please compile it by running make uintah.  Now exiting"
  exit -1;
fi

# If the env var TEST_COMPONENTS is set, use it instead of asking user for component list...
if test ${TEST_COMPONENTS:+1}; then
    echo ""
    echo "Using TEST_COMPONENTS env var for list of components to test: ($TEST_COMPONENTS)"
    selectedCompTests=$TEST_COMPONENTS
    
    let n=0                                          # use the environment variable
    for componentTest in $selectedCompTests; do
      WHICH_TESTS[$n]=$WHICH_TESTS
      let n=n+1
    done
  
else
  if test "$TERM" == "dumb" -o "$TERM" == "emacs"; then
    echo
    echo "ERROR: startLocalTest requires a fully functional terminal... you have '$TERM'."
    echo "       (Consider setting environment variable TEST_COMPONENTS.)  Goodbye."
    echo
    exit                                                                                    
  fi  
  if test "$EMACS" == "t"; then
    echo
    echo "ERROR: startLocalTest cannot be run from within emacs..."
    echo "       (Consider setting environment variable TEST_COMPONENTS.)  Goodbye."
    echo
    exit                                                                                    
  fi
  #__________________________________
  # Have the user pick a component
  # find all the component tests which are python scripts

  allComponentTests=`ls TestScripts/*.py | grep -v __init__ | sed "s/.py//g" | sed "s,TestScripts/,,g"`

  list=""
  for comp in $allComponentTests; do
    list="$list $comp - off,"
  done

  selectedCompTests=`dialog --stdout --separate-output --checklist "Select the component for local regression testing" 20 61 15 $list`

  #remove quotations from options variable
  selectedCompTests=`echo $selectedCompTests | tr -d '"'`

  if [ $? != 0 ] ; then                                                                
    echo ""
    echo "Cancel selected... Goodbye."                                                                  
    echo ""
    exit                                                                                    
  fi
  
  #__________________________________
  # find what subset of the tests the user wants to run
  let n=0
  for componentTest in $selectedCompTests; do
    
    let t=`grep -c LIST TestScripts/$componentTest.py`
    testSubsets=`grep LIST TestScripts/$componentTest.py | cut -d: -f2-10`
    
    #__________________________________
    # open dialog box if the component has the line
    #  "#LIST: LOCALTESTS NIGHTLYTESTS ......"
    
    if [ $t != 0 ]; then
      list=""
      for tests in $testSubsets; do
        if [ $tests == "LOCALTESTS" ]; then
          list="$list $tests - on"
        else
          list="$list $tests - off  "
        fi
      done

      declare -a selectedSubset=(`dialog --stdout --separate-output --checklist " [$componentTest] Select ONE set of tests to run" 20 61 15 $list`)

      #remove quotations from options variable
      selectedSubset=`echo $selectedSubset | tr -d '"'`
  
      if [ ${#selectedSubset[@]} == 0 ] ; then                                                                
        echo ""
        echo "Cancel selected... Goodbye."                                                                  
        echo ""
        exit                                                                                    
      fi
      if [ ${#selectedSubset[@]} != 1 ] ; then
        echo ""
        echo "ERROR: You selected more than one set of tests to run."
        echo "...now exiting"
        exit  
      fi
      
      WHICH_TESTS[$n]=$selectedSubset

    fi
    let n=n+1
  done
fi

#__________________________________
# Now run the tests
/bin/rm -rf log >/dev/null 2>&1

echo ""
echo ""
date
echo "Gold Standards: $TEST_DATA_DIR"

let retval=0;
let c=0;
for componentTest in $selectedCompTests; do
  echo "Running $componentTest:${WHICH_TESTS[c]} Tests"

  # clean up old test results
  /bin/rm -f $componentTest.log >/dev/null 2>&1
  /bin/rm -rf $componentTest-results >/dev/null 2>&1
  /bin/rm -rf $componentTest-short.log >/dev/null 2>&1

  # create the do<component>tests  python script
  doTestScript="do${componentTest}tests"
  echo "#!/bin/tcsh"                                         >  "$doTestScript"
  echo "setenv PATH $PATH"                                   >> "$doTestScript"
  echo "setenv OS $OS"                                       >> "$doTestScript"
  echo "setenv SCI_DEBUG \"\""                               >> "$doTestScript"
  echo "setenv LOCAL_OR_NIGHTLY_TEST $LOCAL_OR_NIGHTLY_TEST" >> "$doTestScript"
  echo "setenv WHICH_TESTS ${WHICH_TESTS[c]}"                >> "$doTestScript"
  echo "setenv SCI_MALLOC_ENABLED $SCI_MALLOC_ENABLED"       >> "$doTestScript"
  
  BUILD_TYPE="opt"
  if [ "$IS_DEBUG_BUILD" = 'yes' ]; then
      BUILD_TYPE="dbg"
  fi

  echo "python -u TestScripts/$componentTest.py susdir inputs goldStandard $BUILD_TYPE $PARALLELISM "'$1' >> "$doTestScript"

  /bin/chmod a+x "$doTestScript"

  #__________________________________
  # run the python script that contains all the
  # tests for that component. If the return code != 0 capture it
  
  "./$doTestScript" | tee comp.log 2>&1
  
  exitCode=${PIPESTATUS[0]}
  
  mv comp.log "${componentTest}.log"
  
  echo "$componentTest exit Code: $exitCode"
  
  if test $exitCode = "0"; then
    echo "Passed: ${componentTest}-${BUILD_TYPE} tests! " >> log
  else
    echo "Failed: ${componentTest}-${BUILD_TYPE} tests " >> log
  fi
  
  if [ -f "${componentTest}-short.log" ]; then
    cat "${componentTest}-short.log" >> log
  fi
  
  
  if test $exitCode != "0"; then
    retval=$exitCode
  fi
  
  echo ""
  echo ""
  let c=c+1;
done
echo "__________________________________"
echo "  S U M M A R Y "
cat log
echo ""
echo ""
echo "return code: $retval"
exit $retval

