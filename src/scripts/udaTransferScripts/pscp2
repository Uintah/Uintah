#! /bin/bash
#
#______________________________________________________________________
# pscp2 <num Processors> <transfer entire uda (y/n)> < remove remote directory> < localDirectory> <login@Machine>:<remote dir>
# You must be able to ssh onto the remote machine without a password
# or it won't work.
#______________________________________________________________________
#echo $argv
#
#______________________________________________________________________
# function that removes any unwanted chatter from the ssh command
function silent_ssh {
  local tmpFile="/tmp/.psp2SSH"
  local connectionString="$1"
  local commands="$2"

  /bin/rm $tmpFile &>/dev/null
  echo "BEGIN" > $tmpFile
  
  echo " commands" >> $tmpFile
  # ececute command
  $SSH -x $connectionString   \
      "echo 'END';            \
      $commands;              \
      echo 'BEGIN'" &>/dev/null >> $tmpFile 
  
  echo "END" >> $tmpFile
  
  # remove chatter
  sed -i /BEGIN/,/END/d  $tmpFile
  
  cat $tmpFile
  /bin/rm $tmpFile 2>&1 2>/dev/null
}


#------------------
# unalias commands
unalias -a ssh
unalias -a rm
unalias -a cd

#------------------
# error checking
if test "$#" -ne 5; then
  echo ""
  echo "Usage: pscp2 < number of Processors> <transfer entire uda (y/n) > < remove remote directory (y/n) > < local dir to be copied> <login@Remote Machine>:<remote dir>"
  echo ""
  exit 1
fi

if test ${SSH+set}; then
   echo ""
   echo "Note: Using this ssh from environment var SSH: $SSH"
   echo ""
else
   SSH=ssh
fi

pscp2fulldir=`readlink -f $0`
pscp2dir=`dirname $pscp2fulldir`

nproc=$1
transferWholeUda=$2
rmDir=$3
localDir=$4

if test `echo $localDir | cut -c1` != "/"; then
  # Not absolute path... fix it.
  localDir=`pwd`/$4
fi

string=$5
remote_machine=`echo $string |cut -d\@ -f2 | cut -d\: -f1`
user_test=`echo $string |cut  -s -d\@ -f1`

if test "$user_test" == ""; then
  user_test=$USER
fi

export LOGIN=$user_test@$remote_machine
export REMOTEDIR_PARENT=`echo $string |cut -d\: -f2`
export REMOTEDIR=$REMOTEDIR_PARENT/`basename $localDir`
export PSCP_FILES=/tmp/pscp_files_`basename $localDir`_`whoami`

#determing the remote parent group
export GROUP=$(silent_ssh $LOGIN "cd $REMOTEDIR_PARENT && stat . --format %G")

echo "_____________________________________"
echo "Inputs:"
echo "	login:                 $LOGIN"
echo "        remote group:          $GROUP"            # I have no idea why I have to indent this?
echo "	# processors:          $nproc"
echo "	transfer whole uda:    $transferWholeUda"
echo "	localDir:              $localDir"
echo "	remoteDir:             $REMOTEDIR"
echo "	remove the remote directory?: " $rmDir
echo "	PSCP_FILES:            $PSCP_FILES"
echo "	pscp2dir:              $pscp2dir"
echo "_____________________________________"
echo ""
#______________________________________________________________________
# Bulletproofing
echo "Bullet proof tests:"

validateTransferredFilesDir()
{
  if test -d "$STAMP_DIR"; then
    echo ""
    echo "  WARNING: It appears that these files were in the process of being transferred"
    echo "           but were interrupted.  The list of files that were already transferred can"
    echo "           be found in the $STAMP_DIR/stamp directory."
    echo ""
    echo "  MORE WARNING: It is possible, though unlikely, that some of the files listed"
    echo "                as transferred were not successfully sent.  Please validate your"
    echo "                UDA once all files have been transferred."
    echo ""
    echo "  Do you wish to continue (with the transfer of the remaining files)? (y/n)"
    echo "     (If not, manually remove the following directory and run this script again:"
    echo "           $STAMP_DIR)"
    echo ""
    echo -n " Please answer y/n: "
    read answer
    echo ""
    if test "$answer" != "y"; then
      echo "Goodbye."
      echo ""
      exit 1
    fi
    if test "$rmDir" == "y" -o "$rmDir" == "Y"; then
      echo ""
      echo "ERROR: You just said that you wanted to continue the transfer, but you've also"
      echo "       requested that I delete the already existing remote directory.  I don't"
      echo "       think this is what you really want, so I'm exiting now... Goodbye."
      echo ""
      exit
    fi
  else
    mkdir $STAMP_DIR
  fi
}

export STAMP_DIR=$localDir/.transferred_files
validateTransferredFilesDir
#__________________________________
if test ! -d "$STAMP_DIR"; then
  # Didn't have permissions to make the directory... so place it in tmp
  echo ""
  echo "  WARNING: Was not able to create $STAMP_DIR directory (bad permissions?)."
  export STAMP_DIR=/tmp/.transferred_files_`basename $localDir`_`whoami`
  echo "           Placing it in $STAMP_DIR instead."
  echo ""
  validateTransferredFilesDir
fi

#__________________________________
if test ! -d "$STAMP_DIR"; then
  echo ""
  echo "  ERROR: Did not have permissions to create $STAMP_DIR directory.  Goodbye."
  echo ""
fi

#__________________________________
if test "$localDir" == "."; then
  echo ""
  echo "  ERROR: You can't set the local dir to '.'"
  echo ""
  exit 1
fi

#__________________________________
echo -n "  Testing: does the local folder ($localDir) exist... "
if test ! -e $localDir; then
  echo ""
  echo ""
  echo "  ERROR: Local directory '$localDir' does not exist"
  echo ""
  exit 1
fi
echo "yes."

#__________________________________
echo -n "  Testing: does $REMOTEDIR_PARENT exist on the remote machine and is there write permission... "

ans=$(silent_ssh $LOGIN "test -d  $REMOTEDIR_PARENT && \
                         test -w  $REMOTEDIR_PARENT && \
                         echo $?")

if test "$ans" != "0"; then
  echo ""
  echo ""
  echo "  ERROR:  The destination remote directory '$REMOTEDIR_PARENT' does not exist or you don't have write permission..."
  echo "          Are you sure you typed it in correctly?"
  echo ""
  echo ""
  exit
fi
echo "yes."

#__________________________________
echo -n "  Testing: does passwordless access work... "
test=$(silent_ssh $LOGIN "echo 'password_access_works'")
if test "$test" != "password_access_works"; then
  echo ""
  echo ""
  echo "  ERROR: Passwordless access is not working."
  echo "         You must be able to login into the $remote_machine without a password for this script to work"
  echo ""
  exit
fi
echo "yes."

MAKE=make

if test `uname` == "Darwin"; then
  HOSTNANE=`hostname`
else
  HOSTNANE=`hostname`.`hostname -d`
fi

#__________________________________
echo -n "  Testing: Do we know about the remote operating system?... "
OS=$(silent_ssh $LOGIN uname)

if test "$OS" == "Darwin"; then
  # Darwin and Linux are similar enought that this works...
  OS="Linux"
fi

if test "$OS" != "Linux" -a "$OS" != "IRIX64"; then
  echo ""
  echo "  ERROR: There is no pscp2_driver for this operating system: '$OS'"
  echo ""
  exit
fi
echo "yes."

echo "_____________________________________"

#--------------------------------------------------------------------------
# Now do the work
#--------------------------------------------------------------------------
# record some info for posterity

DATA_TRANSFER_RECORD=$localDir/data_transfer_record

touch $DATA_TRANSFER_RECORD

if test ! -f $DATA_TRANSFER_RECORD; then
  echo  "  Can't write to that directory... just place it in tmp for now."
  DATA_TRANSFER_RECORD=/tmp/data_transfer_record_`whoami`
fi

echo "--------------------------------" >> $DATA_TRANSFER_RECORD
echo "Data transferred from: $HOSTNAME" >> $DATA_TRANSFER_RECORD
echo "on `date`."                       >> $DATA_TRANSFER_RECORD
echo "Data originally in $localDir"     >> $DATA_TRANSFER_RECORD
echo "Copied by/to $LOGIN:$REMOTEDIR"   >> $DATA_TRANSFER_RECORD
echo ""                                 >> $DATA_TRANSFER_RECORD

# remove the remote directory
if test "$rmDir" == "y" -o "$rmDir" == "Y"; then
  echo "Now removing $REMOTEDIR from $remote_machine if it exists..."
  silent_ssh $LOGIN "/bin/rm -rf $REMOTEDIR; mkdir $REMOTEDIR; chgrp $GROUP $REMOTEDIR"
else
  echo $SSH -x $LOGIN \"mkdir -p $REMOTEDIR\"
  silent_ssh $LOGIN "mkdir -p $REMOTEDIR; chgrp $GROUP $REMOTEDIR"
  scp $DATA_TRANSFER_RECORD $LOGIN\:$REMOTEDIR >& /dev/null
fi

cd $localDir

#-------------------------------
# make a sorted list of potential files to copy
# let the user edit that file with vi
/bin/rm -f $PSCP_FILES

FIND=find
if test `uname` == "AIX"; then
   FIND=/usr/local/gnu/bin/find
fi

$FIND .             -maxdepth 1 -type f -exec basename {} \; | grep -v .transferred_files > $PSCP_FILES
$FIND .             -maxdepth 1 -type d -exec basename {} \; | grep -v "t[0-9]\|checkpoints\|.transferred_files" >> $PSCP_FILES
$FIND ./t*          -maxdepth 0 -type d -exec basename {} \; | sort -r                    >>$PSCP_FILES
$FIND ./checkpoints -maxdepth 1                                                           >>$PSCP_FILES

sed -i /".\/checkpoints$"/d $PSCP_FILES

if test "$transferWholeUda" == "n" -o "$transferWholeUda" == "N"; then
  echo "Now starting an editor:  Remove the files you don't want transferred"

  if test ! $?EDITOR || test "$EDITOR" == ""; then
    echo
    echo WARNING: \$EDITOR is not defined... defaulting to 'vi'
    echo "And 'vi' sometimes doesn't work well..."
    export EDITOR=vi
  fi
fi

chmod ug+rw $PSCP_FILES
$EDITOR $PSCP_FILES

echo
echo -n "Starting at: " | tee -a $DATA_TRANSFER_RECORD
date | tee -a $DATA_TRANSFER_RECORD
echo | tee -a $DATA_TRANSFER_RECORD
echo "Group permission on remote directory will be changed to $GROUP"

/usr/bin/time -p $MAKE TAR=tar -f $pscp2dir/pscp2_driver_$OS -j $nproc | tee -a $DATA_TRANSFER_RECORD

echo | tee -a $DATA_TRANSFER_RECORD
echo -n "Ending at: " | tee -a $DATA_TRANSFER_RECORD
date |tee -a $DATA_TRANSFER_RECORD
echo

scp $DATA_TRANSFER_RECORD $LOGIN\:$REMOTEDIR &> /dev/null
