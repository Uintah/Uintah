# -*- python -*-
# ex: set syntax=python:

import numpy as np
import os
import shutil
import glob
import re                # regular expressions
import pprint

from commonBuildSteps               import *
from buildbot.plugins               import *
from buildbot.process               import results
from buildbot.process.results       import FAILURE
from buildbot.process.results       import SKIPPED
from buildbot.process.results       import statusToString
from datetime                       import timedelta
from buildbot.process.build import Build


#______________________________________________________________________
#
# buildbot checkconfig master.cfg
#
# cd /var/lib/buildbot/master
# buildbot restart
#
# cd /var/lib/buildbot/worker
# buildbot-worker restart
#
#  sudo systemctl stop buildbot-master ; sudo systemctl start buildbot-master ; sudo systemctl status buildbot-master
#  sudo systemctl stop buildbot-worker ; sudo systemctl start buildbot-worker ; sudo systemctl status buildbot-worker
#______________________________________________________________________


master = BuildmasterConfig = {}

#______________________________________________________________________
# DATA LIFETIME
# Delete all logs older than 1 month and run on Sundays at noon

cleanLogs = [ util.JanitorConfigurator(
                  logHorizon = timedelta(weeks=4),
                  hour       = 12,
                  dayOfWeek  = 6)
            ]
master['configurators'] = cleanLogs

#______________________________________________________________________
# Worker
#
# the 'worker' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

master['workers'] = [ worker.Worker("buster", "password",max_builds=6, notify_on_missing='t.harman@utah.edu') ]


# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
master['protocols'] = {'pb': {'port': 9989}}

#______________________________________________________________________
# CHANGESOURCES
#
# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.


m_git_url        ='https://github.com/Uintah/Uintah.git'
# m_git_url        ='https://github.com/Uintah/Uintah_update.git'

repo_git      = changes.GitPoller(
                  repourl      = m_git_url,
                  project      = "Uintah",
                  workdir      ='gitpoller-work',
                  branches     = ['master', 'kokkos_dev'],
                  pollinterval = 1*60 )              # seconds -- every 1 minute

master['change_source'] = [ repo_git ]




#______________________________________________________________________
# SCHEDULERS
#
# Configure the Schedulers, which decide how to react to incoming changes.
#
#  Nomenclature _<name>  = scheduler

#______________________________________________________________________
#    TRUNK SCHEDULERS
sched_trunk_compile_dbg       = schedulers.SingleBranchScheduler(
                                  name            = "compile-dbg",
                                  treeStableTimer = 1*60, # wait 1 minutes
                                  change_filter   = util.ChangeFilter(project = "Uintah",
                                                                      branch  =  'master'),
                                  fileIsImportant = runOrSkip_BuildBot,
                                  builderNames    = ["Trunk:dbg-compile"] )


sched_trunk_compile_dbg_static = schedulers.Dependent(
                                  name            = "compile-dbg-static",
                                  upstream        = sched_trunk_compile_dbg,
                                  builderNames    = ["Trunk:dbg-compile-static"] )

sched_trunk_full_opt_gpu       = schedulers.Dependent(
                                  name            = "full-opt-gpu",
                                  upstream        = sched_trunk_compile_dbg_static,
                                  builderNames    = ["Trunk:opt-full-gpu"] )


sched_trunk_full_opt_cpu       = schedulers.Dependent(
                                  name            = "full_opt_cpu",
                                  upstream        = sched_trunk_compile_dbg_static,
                                  builderNames    = ["Trunk:opt-full"] )

sched_nightly_compile          = schedulers.Nightly(
                                  name            = 'nightly-compile',
                                  branch          = 'master',
                                  builderNames    = ['Trunk:dbg-compile-clang'],
                                  hour=22, minute=1)


#______________________________________________________________________
#     KOKKOS SCHEDULERS

sched_kokkos_compile_omp       = schedulers.SingleBranchScheduler(
                                  name            = "kokkos-compile-omp",
                                  treeStableTimer = 1*60, # wait 1 minutes
                                  change_filter   =  util.ChangeFilter(project = "Uintah",
                                                                       branch  =  'kokkos_dev'),
                                  fileIsImportant = runOrSkip_BuildBot,
                                  builderNames    = ["Kokkos:opt-omp-compile"] )

sched_kokkos_compile_cuda       = schedulers.Dependent(
                                  name            = "kokkos-compile-cuda",
                                  upstream        = sched_kokkos_compile_omp,
                                  builderNames    = ["Kokkos:opt-cuda-compile"] )

sched_kokkos_compile_omp_cuda   = schedulers.Dependent(
                                  name            = "kokkos-compile-omp-cuda",
                                  upstream        = sched_kokkos_compile_cuda,
                                  builderNames    = ["Kokkos:opt-omp-cuda-compile"] )

sched_kokkos_full              = schedulers.Dependent(
                                  name            = "kokkos-full",
                                  upstream        = sched_kokkos_compile_omp_cuda,
                                  builderNames    = ["Kokkos:opt-full"] )

#______________________________________________________________________
#     DOCUMENTATION  SCHEDULER

sched_doc                = schedulers.SingleBranchScheduler(
                                  name            = "doc-build",
                                  change_filter   = util.ChangeFilter(project = "docChanges",
                                                                      branch  =  'master' ),
                                  treeStableTimer = 1*60,
                                  builderNames    = ["Documentation-Builder"] )

#______________________________________________________________________
#     WEB PAGE  FORCE SCHEDULER

sched_force   = schedulers.ForceScheduler(
                                  name       = "force",
                                  buttonName = "PushMe!",
                                  label      = "Uintah: Force a builder to execute",

                                  codebases=[
                                      util.CodebaseParameter(
                                          "",
                                          label     ="Main repository",
                                          branch    =util.FixedParameter( name="branch",     default="master"),
                                          revision  =util.FixedParameter( name="revision",   default=""),
                                          repository=util.FixedParameter( name="repository", default=""),
                                          project   =util.FixedParameter( name="project",    default="Uintah"),
                                      ),
                                  ],

                                  username = util.UserNameParameter(label="Email address:",
                                                                    default="email@email.com",
                                                                    size=80),


                                  builderNames=["Documentation-Builder",
                                                "Trunk:dbg-compile",
                                                "Trunk:dbg-compile-clang",
                                                "Trunk:dbg-full",
                                                "Trunk:dbg-compile-static",
                                                "Trunk:opt-full",
                                                "Trunk:opt-full-sanitize"
                                               ] )

#__________________________________
#  Disabled
#                                                "Trunk:opt-full-gpu",
#                                                "Kokkos:opt-full",
#                                                "Kokkos:opt-omp-compile",
#                                                "Kokkos:opt-cuda-compile",
#                                                "Kokkos:opt-omp-cuda-compile"
#______________________________________________________________________
#     TRY SERVER SCHEDULERS

sched_try     = schedulers.Try_Userpass(
                      name          ="try",
                      builderNames  =[
                                      "Trunk:dbg-full",
                                      "Trunk:opt-full",
                                      "Trunk:opt-full-sanitize"
                                    ],
                      port          = 8031,
                      userpass      = [("buildbot_try","try_buildbot"), ("bob", "pw2")] )

#__________________________________
#  Disabled
#                                      "Trunk:opt-full-gpu",
#                                      "Kokkos:opt-full"


#______________________________________________________________________
#     BUILDBOT TESTING  SCHEDULER

Todd_RT_tests     = ["ICE", "MPM"]
sched_testBuildBot       = schedulers.ForceScheduler(
                                  name         = "buildbot_testing",
                                  builderNames = ["buildbot_testing"],
                                  codebases    = [
                                      util.CodebaseParameter(
                                          "",
                                          label     ="Main repository",
                                          branch    =util.FixedParameter( name="branch",     default="master"),
                                          revision  =util.FixedParameter( name="revision",   default=""),
                                          repository=util.FixedParameter( name="repository", default=""),
                                          project   =util.FixedParameter( name="project",    default="Uintah"),
                                      ),
                                  ],

                                  username = util.UserNameParameter(label   = "Email address:",
                                                                    default = "email@email.com",
                                                                    size    = 80),


                                   properties   = [ util.ChoiceStringParameter(
                                                             name      = "CompTests",
                                                             label     = "Select Components to test",
                                                             default   = Todd_RT_tests,
                                                             multiple  = True,
                                                             strict    = True,
                                                             choices   = Todd_RT_tests) ]
                                  )

#______________________________________________________________________

master['schedulers'] = [ sched_trunk_compile_dbg,
                         sched_trunk_compile_dbg_static,
                         sched_trunk_full_opt_cpu,
                         sched_doc,
                         sched_force,
                         sched_try,
                         sched_nightly_compile,
                         sched_testBuildBot
                       ]
#__________________________________
# disabled.
#                         sched_trunk_full_opt_gpu,
#                         sched_kokkos_full,
#                         sched_kokkos_compile_omp,
#                         sched_kokkos_compile_cuda,
#                         sched_kokkos_compile_omp_cuda,

#______________________________________________________________________
#  Define the compilers, and configure lines for each
#  of the different builders
#__________________________________


compiler_env = {
                  'CC'  : 'mpicc',
                  'CXX' : 'mpic++',
                  'F77' : 'gfortran',
                  'SCI_MAKE_BE_QUIET' : 'true',
                  'LANG' : ''
                }

clang_compiler_env = {
                  'CC'  : "clang-10",
                  'CXX' : "clang++-10",
                  'F77' : 'gfortran',
                  'SCI_MAKE_BE_QUIET' : 'true',
                   'LANG' : ''
                }

gpu_compiler_env = {
                  'CC'  : 'mpicc',
                  'CXX' : 'mpic++',
                  'F77' : 'mpif77',
#                 'CXXFLAGS' : '-DFIXED_RANDOM_NUM -Wno-deprecated',
                  'SCI_MAKE_BE_QUIET' : 'true',
                  'LANG' : ''
               }

RT_webpage_env = {
                  'OUTPUT_HTML': 'yes',
                  'RT_URL'     :  'http://uintah-build.chpc.utah.edu/~buildbot'
                 }

notUsed = {}

mpi             = ["--with-mpi-include=/usr/include/x86_64-linux-gnu/mpich",
                   "--with-mpi-lib=/usr/lib/x86_64-linux-gnu"]
hypre           = ["--with-hypre=/usr/local/hypre-2.15.0/opt-base"]
hypre_static    = ["--with-hypre=/usr/local/hypre-2.15.0/opt-base-static"]
petsc           = ["--with-petsc=/usr/local/petsc-3.10.5/opt-shared"]
no_petsc        = ["--without-petsc"]
boost           = ["--with-boost=/usr/local/boost-1.65.1"]
cuda            = ["--with-cuda=/usr/",
                   "--enable-gencode=52" ]
sanitize        = ["CXXFLAGS=-fsanitize=address,undefined -fno-omit-frame-pointer -Wno-deprecated -Wno-unused-local-typedefs" ]


all_components     = ["--enable-arches",
                      "--enable-examples",
                      "--enable-ice",
                      "--enable-mpm",
                      "--enable-wasatch",
                      "--enable-wasatch_3p",
                      "--enable-ray-scatter",

                     ]

gpu_kokkos_components  = ["--enable-ray-scatter",
                         "--enable-arches" ,
                         "--enable-examples"
                        ]

dbg_base         = ["../src/configure",
                     "--enable-debug",
                     "--enable-sci-malloc"
                    ]

dbg_static_base  = ["../src/configure",
                     "--enable-debug",
                     "--enable-static",
                     "--enable-sci-malloc",
                     "CXXFLAGS=-pthread"
                     ]

opt_base          = ["../src/configure",
                      "--enable-optimize=-O3 -mfpmath=sse",
                      "--enable-64bit",
                      "--enable-assertion-level=0",
                      "--disable-sci-malloc"
                     ]

# configure commands for various setups

dbg_configCmd         = ( dbg_base
                      +   all_components
                      +   mpi
                      +   hypre
                      +   petsc
                      +   boost )

# petsc doesn't link with static builds
dbg_static_configCmd  = ( dbg_static_base
                      +   all_components
                      +   mpi
                      +   hypre_static
                      +   no_petsc
                      +   boost )

opt_gpu_configCmd     = ( opt_base
                      +   gpu_kokkos_components
                      +   mpi
                      +   cuda
                      +   hypre
                      +   petsc
                      +   boost )

opt_configCmd         = ( opt_base
                      +   all_components
                      +   mpi
                      +   hypre
                      +   petsc
                      +   boost )

opt_sanitize_configCmd  = ( opt_base
                      +   all_components
                      +   mpi
                      +   hypre
                      +   petsc
                      +   boost
                      +   sanitize )

# __________________________________
#   Kokkos related
kokkos_compiler_env = {
                'CC'      : '/usr/local/mpich/3.3.2-gcc-7.4.0/bin/mpicc',
                'CXX'     : '/usr/local/mpich/3.3.2-gcc-7.4.0/bin/mpicxx',
                'F77'     : '/usr/local/mpich/3.3.2-gcc-7.4.0/bin/mpif77',
                'CXXFLAGS': '-Wno-deprecated -Wno-unused-local-typedefs',
                'LDFLAGS' : '-ldl',
                'LANG'    : ''
                }


kokkos_cuda_compiler_env = {
               'CC'       : '/usr/local/mpich/3.3.2-gcc-7.4.0/bin/mpicc',
               'CXX'      : '/usr/local/kokkos-2.7.00-gcc-7.4.0/nvcc_wrapper',
               'F77'      : '/usr/local/mpich/3.3.2-gcc-7.4.0/bin/mpif77',
               'CXXFLAGS' : '-DKOKKOS_ENABLE_CUDA_LAMBDA --expt-extended-lambda -Wno-deprecated -Wno-unused-local-typedefs',
               'LDFLAGS'  :'-ldl -L/usr/lib/cuda/lib64 -lcusparse -lcudart -lcublas -lnvToolsExt',
               'LANG'     : ''
               }

kokkos_mpi         = ["--with-mpi=/usr/local/mpich/3.3.2-gcc-7.4.0"]
kokkos_hypre       = ["--with-hypre=/usr/local/hypre-2.15.0-gcc-7.4.0/opt-base"]
kokkos_hypre_omp   = ["--with-hypre=/usr/local/hypre-2.15.0-gcc-7.4.0/opt-openmp"]
kokkos_hypre_cuda  = ["--with-hypre=/usr/local/hypre-2.15.0-gcc-7.4.0/opt-cuda"]
kokkos_boost       = ["--with-boost=/usr/local/boost-1.65.1-gcc-7.4.0"]
kokkos_omp         = ["--with-kokkos=/usr/local/kokkos-2.7.00-gcc-7.4.0/opt-openmp"]
kokkos_cuda        = ["--with-kokkos=/usr/local/kokkos-2.7.00-gcc-7.4.0/opt-cuda/"]
kokkos_omp_cuda    = ["--with-kokkos=/usr/local/kokkos-2.7.00-gcc-7.4.0/opt-openmp-cuda/"]

kokkos_opt_configCmd = (
                            opt_base
                         +  kokkos_mpi
                         +  kokkos_hypre
                         +  kokkos_boost
                         +  no_petsc
                         +  gpu_kokkos_components )

kokkos_opt_omp_configCmd =(
                            opt_base
                         +  kokkos_mpi
                         +  kokkos_hypre_omp
                         +  kokkos_boost
                         +  kokkos_omp
                         +  no_petsc
                         +  gpu_kokkos_components )

kokkos_opt_cuda_configCmd =(
                            opt_base
                         +  cuda
                         +  kokkos_mpi
                         +  kokkos_hypre_cuda
                         +  kokkos_boost
                         +  kokkos_cuda
                         +  no_petsc
                         +  gpu_kokkos_components )


kokkos_opt_omp_cuda_configCmd = (
                            opt_base
                         +  cuda
                         +  kokkos_mpi
                         +  kokkos_hypre_cuda
                         +  kokkos_boost
                         +  kokkos_omp_cuda
                         +  no_petsc
                         +  gpu_kokkos_components )

#__________________________________
#  Components to tests

trunk_RT_components  = 'ARCHES Examples ICE IMPM Models MPMICE MPM UCF Wasatch'

kokkos_RT_components = 'ARCHES Examples'

GPU_RT_components    = 'ARCHES Examples'

#__________________________________
#  Gold Standards Locations

trunk_RT_goldStd    = '/home/rt/Linux/TestData/'

GPU_RT_goldStd      = '/home/gpu_rt/Linux/TestData/'

kokkos_RT_goldStd   = '/home/rt/Linux/TestData/'





#______________________________________________________________________
#
#   Uintah documentation factory
f_doc = util.BuildFactory()

gitPoller = steps.Git(
                repourl        = m_git_url,
                branch         = 'master',
                workdir        = 'build/',
                mode           = "incremental",
                shallow        = True,
                retry          = (10,2),
                warnOnFailure  = True,
                haltOnFailure  = True )

runLatex = steps.ShellCommand(
               description   = ["Building documentation"],
               command       = ["./runLatex"],
               workdir       = 'build/doc',
               warnOnWarnings= False,
               warnOnFailure = False,
               name          = "build documentation" )

rmSrcDir = steps.ShellCommand(
               description   = ["remove src directory"],
               name          = "rm -rf src",
               command       = ["/bin/sh", "-c", "/bin/rm -rf src/"],
               workdir       = 'build/',
               warnOnWarnings= True,
               warnOnFailure = True )

f_doc.addStep( gitPoller )
f_doc.addStep( runLatex )
f_doc.addStep( rmSrcDir )

#______________________________________________________________________
#
# Factory for testing compilations
f_compile = util.BuildFactory()

gitUpdate ( f_compile )

configure( f_compile )

compile( f_compile, 16 )

makeclean( f_compile )

copyBuildDir( f_compile )

#______________________________________________________________________
#
#   Compile and run regression test factory
f_compile_runTests = util.BuildFactory()

gitUpdate ( f_compile_runTests )

configure( f_compile_runTests )

compile( f_compile_runTests, 16 )

runComponentTests( f_compile_runTests )

makeclean( f_compile_runTests )

copyBuildDir( f_compile_runTests )

#______________________________________________________________________
#
#   Run regression test factory

f_runTests = util.BuildFactory()

rm_localRT_dir ( f_runTests )

runComponentTests( f_runTests )


#______________________________________________________________________
#
#   GPU Compile and run regression test factory
f_compile_runTests_gpu = util.BuildFactory()

gitUpdate( f_compile_runTests_gpu )

modifySrc = steps.ShellCommand(
                       description    = ["Modifying Source"],
                       command        = ["./R_Tester/modifySrc"],
                       workdir        = 'build/src',
                       name           ="modify source",
                       warnOnWarnings = True,
                       warnOnFailure  = True,
                       haltOnFailure  = True )

f_compile_runTests_gpu.addStep( modifySrc )

configure( f_compile_runTests_gpu )

compile( f_compile_runTests_gpu, 16 )

runComponentTests( f_compile_runTests_gpu )

makeclean( f_compile_runTests_gpu )

copyBuildDir( f_compile_runTests_gpu )


#______________________________________________________________________
#
#   buildbot_testing  factory
f_bb_test = util.BuildFactory()

recompile = False

if(recompile):

  gitUpdate( f_bb_test )

  configCmd = opt_base + mpi +  ["--enable-examples", "--enable-ice", "--enable-mpm"] +  hypre

  configure( f_bb_test, 'build/dbg', configCmd, )

  compile( f_bb_test, 16, 'build/dbg' )


runComponentTests( f_bb_test )

#makeclean( f_bb_test, 'build/dbg' )

#copyBuildDir( f_bb_test )


#______________________________________________________________________
####### BUILDERS
# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.
#
# dictionary, using the following keys:
#  name (required):             the name used to describe this builder
#  workername (required):       which workder to use, must appear in c['bots']
#  builddir (required):         which subdirectory to run the builder in
#  factory (required):           a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

#
#  Nomenclature:  b_<trunk/Kokkos>_<compile/full>_<opt/dbg>_<var>   for a builder
#
# <trunk/kokkos>    trunk or kokkos_dev branch
# <compile/full>    compilation test or compile and runRT tests
# <opt/dbg>         optimized or debug configuration
#______________________________________________________________________


b_doc=  util.BuilderConfig(
       name         = "Documentation-Builder",
       workername   = "buster",
       builddir     = "uintah_doc",
       factory      = f_doc,
       )
#______________________________________________________________________
#     DEBUG
b_trunk_compile_dbg= util.BuilderConfig(
       name        = "Trunk:dbg-compile",
       workername  = "buster",
       builddir    = "trunk/dbg-compile",
       factory     = f_compile,

       properties  =  {'compiler_env': compiler_env,
                       'configCmd'   : dbg_configCmd,
                       'wrkDir'      : 'build/dbg',
                       'myBranch'    : 'master' }
      )

#__________________________________

b_trunk_compile_dbg_clang = util.BuilderConfig(
       name        = "Trunk:dbg-compile-clang",
       workername  = "buster",
       builddir    = "trunk/dbg-compile-clang",
       factory     = f_compile,

       properties  =  {'compiler_env': clang_compiler_env,
                       'configCmd'   : dbg_configCmd,
                       'wrkDir'      : 'build/dbg',
                       'myBranch'    : 'master' }
      )
#__________________________________

b_trunk_compile_dbg_static= util.BuilderConfig(
       name        = "Trunk:dbg-compile-static",
       workername  = "buster",
       builddir    = "trunk/dbg-compile-static",
       factory     = f_compile,

       properties  =  {'compiler_env': compiler_env,
                       'configCmd'   : dbg_static_configCmd,
                       'wrkDir'      : 'build/dbg_static',
                       'myBranch'    : 'master' }
      )
#__________________________________

b_trunk_full_dbg   = util.BuilderConfig(
       name        = "Trunk:dbg-full",
       workername  = "buster",
       builddir    = "trunk/dbg-full",
       factory     = f_compile_runTests,

       #  localRT environmental variables
       env        = {
                      'TEST_COMPONENTS': getTestComponents(),
                      'WHICH_TESTS'    : "BUILDBOTTESTS",
                      'GOLD_STANDARDS' :  trunk_RT_goldStd + 'dbg',
                      'RT_CHECKPOINTS' : '/home/rt/CheckPoints/'
                    },

       properties = {
                      'compiler_env'    : compiler_env,
                      'configCmd'       : dbg_configCmd,
                      'wrkDir'          : 'build/dbg',
                      'myBranch'        : 'master',
                      'defaultTestComps': trunk_RT_components
                    }
      )
#______________________________________________________________________
#       OPTIMIZED

b_trunk_full_opt= util.BuilderConfig(
       name        = "Trunk:opt-full",
       workername  = "buster",
       builddir    = "trunk/opt-full",
       factory     = f_compile_runTests,

       #  localRT environmental variables
       env        = {
                      'TEST_COMPONENTS' : getTestComponents(),
                      'WHICH_TESTS'    : "BUILDBOTTESTS",
                      'GOLD_STANDARDS' :  trunk_RT_goldStd + 'opt',
                      'RT_CHECKPOINTS' : '/home/rt/CheckPoints/'
                    },

       properties = {
                      'compiler_env'    : compiler_env,
                      'configCmd'       : opt_configCmd,
                      'wrkDir'          : 'build/opt',
                      'myBranch'        : 'master',
                      'defaultTestComps': trunk_RT_components
                    }
      )

#__________________________________

b_trunk_full_opt_sanitize= util.BuilderConfig(
       name        = "Trunk:opt-full-sanitize",
       workername  = "buster",
       builddir    = "trunk/opt-full-sanitize",
       factory     = f_compile_runTests,

       #  localRT environmental variables
       env        = {
                      'TEST_COMPONENTS': getTestComponents(),
                      'WHICH_TESTS'    : "BUILDBOTTESTS",
                      'GOLD_STANDARDS' :  trunk_RT_goldStd + 'opt',
                      'RT_CHECKPOINTS' : '/home/rt/CheckPoints/'
                    },

       properties = {
                      'compiler_env'    : compiler_env,
                      'configCmd'       : opt_sanitize_configCmd,
                      'wrkDir'          : 'build/opt',
                      'myBranch'        : 'master',
                      'defaultTestComps': trunk_RT_components
                    }
      )

#______________________________________________________________________
#     OPTIMIZED GPU
b_trunk_full_opt_gpu= util.BuilderConfig(
       name        = "Trunk:opt-full-gpu",
       workername  = "buster",
       builddir    = "trunk/opt-full-gpu",
       factory     = f_compile_runTests_gpu,

       #  localRT environmental variables
       env        = {
                      'TEST_COMPONENTS':  getTestComponents(),
                      'WHICH_TESTS'    : "BUILDBOTTESTS",
                      'GOLD_STANDARDS' :  GPU_RT_goldStd + 'opt',
                      'RT_CHECKPOINTS' : '/home/gpu_rt/CheckPoints/',
                      'CUDA_VISIBLE_DEVICES' : '0',
                      'SCI_DEBUG'      : 'SingleDevice:+'
                    },

       properties = {
                      'compiler_env'    : gpu_compiler_env,
                      'configCmd'       : opt_gpu_configCmd,
                      'wrkDir'          : 'build/opt',
                      'myBranch'        : 'master',
                      'defaultTestComps': GPU_RT_components
                    }
      )

#______________________________________________________________________
#   Kokkos builders

b_kokkos_full_opt= util.BuilderConfig(
       name        = "Kokkos:opt-full",
       workername  = "buster",
       builddir    = "kokkos/opt-full",
       factory     = f_compile_runTests,

       #  localRT environmental variables
       env        = {
                      'TEST_COMPONENTS':  getTestComponents(),
                      'WHICH_TESTS'    : "BUILDBOTTESTS",
                      'GOLD_STANDARDS' :  kokkos_RT_goldStd + 'opt',
                      'RT_CHECKPOINTS' : '/home/rt/CheckPoints/',
                      'CUDA_VISIBLE_DEVICES' : '0',
                      'SCI_DEBUG'      : 'SingleDevice:+'
                    },

       properties = {
                      'compiler_env'    : kokkos_compiler_env,
                      'configCmd'       : kokkos_opt_configCmd,
                      'wrkDir'          : 'build/opt',
                      'myBranch'        : 'kokkos_dev',
                      'defaultTestComps': kokkos_RT_components
                    }
      )

#__________________________________

b_kokkos_compile_opt_omp= util.BuilderConfig(
       name        = "Kokkos:opt-omp-compile",
       workername  = "buster",
       builddir    = "kokkos/opt-omp-compile",
       factory     = f_compile,

       properties = {
                      'compiler_env'  : kokkos_compiler_env,
                      'configCmd'     : kokkos_opt_configCmd,
                      'wrkDir'        : 'build/opt',
                      'myBranch'      : 'kokkos_dev'
                    }
      )
#__________________________________

b_kokkos_compile_opt_cuda= util.BuilderConfig(
       name        = "Kokkos:opt-cuda-compile",
       workername  = "buster",
       builddir    = "kokkos/opt-cuda-compile",
       factory     = f_compile,

       properties  = {
                        'compiler_env': kokkos_cuda_compiler_env,
                        'configCmd'   : kokkos_opt_cuda_configCmd,
                        'wrkDir'      : 'build/opt',
                        'myBranch'    : 'kokkos_dev'
                      }
      )
#__________________________________

b_kokkos_compile_opt_omp_cuda= util.BuilderConfig(
       name        = "Kokkos:opt-omp-cuda-compile",
       workername  = "buster",
       builddir    = "kokkos/opt-omp-cuda-compile",
       factory     = f_compile,

       properties  = {
                        'compiler_env': kokkos_cuda_compiler_env,
                        'configCmd'   : kokkos_opt_omp_cuda_configCmd,
                        'wrkDir'      : 'build/opt',
                        'myBranch'    : 'kokkos_dev'
                      }
      )

#__________________________________


b_buildbot_testing= util.BuilderConfig(
       name       = "buildbot_testing",
       workername = "buster",
       builddir   = "buildbot_testing",
       factory    = f_bb_test,

       #  localRT environmental variables
       env        = {
                      'TEST_COMPONENTS': util.Property( 'CompTests' ),
                      'WHICH_TESTS'    : "BUILDBOTTESTS",
                      'GOLD_STANDARDS' :  trunk_RT_goldStd + 'opt',
                      'RT_CHECKPOINTS' : '/home/rt/CheckPoints/'
                    },

       properties = {
                      'compiler_env'  : compiler_env,
                      'configCmd'     : dbg_configCmd,
                      'wrkDir'        : 'build/dbg',
                      'myBranch'      : 'master'
                    }
       )

#______________________________________________________________________


master['builders'] = [
                      b_doc,
                      b_trunk_compile_dbg,
                      b_trunk_compile_dbg_clang,
                      b_trunk_compile_dbg_static,
                      b_trunk_full_dbg,
                      b_trunk_full_opt,
                      b_trunk_full_opt_sanitize,
                      b_buildbot_testing
                    ]

#__________________________________
# disabled builders
#                      b_trunk_full_opt_gpu,
#                      b_kokkos_full_opt,
#                      b_kokkos_compile_opt_omp,
#                      b_kokkos_compile_opt_cuda,
#                      b_kokkos_compile_opt_omp_cuda,

#______________________________________________________________________
# STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

master['www'] = { 'port'    :  8010,
                  'plugins' :  { 'waterfall_view' : True,
                                 'console_view'   : True,
                                 'grid_view'      : True
                               }}



mailNotify_std = reporters.MailNotifier(
                              fromaddr        ="uintah-developers@lists.utah.edu",
                            # extraRecipients =["uintah-developers@lists.utah.edu"],
                              builders        =[#"Documentation-Builder",
                                                "Trunk:dbg-compile",
                                                "Trunk:dbg-compile-static",
                                                "Trunk:opt-full"],
                              sendToInterestedUsers = True,
                              lookup  = "sci.utah.edu",
                              mode    = "failing")

#__________________________________
#  Disabled
#                                                "Trunk:opt-full-gpu",


mailNotify_try = reporters.MailNotifier(
                              fromaddr = "uintah-developers@lists.utah.edu",
                              schedulers = [ "sched_try" ],
                              builders = [
                                            "Trunk:opt-full",
                                            "Trunk:dbg-full"
                                          ],
                              sendToInterestedUsers = True,

                              lookup = "sci.utah.edu",
                              mode   = "failing")

#__________________________________
#  Disabled
#                                                "Trunk:opt-full-gpu",
#                                                 "Kokkos:opt-full"

mailNotify_kokkos = reporters.MailNotifier(
                              fromaddr = "uintah-developers@lists.utah.edu",

                              extraRecipients =["jholmen@sci.utah.edu",
                                                "jeremy.thornock@utah.edu",
                                                "damodars@sci.utah.edu",
                                                "t.harman@utah.edu" ],

                              builders = ["Kokkos:opt-full",
                                          "Kokkos:opt-omp-compile",
                                          "Kokkos:opt-cuda-compile",
                                          "Kokkos:opt-omp-cuda-compile"],
                              sendToInterestedUsers=True,
                              lookup = "sci.utah.edu",
                              mode   = "failing")


master['services']=[ mailNotify_std, mailNotify_try ]

#__________________________________
# disabled
# mailNotify_kokkos


#______________________________________________________________________
####### DB URL

master['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

#______________________________________________________________________

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

master['projectName'] = "Uintah"
master['projectURL'] = "http://www.uintah.utah.edu/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

master['buildbotURL'] = "http://uintah-build.chpc.utah.edu:8010/"


#______________________________________________________________________
#  send the basic information to buildbot developers including:
#   versions of buildbot, python and twisted
#   platform information (CPU, OS, distribution, python flavor (i.e CPython vs PyPy))
#   mq and database type (mysql or sqlite?)
#   www plugins usage
#   Plugins usages: This counts the number of time each class of buildbot is used in your configuration.
#   This counts workers, builders, steps, schedulers, change sources. If the plugin is subclassed, then it will be prefixed with a >

master['buildbotNetUsageData'] = 'basic'
