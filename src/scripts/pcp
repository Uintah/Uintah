#! /bin/bash -norc
#
#______________________________________________________________________
# Parallel copy (cp)
# This script copies an uda between file system in parallel.  It requires
# that the user use interactive nodes or is using batch scheduling system.
#______________________________________________________________________
# unalias commands
unalias -a rm
unalias -a cd

#__________________________________
# error checking
if test "$#" -ne 6; then
  echo ""
  echo "Usage: pcp <number of nodes> <method (cp/rsync/tar)> <transfer entire uda (y/n) > < remove remote directory (y/n) > < local dir to be copied> <remote dir>"
  echo ""
  exit 1
fi

# is this node under PBS control?
printenv PBS_NUM_PPN > /dev/null 2>&1
if test $? != 0 ; then
  echo ""
  echo "ERROR: you must run this script on interactive nodes or through the batch scheduling system."
  echo ""
  exit 1  
fi


#__________________________________
# local variables are all lowercase
# upper case:  enviromental vars that are passed to the makefile
pcpfulldir=`readlink -f $0`     
PCPDIR=`dirname $pcpfulldir`    # path to driver script
pcpTmpDir="$HOME/.pcp"          # directory to keep temporary files


# parse the arguments
numNodes=$1                     # number of nodes
METHOD=$2                       # cp, tar or rsync
transferWholeUda=$3
rmDir=$4
LOCALDIR=$5                     # local directory path
uda=`basename $LOCALDIR`        # name of the uda
REMOTEDIR=$6                    # path to the remote directory
let numPPM=$PBS_NUM_PPN-1       # number of processors per node, keep one node free or you will lock up the machine 

OS=`uname`
if test "$OS" == "Darwin"; then
  OS="Linux"   # Darwin and Linux are similar
fi

if test $METHOD != "cp" -a $METHOD != "rsync" -a $METHOD != "tar"; then
  echo ""
  echo "ERROR:  the method option is not valid ($METHOD)"
  echo "        valid options are  (cp/rsync/tar)"
  echo ""
  exit 1
fi

if test `echo $LOCALDIR | cut -c1` != "/"; then
  # Not absolute path... fix it.
  LOCALDIR=`pwd`/$5
fi

/bin/rm -rf $pcpTmpDir
mkdir $pcpTmpDir     

export PCP_FILES=$pcpTmpDir/pcp_files_$uda

echo "_____________________________________"
echo "Inputs:"
echo "	# nodes:               $numNodes"
echo "	# procs per node:      $numPPM"
echo "	method:                $METHOD"
echo "	transfer whole uda:    $transferWholeUda"
echo "	LOCALDIR:              $LOCALDIR"
echo "	remoteDir:             $REMOTEDIR"
echo "	remove the remote directory?: " $rmDir
echo "_____________________________________"
echo ""
#__________________________________
# Bulletproofing
echo "Bullet proof tests:"

validateTransferredFilesDir()
{
  if test -d "$STAMP_DIR"; then
    echo ""
    echo "  WARNING: It appears that these files were in the process of being transferred"
    echo "           but were interrupted.  The list of files that were already transferred can"
    echo "           be found in the $STAMP_DIR/stamp directory."
    echo ""
    echo "  MORE WARNING: It is possible, though unlikely, that some of the files listed"
    echo "                as transferred were not successfully sent.  Please validate your"
    echo "                UDA once all files have been transferred."
    echo ""
    echo "  Do you wish to continue (with the transfer of the remaining files)? (y/n)"
    echo "     (If not, manually remove the following directory and run this script again:"
    echo "           $STAMP_DIR)"
    echo ""
    echo -n " Please answer y/n: "
    read answer
    echo ""
    if test "$answer" != "y"; then
      echo "Goodbye."
      echo ""
      exit 1
    fi
    if test "$rmDir" == "y" -o "$rmDir" == "Y"; then
      echo ""
      echo "ERROR: You just said that you wanted to continue the transfer, but you've also"
      echo "       requested that I delete the already existing remote directory.  I don't"
      echo "       think this is what you really want, so I'm exiting now... Goodbye."
      echo ""
      exit
    fi
  else
    mkdir $STAMP_DIR
  fi
}

#__________________________________

export STAMP_DIR=$LOCALDIR/.transferred_files
validateTransferredFilesDir

if test ! -d "$STAMP_DIR"; then
  # Didn't have permissions to make the directory... so place it in tmp
  echo ""
  echo "  WARNING: Was not able to create $STAMP_DIR directory (bad permissions?)."
  export STAMP_DIR=/tmp/.transferred_files_`basename $LOCALDIR`_`whoami`
  echo "           Placing it in $STAMP_DIR instead."
  echo ""
  validateTransferredFilesDir
fi

if test ! -d "$STAMP_DIR"; then
  echo ""
  echo "  ERROR: Did not have permissions to create $STAMP_DIR directory.  Goodbye."
  echo ""
fi

if test "$LOCALDIR" == "."; then
  echo ""
  echo "  ERROR: You can't set the local dir to '.'"
  echo ""
  exit 1
fi

echo -n "  Testing: does the local folder ($LOCALDIR) exist... "
if test ! -e $LOCALDIR; then
  echo ""
  echo ""
  echo "  ERROR: Local directory '$LOCALDIR' does not exist"
  echo ""
  exit 1
fi
echo "yes."

echo -n "  Testing: does the remote folder ($REMOTEDIR) exist..... "
if test ! -d "$REMOTEDIR"; then
  echo ""
  echo ""
  echo "  ERROR:  The destination remote directory '$REMOTEDIR' does not exist..."
  echo "          Are you sure you typed it in correctly?"
  echo ""
  echo ""
  exit
fi
echo "yes."

if test ! -e $PCPDIR/pcp_driver_$OS; then
  echo ""
  echo ""
  echo " ERROR: the driver file $PCPDIR/pcp_driver_$OS does not exist..."
  echo ""
  echo ""
fi

if test $numNodes -gt $PBS_NUM_NODES; then
  echo ""
  echo ""
  echo " ERROR:  The number of nodes you've requested to copy data exceeds what the batch scheduler system has allocated to you"
  echo ""
  exit 1 
fi

pbsdsh > /dev/null 2>&1
if test $? != 0 ; then
  echo ""
  echo "Error:  Can't find the pbs command pbsdsh.  Please correct your path"
  echo ""
  exit 1
fi

let numProcs=$numNodes*$numPPM
if test $numProcs -gt 50; then
  echo ""
  echo ""
  echo " ERROR:  You cannot use more than 50 procs to copy data"
  echo ""
  exit 1 
fi

echo "_____________________________________"

#______________________________________________________________________
# Now do the work
# record some info for posterity

data_transfer_record=$LOCALDIR/data_transfer_record

touch $data_transfer_record

if test ! -f $data_transfer_record; then
  # Can't write to that directory... just place it in tmp for now.
  data_transfer_record=/tmp/data_transfer_record_`whoami`
fi

echo "--------------------------------" >> $data_transfer_record
echo "Data transferred from: $HOSTNAME" >> $data_transfer_record
echo "on `date`."                       >> $data_transfer_record
echo "Data originally in $LOCALDIR"     >> $data_transfer_record
echo "Copied to $REMOTEDIR"             >> $data_transfer_record
echo "Number of nodes: $numNodes"       >> $data_transfer_record
echo "Method of copying data: $METHOD"  >> $data_transfer_record
echo ""                                 >> $data_transfer_record

# remove the remote directory
if test "$rmDir" == "y" -o "$rmDir" == "Y"; then
  echo "Now removing $REMOTEDIR/$uda if it exists..."
  /bin/rm -rf $REMOTEDIR/$uda
  mkdir $REMOTEDIR/$uda
else
  mkdir $REMOTEDIR/$uda
  cp $data_transfer_record $REMOTEDIR/$uda
fi

REMOTEDIR="$REMOTEDIR/$uda/"
cd $LOCALDIR

#______________________________________________________________________
# make a sorted list of potential files to copy
# let the user edit that file with vi
/bin/rm -f md5sum_org md5sum_copy md5sum_sorted /tmp/pcp.tmp > /dev/null 2>&1
/bin/rm -f $PCP_FILES

FIND=find
$FIND .             -maxdepth 1 -type f -exec basename {} \; | grep -v .transferred_files > $PCP_FILES
$FIND .             -maxdepth 1 -type d -exec basename {} \; | grep -v "t[0-9]\|checkpoints\|.transferred_files" >> $PCP_FILES
$FIND ./t*          -maxdepth 0 -type d -exec basename {} \; | sort -r                    >>$PCP_FILES
$FIND ./checkpoints -maxdepth 1                                                           >>$PCP_FILES

if test "$transferWholeUda" == "n" -o "$transferWholeUda" == "N"; then
  echo "Now starting an editor:  Remove the files you don't want transferred"
  vi $PCP_FILES
fi

chmod ug+rw $PCP_FILES
 
echo
echo -n "Starting at: "
date
echo

#__________________________________
# chop up the PCP_files into smaller chunks
# one chunk for each node
totalLines=`wc -l $PCP_FILES| cut -f1 -d" "`
let nLines=$totalLines/$numNodes 
node=0
startLine=1
while [  $node -lt $numNodes ]; do
  sed -n -e "$startLine,+$nLines p" $PCP_FILES > $PCP_FILES.$node
  let node=node+1 
  startLine=$((startLine+nLines))
done

# export all of the environmental variables.
# these are read  back in 
envVariables=$pcpTmpDir/envVars
echo "export REMOTEDIR=$REMOTEDIR" >$envVariables
echo "export PCP_FILES=$PCP_FILES" >>$envVariables
echo "export STAMP_DIR=$STAMP_DIR" >>$envVariables
echo "export LOCAL_DIR=$LOCALDIR"  >>$envVariables
echo "export numPPM=$numPPM"       >>$envVariables
echo "export OS=$OS"               >>$envVariables
echo "export PCPDIR=$PCPDIR"       >>$envVariables
echo "export METHOD=$METHOD"       >>$envVariables

#__________________________________
# distribute the work over the nodes, each node receives one copy of the command
# the exit code of the make command is stored
pbsdsh -u  bash -c 'source ~/.pcp/envVars; cd $LOCAL_DIR; make --file $PCPDIR/pcp_driver_$OS -j $numPPM ' 2> $pcpTmpDir/pcpRC.$uda



# Check the make command exit code.
grep -q 2 $pcpTmpDir/pcpRC.$uda

if test $? -eq 0  ; then
  echo ""
  echo "ERROR:  something went wrong with the copy."
  echo ""
else
  echo ""
  echo "$uda has be copied to $REMOTEDIR"
  echo "Blowing away the list of transferred files and the temporary directory"
  rm -rf $STAMP_DIR
  /bin/rm -rf $pcpTmpDir
fi

echo
echo -n "Ending at: "
date
echo

exit 0
#______________________________________________________________________
#  Generate a checksum of all the files in the original uda and verify that it is identical
#  to the copied uda
echo ""
echo "Now running checksum test."
echo -n "Starting at: "
date
pcp_tmp=/tmp/pcp.tmp
/bin/rm -f md5sum_org.* md5sum_copy.* $pcp_tmp > /dev/null 2>&1

# create files containing md5sums
find $LOCALDIR -type f |xargs md5sum > $pcp_tmp
sort -k 5 -t / $pcp_tmp > md5sum_org

/bin/rm $pcp_tmp
find $REMOTEDIR -type f|xargs md5sum > $pcp_tmp
sort -k 5 -t / $pcp_tmp > md5sum_copy

#cut out the file names since the paths will always be different
cut -f 1 -d" " md5sum_org  > md5sum_org.clean
cut -f 1 -d" " md5sum_copy > md5sum_copy.clean

# only compare the 1st column that contains the md5sum
diff -q  md5sum_org.clean md5sum_copy.clean

if test $? != 0 ; then
  echo ""
  echo " ERROR:  the checksum of the original direcory != the copied directory"
  echo " This indicates that the udas are are different!"
  echo " To see the differences run:"
  echo ""
  echo " diff md5sum_org md5sum_copy"
  echo " Now exiting"
  exit 1
fi
echo
echo -n "Ending at: "
date
echo
