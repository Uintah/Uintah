HOW TO CREATE A COMPLEX GEOMETRY AND INCORPORATE IT IN UINTAH
---------------------------------------------------------------------------------

There are 3 main steps to creating and incorporating a complex geometry piece into 
an MPMICE calculation.

1)  Generate the complex geometry.
 __________________________________
You can use any CAD package that will generate an output file that can be imported
into Fluent/Gambit.  A variety of file formats can be used, these instructions
have been tested with the IGES format.  Please see Gambit->help for more
information on other formats.

If you are going to use Pro-E select a "part" model.  If you don't then you
won't be able to export the geometry piece into the IGES format.  

Gambit does have the ability to generate a complex object but it's not as
sophisticated as Pro-E.  You can create multiple geometric objects and add and
subtract them with boolean operators.  If you elect to use Gambit after you've 
created the object go to step 2.


2)  Generate the triangulated surfaces
------------------------------------
- Open Gambit:  gambit

- Go to File->Import->IGES and select the file.

- If you wish you can translate the geometry object.

- Generate a triangulated surface mesh: 
    - click the mesh command button (2nd button under Operation, yellow block).
    
    - click the face command button (3rd button under Mesh)
        -Select all faces
        -Change "Elements" to Tri (Triangulated faces)
        -Choose an appropriate interval size so the triangulated surface
         accurately represents the geometry piece
   
- Select Solver->Generic to generate a "neu" output file format.

- Export mesh:
  File->Export->Mesh
  <filename>.neu 


3) Convert the triangulated mesh into something that Uintah can read.
------------------------------------------------------------------------
- Copy the <filename>.neu file to your SCIrun directory.

- Run gambitFileReader.  Input the <filename>.neu file name and
then the basename of the output files.  Use the same name minus the
".neu" extension.  For example:


fluids:51# gambitFileReader

**********************************************
Input the name of the Gambit output file: torus.neu
Input the output file name for storing points and surfaces: torus
I've found 4400 nodes and 8800 elements
Node Coordinates
connectivity
I've successfully read in the file


- Copy the geometry <filename>.pts and <filename>.tri files to location of sus.

- Add the geometry to your input file in the same fashion as you would a 
box, cylinder, sphere.
_____________________________________________________________________________





HOW TO VISUALIZE THE TRIANGULATED SURFACE WITH SCIRUN
---------------------------------------------------------------------------------
1) Convert the tri/pts file into a "field"

<Vis build>/StandAlone/convert/TextToTriSurfField example.pts example.tri example.fld -noPtsCount -noElementsCount

2) scirun inputs/MPMICE/complex_MPM_geometries triSurface.srn
    - To see the individual node coordinates select:
          showField->text->render Indices As locations

_____________________________________________________________________________




GENERATING A TRIANGULATED SURFACE IN GAMBIT, STARTING WITH A SERIES OF X, Y, Z LOCATIONS.
--------------------------------------------------------------------------------

1) Starting with a space-delimited file of x, y, z locations of the surface you'd 
like to triangulate, at the top of the file add 
  <Number of rows in the file> <Number of z-planes>

2) Import the x, y data into gambit
   - At the command line execute gambit
   - file->import->vertex data (select file)  <coordinates should appear in white>
    

3) Create "edge lines"
    - Select the following:
        Geometry Command button (1st row, 1st button) 
        Edge Command Button     (2nd row, 2nd from left)
        Create Edge             (3rd row, 1st button)
        
    - Inside the "Create Straight Edge" dialog box select:
         Vertices: "all->" < all points should turn pink.>
         Apply             < all points should turn yellow>
       
      The yellow "edges" should pass through the data points and form an enclosed curve.  
      To generate an edge between the first and last data points select:
         Vertices:  Vertex.1->            <first data point should be red>
                    Vertex.X->            <last data point should be red>
                    unhighlight Vertex.X     <first & last data point should turn pink>
         Label:     enter "closureEdge"
         Apply                          < you should now have a fully enclosed curve>


4) Create faces from the edge lines, select:
      Face Command Button (2nd row, 3rd from left)
      Form Face           (3rd row, 1st button)
      
      Inside the "Create Face From WireFrame" dialog box, select: 
        all edges. <all edges should turn pink>
        Apply.     <all edges and points should turn blue>      


  (Skip this step if your object is already 3D)
5) Sweep the face to create a 3D object, select:
      Volume Command Button (2nd row, 4th button from left)
      Sweep Faces Button    (3rd row, 1st button from left, right click, 2nd button down)
      
      Inside the "Sweep Faces" dialog box, select:
        all->
        Vector
        Define
        Magnitude  -> enter the distance to sweep in the z direction
        Apply  <all the faces and edges should turn green>


6) Generate a triangulated mesh,select:
      Mesh Command Button  (1st row, 2nd icon from the left)
      Face Command Button  (2nd row, 3rd icon from the left)
         select all->  <face should be pink>
         Change "Elements:Quad" to "Elements:Tri"
         Change "Spacing:Interval size" to a smaller value.  You'll have to play with this.
         
         
7) export the mesh
    Select Solver->Generic to output a generic neu formatted file
    File->Export->Mesh (select filename)
      
To undo an operation hit the large blue arrow <last icon on right>


_____________________________________________________________________________
Useful commands to shift and scale the geometry:

Shift:
set x = 0.0
set y = 0.0
set z = 0.0
awk '{printf( "%15.16f %15.16f %15.16f \n", $1 + '$x', $2 + '$y', $3 + '$z') }' inputFilename

Scale:
set x = 1.0
set y = 1.0
set z = 1.0
awk '{printf( "%15.16f %15.16f %15.16f \n", $1 * '$x', $2 * '$y', $3 * '$z') }' inputFilename
