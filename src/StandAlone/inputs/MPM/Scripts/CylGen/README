This document is intended to be a guide for the use of the cylinder packing
code (cylgen.cc) and its helper codes, resizeCylinder.cc and MultiMatCyls.cc.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>CYLGEN<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

The first step is to specify the cylinder packing arrangement that is desired.  This should first be done by editing cylgen.cc.  In the main() portion of the
code are instructions for specifying RVE size, target volume fraction and the
size distribution of the sample to be generated.  Once the appropriate changes
have been made, compile and run according to the instructions near the top of
the file.  Namely, to compile:

> g++ -O3 -o cylgen cylgen.cc

and to run:

> cylgen

This will generate two files containing the description of the cylinders
that were created.  One file, "Position_Radius.txt" is an ASCII file
containing the x, y coordinates of the cylinder center and its radius.  The
other file, "Test2D.xml" is an xml formatted file suitable for inclusion in a
Uintah Problem Specification (.ups) file.

A simple input file is included to allow the user to view the results of cylgen
via Uintah.  One can run:

> path/to/sus TestCylGen.ups

which will take one timestep of an MPM simulation and generate results suitable for viewing in SCIRun or VisIt.


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>RESIZE CYLINDERS<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

The cylinder packing algorithm used above relies on a brute force method of
placing an object randomly, then checking to see if the most recently placed
item intersects any of the previously placed items.  If it does, it is
discarded, if not, it is kept and the next item is placed.  This approach means that most of the items placed will not necessarily be touching another item.

The resizeCylinders code is designed to read in the cylinder description given
in Position_Radius.txt and to enlarge each cylinder to the point that it is
touching at least one nearest neighbor.  This has two effects.  First, it
eliminates "floating" grains.  Second, it increases the packing fraction, which
may be desirable as there is a limit to what can be achieved by the brute force method described above.  Note that this will alter the grain size distribution
slightly.

To compile:

> g++ -O3 -o resizeCylinders resizeCylinders.cc

The output from resizeCylinders is "Position_Radius.RS.txt" and "Test2D.RS.xml"

Note that resizeParticles can be run multiple times to improve the packing.
To do this:

mv Position_Radius.RS.txt Position_Radius.txt
resizeCylinders

This can be done repeatedly until the change in total area diminishes.
By moving Test2D.RS.xml to Test2D.xml, the results of this operation can also
be run using the TestCylGen.ups file as above.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>MULTI_MAT_CYLINDERS<<<<<<<<<<<<<<<<<<<<<<<<<<

In order to describe interactions between cylinders, it is necessary for them
to occupy distinct fields, or "materials" in Uintah.  (Note that the multiple
materials can have identical properties, but distinct materials are evolved
independently, with contact models or cohesive zones responsible for describing
interactions between materials.

To compile:
> g++ -O3 -o MultiMatCyls MultiMatCyls.cc

To run:

> MultiMatCyls

This reads in PositionRadius.txt (note that if you want to read in the result
from resizeCylinders, you'll need to name the file correctly).  The cylinders
are randomly distributed among 10 materials (can be more or less, see "n_matls"
in the source code).  The result of this operation is two SETS of files,
"Position_Radius.#.txt" and "Test2D.#.xml" where # is the material number.

Finally, a sample input file is available to run the case with multiple
materials:

> path/to/sus TestMMCylGen.ups
