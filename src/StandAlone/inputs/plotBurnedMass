#!/bin/csh
#__________________________________
#  This script plot the totalMassBurned and its sum
#   output and plot it using gnuplot.
#  Usage:
#     plotBurnedMass <dump postScript File (y/Y), default is no> <optional: density> <optional: tStart> <optional: tEnd>
#     
#      Use keyword 'default' in place of density to extract density from file *NOTE:May extract wrong density,
#      hence the option in the input.  Extracts cell size from input file while assuming a square grid.
#      Assumes only 1 cell is burning for burning measurements.  *TODO: Add algorithm for total burning surface area
#
#  This requires gnuplot 3.8 or greater.
#__________________________________

# Debugging flag
set Debug = 0

#__________________________________
# Logic for outputting total burned mass
#__________________________________
set out = totalMassBurned.dat
if ( !(-e $out) ) then
    echo "Couldn't find your file $out"
  exit(1)
endif

set hardcopy = "n"
if ( $#argv > 0 ) then
  set hardcopy = $1
endif 

#__________________________________
cp $out $out.org
echo "computing cumulative sum"
awk 'NR==1 {sum=$2; lambda=.9; print $1,$2,sum} ; NR>1 {sum=sum + $2; print $1, $2, sum}' < $out.org >& $out
/bin/rm $out.org

#__________________________________
# Logic for outputting burn rate
#__________________________________
set tStart = 0.0
set tEnd = 10000000000.0

# extract density from input file
#  arbitrarily set to value larger than 500 
#  as most explosives will be greater than that
#  HAS TROUBLE WITH DISTINGUISHING BETWEEN STEEL AND PBX -- NEEDS TO BE FIXED
set densityDef = `grep density input.xml.orig | awk '{if($2 > 500) print $2}'`

set density = $densityDef


# bulletproofing
if( $#argv > 1 ) then
  if($2 == default ) then
    set density = densityDef
  else
    set density = $2
  endif
endif

# print what density is being used
echo "Using density: $density"

echo "before surface area"
# set cell surface area
grep resolution input.xml | awk '{print  $3}' > resFile
grep lower input.xml | awk '{print $3}' > lowFile
grep upper input.xml | awk '{print $3}' > highFile

sed -i s/,// resFile
sed -i s/,// lowFile
sed -i s/,// highFile

paste -d '\t' lowFile highFile resFile >& cellSizeFile

set cellSize = `awk '{print (($2-$1)/$3)*(($2-$1)/$3)}' cellSizeFile`
echo "Cell Size is: $cellSize"

# Delete temp files unless debugging variable is set
if ($Debug == 0) then
  rm -rf lowFile resFile highFile cellSizeFile
endif

if ( $#argv > 3 ) then
  if ( $#argv < 4 ) then
    echo "Usage: plotBurnedMass <dump postScript File (y/Y), default is no> <optional: density> <optional: tStart> <optional: tEnd>"
    echo "  End time must accompany start time."
    echo "  Use keyword 'default' in place of density to extract density from file.  *NOTE* May extract wrong density"
    exit(1)
   endif

   # set start and end times
   set tStart = $3
   set tEnd = $4
   if ($3 == default) then
     set tStart = 0.0
   endif
   if ($4 == default ) then
     set tEnd = 1000000000000.0
   endif
endif

# do awking of file
awk -v tS="$tStart" -v tE="$tEnd" -v d="$density" 'BEGIN{told = 0} {if(($1 > tS) && ($1 < tE)) print $1 "\t" $2/(($1-told)*d*0.001*0.001); told=$1 }' $out >& burningRate.dat

echo "" > gp


#__________________________________
# if making a hardcopy
if( $hardcopy == "y" || $hardcopy == "Y" ) then 
echo "Generating the postscript file plotMassBurned.ps"
/bin/rm gp
cat > gp << fin
set terminal postscript color solid "Times-Roman" 9
set output "plotMassBurned.ps"
fin
endif

#__________________________________
# generate the  plot script
cat >> gp << fin
set grid xtics ytics 
set multiplot
set y2tics

set ylabel 'Mass Burned /timestep  [Kg]' textcolor lt 1
set y2label 'Total Mass Burned [Kg]'     textcolor lt 2
set xlabel 'Physical Time[sec]'          textcolor lt 1


set origin 0.0,0.5
set size 1.0,0.5

plot 'totalMassBurned.dat' using 1:2 t           'Mass Burned' with lines,\
     'totalMassBurned.dat' using 1:3 axis x1y2 t 'Cum. Sum' with lines

set origin 0.0,0.0
set size 1.0,0.5
unset y2label

set ylabel 'Burning Rate [m/s]'         textcolor lt 1
set xlabel 'Physical Time [sec]'        textcolor lt 1

plot 'burningRate.dat' using 1:2 t               'Burning Rate' with lines

replot
pause -1 "Hit return to exit"
fin
#__________________________________
# plot it up
gnuplot gp


exit(1)
