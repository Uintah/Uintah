<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "component.dtd">
<!--
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
-->

<?xml-stylesheet href="component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<component name="SynchronizeGeometry" category="Render">
  <overview>
    <authors>
      <author>Kai Li</author>
    </authors>
    <summary>Create a barrier to synchronize a set of geometry
streams.</summary>
    <description>
      <p> Unlike the other modules in SCIRun, the Viewer module is
asynchronous.  That is, ViewWindows redraw as soon as any Geometry is
added (or deleted) through any Viewer port. This is typically the
desired behavior, as it keeps the visualizations optimally
interactive.  However, this is not desirable when creating animations,
since a new animation frame is generated each time there is a redraw.
On the contrary, when creating animations, users typically want only a
single redraw per time-step, and that redraw should occur only when
all of the scene geometry has been updated.  The SynchronizeGeoemtry
module provides precisely this mechanism.  All of the Geometry that
the user wishes to change synchronously with each frame of the
animation (e.g. updated isosurfaces, streamlines, psuedo-colored
surface potential maps, etc) are passed through the
SynchronizeGeometry module before being passed into the Viewer.  As
updated Geometries are sent to SynchronizeGeometry, it stores them in
a buffer until all of the inputs have been received; it then sends
them to the Viewer as a single atomic group, which results in a single
redraw event (and thus a single new frame for the animation).
	</p>
      <p> A geometry stream is composed of multiple geometry samples.
Each geometry sample is created by calling GeometryOPort:: delObj()
and/or GeometryOPort::addObj() one or more times. All geometry samples
with the same virtual sequence number in differenct streams must reach
the barrier before they can all proceed. The boundary of geometry
samples is the GeometryFlush or GeometryFlushViews message, which is
sent out explicitly by calling functions like GeometryOPort::
flushViews(), or implicitly by SCIRun after you did some geometry
operations (delete or add) in Module::execute() but did not call any
flush messages. With a checkbox in the control panel, users can
dynamically choose whether or not to enforce the barrier.
	</p>
    </description>
  </overview>
  <io>
    <inputs lastportdynamic="yes">
      <port>
        <name>Input Geometry</name>
        <datatype>SCIRun::Geometry</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
        <name>Output Geometry</name>
        <datatype>SCIRun::Geometry</datatype>
	<componentname>Viewer</componentname>
      </port>
    </outputs>
  </io>
</component>

