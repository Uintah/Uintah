<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "component.dtd">
<?xml-stylesheet href="component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
-->



<component name="ManageFieldData" category="FieldsData">
  <overview>
    <authors>
      <author>Michael Callahan</author>
    </authors>
    <summary>Add and remove data from a field.</summary>
    <description>
      <p>
        This module performs two simultanious operations.  First the
"Input Field" is split into it's mesh part it's data values.  The data
values are packaged up and passed to the "Output Matrix" port.  Second
the input field geometry is joined with the data from the Input
Matrix, and the result is passed out on the "Output Field" port. If
the input matrix is not present, then the second operation is not
performed and the Output Field is the same as the Input Field.
      </p>
      <p>
        The format of the "Output Matrix" will be a column matrix if
the nput field was of scalar type.  It will be an Nx3 matrix if the
input field contained vectors.  If the field contained tensors it will
be Nx9 matrix, where the tensor is flattened out in left to right, top
to bottom order.  Column 0 contains (0, 0), column 1 contains (0, 1),
column 2 contains (0,2), column 3 contains (1, 0), etc.
      </p>
      <p>
        The "Input Matrix" should have the same number of values as
the field where the values are to be stored.  The type of the Iutput
Field is preserved in the Output field as well.  So for instance if
the input field is a vector field, the Output Field will also be a
vector field, and the input matrix should be an Nx3 matrix where N is
equal to the number of elements to be filled in.
      </p>
      <p>
        Feb 11, 2004:  The module now will try to preserve the scalar
type of the field, so if you pass it in a TetVolField of integers and
a row matrix, it will return a TetVolField of integers.  If the types
are not convertible then you will still get a default Vector,Tensor,
or double field as appropriate.  If you need the old behavior use
<modref package="SCIRun" name="ChangeFieldDataType"/> to convert the
input field to double type before passing it in.
      </p>
    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
	<name>Input Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
      <port>
	<name>Input Matrix</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
	<name>Output Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
      <port>
	<name>Output Matrix</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
    </outputs>
  </io>
</component>
