/*
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OT79
HER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/

package sci {
  	
  package cca {
    
    package distributed {

      // Distributed Components
      interface ComponentInfo extends ComponentID
      {
	DistributedFramework getFramework();

	array<PortInfo,1> getPorts();
	PortInfo getPortInfo( in string portName );
	
	string getClassName();
	TypeMap getProperties();
	void setProperties( in TypeMap );
      }

      package internal {
	interface Service extends ComponentInfo {
	  Port getService(in string name);
	}
      }
      


      // Component Event

      enum ComponentEventType {
	AllComponentEvents = 0,
	InstantiatePending=1,
	ComponentInstantiated=2,
	DestroyPending=3,
	ComponentDestroyed=4,
	ComponentMoved=5,
      }

      interface ComponentEvent {
	ComponentEventType getType();
	ComponentID getID();
	TypeMap getComponentProperties();
      }

      interface ComponentEventListener {
	void componentActivity(in ComponentEvent evt);
      }

      package ports {

	interface ComponentEventService extends Port, internal.Service {
	  /** Sign up to be told about component activity.
	      @param ComponentEventType must be one of the integer values 
	      ALL, ConnectPending, Connected, DisconnectPending, Disconnected
	      as defined in @see ContainerEventType. 
	      ALL means listening to all of the other four listed here.
	      @param l, an object (this component or its delegate) that listens
	      by implementing the ConnectionEventListener callback.
	      @param playInitialEvents, send events for components that have
	      already been instantiated
	  */
	  void addComponentEventListener(in ComponentEventType type, 
					 in ComponentEventListener listener, 
					 in bool playInitialEvents);
	  
	  /** Ignore future ComponentEvents of the given type.
	      Removing a non-added listener is not an error. 
	      @param ComponentEventType must be one of the integer values defined in
	      addConnectionEventListener.
	      @param l, a previously added listener interface.
	  */
	  void removeComponentEventListener(in ComponentEventType type, 
					    in ComponentEventListener listener) ;
	  
	}

	interface ConnectionEventService 
	  extends sci.cca.ports.ConnectionEventService, internal.Service
	{
	}

	interface ComponentRepositoryService 
	  extends sci.cca.ports.ComponentRepository, internal.Service
	{
	}
	
	interface FrameworkPropertiesService 
	  extends sci.cca.ports.FrameworkProperties, internal.Service
	{
	}
      }

      // Distributed Ports

      enum PortType {
	ProvidePort = 0,
	UsePort     = 1,
      }

      interface PortInfo {
	bool connect(in PortInfo);
	bool disconnect(in PortInfo );
	bool available();
	bool canConnectTo(in PortInfo);
	
	Port getPort();
	PortInfo getPeer();
	PortType getPortType();

	string getName();
	string getType();

	void incrementUseCount();
	bool decrementUseCount();
      };
      
      interface FrameworkID {
	string getString();
      }

      interface DistributedFramework extends AbstractFramework 
      {
	FrameworkID getFrameworkID();

	bool isRoot();
	DistributedFramework getParent();
	array<DistributedFramework,1> getChildren();
	
	Port getFrameworkService( in string serviceName, in ComponentInfo);
	bool releaseFrameworkService(in string serviceName, in ComponentInfo);
      }
      
      // various framework services
      
      interface  BuilderService 
         extends ports.BuilderService, internal.Service 
      {
	
	//void emitConnectionEvent( in ports.ConnectionEvent );
      }
      
      interface ConnectionEventService 
         extends ports.ConnectionEventService, internal.Service 
      {      
	//void emitConnectionEvent(in ports.ConnectionEvent);
      }
      
      interface ComponentEventService
         extends ports.ComponentEventService, internal.Service 
      {
	//void emitComponentEvent(in ports.ComponentEvent);
      }

    } // distributed

  } // cca

} //sci

