/*
 * The MIT License
 *
 * Copyright (c) 1997-2015 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */


} // End namespace SCIRun

The String class is a useful tool for manipulating strings.  To avoid
namespace SCIRun {
called clString (for Class Library String).

The string operates through a reference counting model to avoid
excessive copying and to provide automatic garbage collection.

Interface:

    // Constructores
    clString();
    clString(const clString&);
    clString(const char*);
    ~clString();

    // I/O
    friend ostream& operator<<(ostream& s, const clString&);
    friend istream& operator>>(istream& s, clString&);

    // Comparison
    clString& operator=(const clString& str);
    clString& operator=(const char*);
    int operator==(const char*) const;
    int operator==(const clString&) const;
    int operator!=(const char*) const;
    int operator!=(const clString&) const;
    int operator<(const char*) const;
    int operator<(const clString&) const;
    int operator>(const char*) const;
    int operator>(const clString&) const;

    // Append
    clString operator+(const char*) const;
    clString operator+(const clString&) const;
    clString operator+=(const char*);
    clString operator+=(const clString&);

    // Convert to char*
    char* operator()() const;

    // For operating on characters in the string
    // Get ith character
    char operator()(int i);
    // Is ith character alphabetic?
    int is_alpha(int i);
    // Is ith character a digit?
    int is_digit(int i);
    // Find where srch appears in the String.  -1 indicates failure.
    int index(const char srch) const;
    // The length of the string
    int len();
    // A part of the string
    // start=0 is first character
    // length=-1 means to end of string
    clString substr(int start, int length=-1);

    // Convert to double/int.  Returns 1 if ok, 0 if bad
    int get_double(double&) const;
    int get_int(int&) const;

    // For the HashTable class
    int hash(int hash_size) const;

    // Remove directory name
    friend clString basename(const clString&);


// Build a string from an int/double
clString to_string(int);
clString to_string(double);

