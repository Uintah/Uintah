/******************************************************************************
                                  WARNING
This file was automatically generated by the Kayenta release scripts. DO NOT
EDIT IT DIRECTLY. WHATEVER CHANGES THAT ARE MADE WILL BE LOST THE NEXT TIME
THE KAYENTA RELEASE SCRIPTS ARE RUN. If changes to this file are deemed
necessary, please contact the Kayenta developers so that the changes can be
made.
******************************************************************************/
/*
 * The MIT License
 *
 * Copyright (c) 1997-2017 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
#include <CCA/Components/MPM/ConstitutiveModel/Kayenta.h>
#include <CCA/Components/MPM/ConstitutiveModel/MPMMaterial.h>
#include <CCA/Ports/DataWarehouse.h>
#include <Core/Exceptions/ParameterNotFound.h>
#include <Core/Grid/Level.h>
#include <Core/Grid/Patch.h>
#include <Core/Grid/Task.h>
#include <Core/Grid/Variables/ParticleVariable.h>
#include <Core/Grid/Variables/NCVariable.h>
#include <Core/Grid/Variables/NodeIterator.h>
#include <Core/Grid/Variables/VarLabel.h>
#include <Core/Grid/Variables/VarTypes.h>
#include <Core/Labels/MPMLabel.h>
#include <Core/Math/Matrix3.h>
#include <Core/ProblemSpec/ProblemSpec.h>
#include <Core/Malloc/Allocator.h>
#include <Core/Math/MinMax.h>
#include <Core/Parallel/Parallel.h>
#include <sci_defs/uintah_defs.h>
#include <Core/Math/Weibull.h>
#include <fstream>
#include <iostream>
#include <string>
#include <cstring>
////////////////////////////////////////////////////////////////////////////////
extern "C"{
#if defined( FORTRAN_UNDERSCORE_END )
#  define KAYENTA_CHECK_PARAMS kayenta_check_params_
#  define KAYENTA_UPDATE_STATE kayenta_update_state_
#  define KAYENTA_REQUEST_XTRA_VARS kayenta_request_xtra_vars_
#elif defined( FORTRAN_UNDERSCORE_LINUX )
#  define KAYENTA_CHECK_PARAMS kayenta_check_params_
#  define KAYENTA_UPDATE_STATE kayenta_update_state_
#  define KAYENTA_REQUEST_XTRA_VARS kayenta_request_xtra_vars_
#else // NONE
#  define KAYENTA_CHECK_PARAMS kayenta_check_params
#  define KAYENTA_UPDATE_STATE kayenta_update_state
#  define KAYENTA_REQUEST_XTRA_VARS kayenta_request_xtra_vars
#endif
  void KAYENTA_CHECK_PARAMS(double UI[]);
  void KAYENTA_UPDATE_STATE(int &nblk, double &dt, double UI[],
			    double D[], double stress[], double svarg[],
			    double &USM);
  void KAYENTA_REQUEST_XTRA_VARS(double UI[], int &nx,
				 char namea[], char keya[], double xinit[],
				 double rdim[], int iadvct[], int itype[]);
}
// End fortran functions.
////////////////////////////////////////////////////////////////////////////////
using namespace std; using namespace Uintah;
Kayenta::Kayenta(ProblemSpecP& ps,MPMFlags* Mflag)
  : ConstitutiveModel(Mflag)
{
  // See Kayenta_pnt.Blk to see where these numbers come from
  // Total number of User Inputs
  d_NKMMPROP=NUM_KAYENTA_PROPS;

  for(int i = 0; i<d_NKMMPROP; i++){
     UI[i] = 0.;
  }

  // Read model parameters from the input file
  getInputParameters(ps);
  // Check that model parameters are valid and allow model to change if needed
  //First, print out the UI values specified by the user
  proc0cout << "Original UI values" << endl;
  for(int i = 0; i<d_NKMMPROP; i++){
     proc0cout << "UI[" << i << "] = " << UI[i] << endl;
  }
  KAYENTA_CHECK_PARAMS(UI);
  //Now, print out the UI values after alteration by KAYENTA_CHK
  proc0cout << "Modified UI values" << endl;
  for(int i = 0; i<d_NKMMPROP; i++){
     proc0cout << "UI[" << i << "] = " << UI[i] << endl;
  }
  //Create VarLabels for Kayenta internal state variables (ISVs)
  int nx;
  char namea[5000];
  char keya[5000];
  double rdim[700];
  int iadvct[100];
  int itype[100];
  KAYENTA_REQUEST_XTRA_VARS(UI, nx, namea, keya, xinit, rdim, iadvct, itype);
  //Print out the Derived Constants
//  proc0cout << "Derived Constants" << endl;
//  for(int i = 0; i<d_NKMMDC; i++){
//     proc0cout << "DC[" << i << "] = " << DC[i] << endl;
//  }
  // Print out Internal State Variables
  d_NINSV=nx;
  proc0cout << "Internal State Variables" << endl;
  proc0cout << "# ISVs = " << d_NINSV << endl;
//  for(int i = 0;i<d_NINSV; i++){
//    proc0cout << "ISV[" << i << "] = " << xinit[i] << endl;
//  }
  initializeLocalMPMLabels();
}

#if 0
Kayenta::Kayenta(const Kayenta* cm) : ConstitutiveModel(cm)
{
  for(int i=0;i<d_NKMMPROP;i++){
    UI[i] = cm->UI[i];
  }
  wdist.WeibMed    = cm->wdist.WeibMed;
  wdist.WeibMod    = cm->wdist.WeibMod;
  wdist.WeibRefVol = cm->wdist.WeibRefVol;
  wdist.WeibSeed   = cm->wdist.WeibSeed;
  wdist.Perturb    = cm->wdist.Perturb;
  wdist.WeibDist   = cm->wdist.WeibDist;
  d_allowNoTension = cm->d_allowNoTension;
  d_removeMass = cm->d_removeMass;
  //Create VarLabels for Kayenta internal state variables (ISVs)
  initializeLocalMPMLabels();
}
#endif

Kayenta::~Kayenta()
{
   for (unsigned int i = 0; i< ISVLabels.size();i++){
     VarLabel::destroy(ISVLabels[i]);
   }
   VarLabel::destroy(peakI1IDistLabel);
   VarLabel::destroy(peakI1IDistLabel_preReloc);
}
void Kayenta::outputProblemSpec(ProblemSpecP& ps,bool output_cm_tag)
{
  ProblemSpecP cm_ps = ps;
  if (output_cm_tag) {
    cm_ps = ps->appendChild("constitutive_model");
    cm_ps->setAttribute("type","kayenta");
  }
  /* Kayenta User Input Variables UI[FortranNumber-1] */
  cm_ps->appendElement("B0", UI[0]);
  cm_ps->appendElement("B1", UI[1]);
  cm_ps->appendElement("B2", UI[2]);
  cm_ps->appendElement("B3", UI[3]);
  cm_ps->appendElement("B4", UI[4]);
  cm_ps->appendElement("G0", UI[5]);
  cm_ps->appendElement("G1", UI[6]);
  cm_ps->appendElement("G2", UI[7]);
  cm_ps->appendElement("G3", UI[8]);
  cm_ps->appendElement("G4", UI[9]);
  cm_ps->appendElement("RJS", UI[10]);
  cm_ps->appendElement("RKS", UI[11]);
  cm_ps->appendElement("RKN", UI[12]);
  cm_ps->appendElement("A1", UI[13]);
  cm_ps->appendElement("A2", UI[14]);
  cm_ps->appendElement("A3", UI[15]);
  cm_ps->appendElement("A4", UI[16]);
  cm_ps->appendElement("P0", UI[17]);
  cm_ps->appendElement("P1", UI[18]);
  cm_ps->appendElement("P2", UI[19]);
  cm_ps->appendElement("P3", UI[20]);
  cm_ps->appendElement("CR", UI[21]);
  cm_ps->appendElement("RK", UI[22]);
  cm_ps->appendElement("RN", UI[23]);
  cm_ps->appendElement("HC", UI[24]);
  cm_ps->appendElement("CTPSF", UI[25]);
  cm_ps->appendElement("CTPS", UI[26]);
  cm_ps->appendElement("CTI1", UI[27]);
  cm_ps->appendElement("T1", UI[28]);
  cm_ps->appendElement("T2", UI[29]);
  cm_ps->appendElement("T3", UI[30]);
  cm_ps->appendElement("T4", UI[31]);
  cm_ps->appendElement("T5", UI[32]);
  cm_ps->appendElement("T6", UI[33]);
  cm_ps->appendElement("T7", UI[34]);
  cm_ps->appendElement("J3TYPE", UI[35]);
  cm_ps->appendElement("A2PF", UI[36]);
  cm_ps->appendElement("A4PF", UI[37]);
  cm_ps->appendElement("CRPF", UI[38]);
  cm_ps->appendElement("RKPF", UI[39]);
  cm_ps->appendElement("SUBX", UI[40]);
  cm_ps->appendElement("DEJAVU", UI[41]);
  cm_ps->appendElement("FAIL0", UI[42]);
  cm_ps->appendElement("FAIL1", UI[43]);
  cm_ps->appendElement("FAIL2", UI[44]);
  cm_ps->appendElement("FAIL3", UI[45]);
  cm_ps->appendElement("FAIL4", UI[46]);
  cm_ps->appendElement("FAIL5", UI[47]);
  cm_ps->appendElement("FAIL6", UI[48]);
  cm_ps->appendElement("FAIL7", UI[49]);
  cm_ps->appendElement("FAIL8", UI[50]);
  cm_ps->appendElement("FAIL9", UI[51]);
  cm_ps->appendElement("PEAKI1I", UI[52]);
  cm_ps->appendElement("STRENI", UI[53]);
  cm_ps->appendElement("FSLOPEI", UI[54]);
  cm_ps->appendElement("PEAKI1F", UI[55]);
  cm_ps->appendElement("STRENF", UI[56]);
  cm_ps->appendElement("SOFTENING", UI[57]);
  cm_ps->appendElement("FSLOPEF", UI[58]);
  cm_ps->appendElement("FAILSTAT", UI[59]);
  cm_ps->appendElement("EOSID", UI[60]);
  cm_ps->appendElement("DILATLIM", UI[61]);
  cm_ps->appendElement("NU", UI[62]);
  cm_ps->appendElement("YSLOPEI", UI[63]);
  cm_ps->appendElement("YSLOPEF", UI[64]);
  cm_ps->appendElement("SPALLI1", UI[65]);
  cm_ps->appendElement("FREE08", UI[66]);
  cm_ps->appendElement("FREE07", UI[67]);
  cm_ps->appendElement("FREE06", UI[68]);
  cm_ps->appendElement("FREE05", UI[69]);
  cm_ps->appendElement("FREE04", UI[70]);
  cm_ps->appendElement("FREE03", UI[71]);
  cm_ps->appendElement("FREE02", UI[72]);
  cm_ps->appendElement("FREE01", UI[73]);
  cm_ps->appendElement("CKN01", UI[74]);
  cm_ps->appendElement("CKN02", UI[75]);
  cm_ps->appendElement("CKN03", UI[76]);
  cm_ps->appendElement("VMAX1", UI[77]);
  cm_ps->appendElement("VMAX2", UI[78]);
  cm_ps->appendElement("VMAX3", UI[79]);
  cm_ps->appendElement("SPACE1", UI[80]);
  cm_ps->appendElement("SPACE2", UI[81]);
  cm_ps->appendElement("SPACE3", UI[82]);
  cm_ps->appendElement("SHRSTIFF1", UI[83]);
  cm_ps->appendElement("SHRSTIFF2", UI[84]);
  cm_ps->appendElement("SHRSTIFF3", UI[85]);
  cm_ps->appendElement("TMPRXP", UI[86]);
  cm_ps->appendElement("TM", UI[87]);
  cm_ps->appendElement("R0", UI[88]);
  cm_ps->appendElement("T0", UI[89]);
  cm_ps->appendElement("CS", UI[90]);
  cm_ps->appendElement("S1", UI[91]);
  cm_ps->appendElement("SR", UI[92]);
  cm_ps->appendElement("CV", UI[93]);
  cm_ps->appendElement("EOS01", UI[94]);
  cm_ps->appendElement("EOS02", UI[95]);
  cm_ps->appendElement("EOS03", UI[96]);
  cm_ps->appendElement("EOS04", UI[97]);
  cm_ps->appendElement("EOS05", UI[98]);
  cm_ps->appendElement("EOS06", UI[99]);
  cm_ps->appendElement("EOS07", UI[100]);
  cm_ps->appendElement("EOS08", UI[101]);
  cm_ps->appendElement("EOS09", UI[102]);
  cm_ps->appendElement("EOS10", UI[103]);
  cm_ps->appendElement("EOS11", UI[104]);
  cm_ps->appendElement("EOS12", UI[105]);
  cm_ps->appendElement("EOS13", UI[106]);
  cm_ps->appendElement("EOS14", UI[107]);
  cm_ps->appendElement("EOS15", UI[108]);
  cm_ps->appendElement("EOS16", UI[109]);
  cm_ps->appendElement("SQA", UI[110]);
  cm_ps->appendElement("DC01", UI[111]);
  cm_ps->appendElement("DC02", UI[112]);
  cm_ps->appendElement("DC03", UI[113]);
  cm_ps->appendElement("DC04", UI[114]);
  cm_ps->appendElement("DC05", UI[115]);
  cm_ps->appendElement("DC06", UI[116]);
  cm_ps->appendElement("DC07", UI[117]);
  cm_ps->appendElement("DC08", UI[118]);
  cm_ps->appendElement("DC09", UI[119]);
  cm_ps->appendElement("DC10", UI[120]);
  cm_ps->appendElement("DC11", UI[121]);
  cm_ps->appendElement("DC12", UI[122]);
  cm_ps->appendElement("DC13", UI[123]);
   /* Uintah Variability Variables */
  cm_ps->appendElement("PeakI1IPerturb", wdist.Perturb);
  cm_ps->appendElement("PeakI1IMed", wdist.WeibMed);
  cm_ps->appendElement("PeakI1IMod", wdist.WeibMod);
  cm_ps->appendElement("PeakI1IRefVol", wdist.WeibRefVol);
  cm_ps->appendElement("PeakI1ISeed", wdist.WeibSeed);
  cm_ps->appendElement("PeakI1IDist", wdist.WeibDist);
}
Kayenta* Kayenta::clone()
{
  return scinew Kayenta(*this);
}
void Kayenta::initializeCMData(const Patch* patch,
                               const MPMMaterial* matl,
                               DataWarehouse* new_dw)
{
  // Initialize the variables shared by all constitutive models
  // This method is defined in the ConstitutiveModel base class.
  initSharedDataForExplicit(patch, matl, new_dw);
  ParticleSubset* pset = new_dw->getParticleSubset(matl->getDWIndex(), patch);
  std::vector<ParticleVariable<double> > ISVs(d_NINSV+1);
//  proc0cout << "In initializeCMData" << endl;
  for(int i=0;i<d_NINSV;i++){
    new_dw->allocateAndPut(ISVs[i],ISVLabels[i], pset);
    ParticleSubset::iterator iter = pset->begin();
    for(;iter != pset->end(); iter++){
      ISVs[i][*iter] = xinit[i];
    }
  }

  ParticleVariable<double> peakI1IDist;
  new_dw->allocateAndPut(peakI1IDist, peakI1IDistLabel, pset);
  if ( wdist.Perturb){
      // Make the seed differ for each patch, otherwise each patch gets the
      // same set of random #s.
      int patchID = patch->getID();
      int patch_div_32 = patchID/32;
      patchID = patchID%32;
      unsigned int unique_seed = ((wdist.WeibSeed+patch_div_32+1) << patchID);
    Weibull weibGen(wdist.WeibMed,wdist.WeibMod,wdist.WeibRefVol,
                            unique_seed,wdist.WeibMod);
    proc0cout << "Weibull Variables for PEAKI1I: (initialize CMData)\n"
            << "Median:            " << wdist.WeibMed
            << "\nModulus:         " << wdist.WeibMod
            << "\nReference Vol:   " << wdist.WeibRefVol
            << "\nSeed:            " << wdist.WeibSeed
            << "\nPerturb?:        " << wdist.Perturb << std::endl;
    constParticleVariable<double>pVolume;
    new_dw->get(pVolume, lb->pVolumeLabel, pset);
    ParticleSubset::iterator iter = pset->begin();
    for(;iter != pset->end();iter++){
       peakI1IDist[*iter] = weibGen.rand(pVolume[*iter]);
    }
  }
  computeStableTimestep(patch, matl, new_dw);
}

void Kayenta::addParticleState(std::vector<const VarLabel*>& from,
                               std::vector<const VarLabel*>& to)
{
  // Add the local particle state data for this constitutive model.
  for(int i=0;i<d_NINSV;i++){
    from.push_back(ISVLabels[i]);
    to.push_back(ISVLabels_preReloc[i]);
  }
  from.push_back(peakI1IDistLabel);
  to.push_back(peakI1IDistLabel_preReloc);
}
void Kayenta::computeStableTimestep(const Patch* patch,
                                    const MPMMaterial* matl,
                                    DataWarehouse* new_dw)
{
  // This is only called for the initial timestep - all other timesteps
  // are computed as a side-effect of computeStressTensor
  Vector dx = patch->dCell();
  int dwi = matl->getDWIndex();
  ParticleSubset* pset = new_dw->getParticleSubset(dwi, patch);
  constParticleVariable<double> pmass, pvolume;
  constParticleVariable<Vector> pvelocity;
  new_dw->get(pmass,     lb->pMassLabel,     pset);
  new_dw->get(pvolume,   lb->pVolumeLabel,   pset);
  new_dw->get(pvelocity, lb->pVelocityLabel, pset);
  double c_dil = 0.0;
  Vector WaveSpeed(1.e-12,1.e-12,1.e-12);
  double bulk = UI[d_B0];
  double G = UI[d_G0];
  for(ParticleSubset::iterator iter = pset->begin();iter != pset->end();iter++){
     particleIndex idx = *iter;
     // Compute wave speed at each particle, store the maximum
     c_dil = sqrt((bulk + 4.*G/3.)*pvolume[idx]/pmass[idx]);
     WaveSpeed=Vector(Max(c_dil+fabs(pvelocity[idx].x()),WaveSpeed.x()),
                      Max(c_dil+fabs(pvelocity[idx].y()),WaveSpeed.y()),
                      Max(c_dil+fabs(pvelocity[idx].z()),WaveSpeed.z()));
  }
  UI[d_R0] = matl->getInitialDensity();      // RHO0
  UI[d_T0]=matl->getRoomTemperature();     // TMPR0
  UI[d_CS]=bulk/matl->getInitialDensity(); // SNDSP0
  UI[d_CV]=matl->getInitialCv();           // CV
  WaveSpeed = dx/WaveSpeed;
  double delT_new = WaveSpeed.minComponent();
  new_dw->put(delt_vartype(delT_new), lb->delTLabel, patch->getLevel());
}
void Kayenta::viscousStressUpdate(Matrix3& D, const Matrix3& old_stress, double& rho_orig,const double& old_volume, double& bulk, double& viscosity, double& delT, Matrix3& new_stress, Matrix3& new_defgrad, double& rho_cur, double& new_volume, double& USM, double& c_dil ){
  new_volume  = old_volume;
  rho_cur = rho_orig;
  Matrix3 Identity;
  Identity.Identity();
  // the deformation gradient will be set to the identity
  new_defgrad = Identity;
  double one_third = 1.0/3.0;
  double pressure = one_third*old_stress.Trace();
  double pressure_rate = bulk*D.Trace();
  Matrix3 DPrime = D - Identity*one_third*D.Trace();
  Matrix3 shear = DPrime*(2.*viscosity);
  // first we add the pressure to the old stress tensor:
  pressure = pressure + pressure_rate*delT;
  // check to see if pressure is compresive:
  if (pressure>0){
    pressure=0;
  }
  // now we add the shear and pressure components
  new_stress = Identity*pressure + shear;
  //now we must define USM
  USM = bulk;
  c_dil = sqrt(bulk/rho_cur);
}
void Kayenta::computeStressTensor(const PatchSubset* patches,
                                  const MPMMaterial* matl,
                                  DataWarehouse* old_dw,
                                  DataWarehouse* new_dw)
{
  double rho_orig = matl->getInitialDensity();
  for(int p=0;p<patches->size();p++){
    double se = 0.0;
    const Patch* patch = patches->get(p);
    Matrix3 Identity; Identity.Identity();
    double c_dil=0.0;
    Vector WaveSpeed(1.e-12,1.e-12,1.e-12);
    Vector dx = patch->dCell();
    int dwi = matl->getDWIndex();
    // Create array for the particle position
    ParticleSubset* pset = old_dw->getParticleSubset(dwi, patch);
    constParticleVariable<Matrix3> deformationGradient, pstress;
    ParticleVariable<Matrix3> pstress_new;
    constParticleVariable<Matrix3> deformationGradient_new,velGrad;
    constParticleVariable<double> pmass, pvolume, ptemperature, peakI1IDist;
    ParticleVariable<double> peakI1IDist_new;
    constParticleVariable<double> pvolume_new;
    constParticleVariable<Vector> pvelocity;
    delt_vartype delT;
    constParticleVariable<int> pLocalized;
    ParticleVariable<int>     pLocalized_new;
    constParticleVariable<long64> pParticleID;
    
    old_dw->get(pLocalized,          lb->pLocalizedMPMLabel,       pset);
    old_dw->get(delT, lb->delTLabel, getLevel(patches));
    old_dw->get(pstress,             lb->pStressLabel,             pset);
    old_dw->get(pmass,               lb->pMassLabel,               pset);
    old_dw->get(pvolume,             lb->pVolumeLabel,             pset);
    old_dw->get(pvelocity,           lb->pVelocityLabel,           pset);
    old_dw->get(ptemperature,        lb->pTemperatureLabel,        pset);
    old_dw->get(deformationGradient, lb->pDeformationMeasureLabel, pset);
    old_dw->get(peakI1IDist,         peakI1IDistLabel,             pset);
    old_dw->get(pParticleID,         lb->pParticleIDLabel,         pset);
    std::vector<constParticleVariable<double> > ISVs(d_NINSV+1);
    for(int i=0;i<d_NINSV;i++){
      old_dw->get(ISVs[i],           ISVLabels[i],                 pset);
    }
    ParticleVariable<double> pdTdt,p_q;
    new_dw->allocateAndPut(pLocalized_new,  lb->pLocalizedMPMLabel_preReloc, pset);
    new_dw->allocateAndPut(pstress_new,     lb->pStressLabel_preReloc,       pset);
    new_dw->allocateAndPut(pdTdt,           lb->pdTdtLabel,                  pset);
    new_dw->allocateAndPut(p_q,             lb->p_qLabel_preReloc,           pset);
    new_dw->allocateAndPut(peakI1IDist_new, peakI1IDistLabel_preReloc,       pset);
    new_dw->get(deformationGradient_new,
                           lb->pDeformationMeasureLabel_preReloc,            pset);
    new_dw->get(pvolume_new,     lb->pVolumeLabel_preReloc,                  pset);
    new_dw->get(velGrad,         lb->pVelGradLabel_preReloc,                 pset);
    peakI1IDist_new.copyData(peakI1IDist);
    std::vector<ParticleVariable<double> > ISVs_new(d_NINSV+1);
    for(int i=0;i<d_NINSV;i++){
      new_dw->allocateAndPut(ISVs_new[i],ISVLabels_preReloc[i], pset);
    }
    for(ParticleSubset::iterator iter = pset->begin();
                                        iter != pset->end(); iter++){
      particleIndex idx = *iter;
      // Assign zero internal heating by default - modify if necessary.
      pdTdt[idx] = 0.0;
      // Calculate rate of deformation D, and deviatoric rate DPrime,
      Matrix3 D = (velGrad[idx] + velGrad[idx].Transpose())*.5;
      
      pLocalized_new[idx]=pLocalized[idx];
      
      // get the volumetric part of the deformation
      double J = deformationGradient_new[idx].Determinant();
      // Check 1: Look at Jacobian
      if (J<=0.0 || J > d_hugeJ) {
          double Jold = deformationGradient[idx].Determinant();
          cout<<"negative or huge J encountered J="<<J<<", Jold = " << Jold << " deleting particle" << endl;
          pLocalized_new[idx]=-999;
          cout<< "localizing (deleting) particle "<<pParticleID[idx]<<endl;
          cout<< "material = " << dwi << endl << "Momentum deleted = "
                                        << pvelocity[idx]*pmass[idx] <<endl;
          D=Matrix3(0.);
      }
      // Compute the local sound speed
      double rho_cur = rho_orig/J;
      // NEED TO FIND R
      Matrix3 tensorR, tensorU;
      //Comment by KC: Computing tensorR at the beginning of the timestep
      deformationGradient[idx].polarDecompositionRMB(tensorU, tensorR);
      // This is the previous timestep Cauchy stress
      // unrotated tensorSig=R^T*pstress*R
      Matrix3 tensorSig = (tensorR.Transpose())*(pstress[idx]*tensorR);
      // Load into 1-D array for the fortran code
      double sigarg[6];
      sigarg[0]=tensorSig(0,0);
      sigarg[1]=tensorSig(1,1);
      sigarg[2]=tensorSig(2,2);
      sigarg[3]=tensorSig(0,1);
      sigarg[4]=tensorSig(1,2);
      sigarg[5]=tensorSig(2,0);
      // UNROTATE D: S=R^T*D*R
      D=(tensorR.Transpose())*(D*tensorR);
      // Load into 1-D array for the fortran code
      double Darray[6];
      Darray[0]=D(0,0);
      Darray[1]=D(1,1);
      Darray[2]=D(2,2);
      Darray[3]=D(0,1);
      Darray[4]=D(1,2);
      Darray[5]=D(2,0);
      double svarg[d_NINSV];
      double USM=9e99;
      double dt = delT;
      int nblk = 1;
      // Load ISVs into a 1D array for fortran code
      for(int i=0;i<d_NINSV;i++){
        svarg[i]=ISVs[i][idx];
      }
      // 'Hijack' FAIL1 = UI[d_TFAIL] with perturbed value if desired
      // put real value of UI[d_TFAIL] in tmp var just in case
      double TFAIL_tmp = UI[d_TFAIL];
      // Scale FAIL1 according to a characteristic particle length
      UI[d_TFAIL]*=cbrt(pvolume_new[idx]);
      if (wdist.Perturb){
        double tempVar = UI[d_PEAKI1I];
        // 'Hijack' PEAKI1I = UI[51] with perturbed value if desired
        // put real value of UI[51] in tmp var just in case
        UI[d_PEAKI1I] = peakI1IDist[idx];
        KAYENTA_UPDATE_STATE(nblk, dt, UI, Darray, sigarg, svarg, USM);
        UI[d_PEAKI1I]=tempVar;
      } else {
        KAYENTA_UPDATE_STATE(nblk, dt, UI, Darray, sigarg, svarg, USM);
      }
      // Put T1 back for now
      UI[d_TFAIL]=TFAIL_tmp;
      // Unload ISVs from 1D array into ISVs_new
      for(int i=0;i<d_NINSV;i++){
        ISVs_new[i][idx]=svarg[i];
      }
      // This is the Cauchy stress, still unrotated
      tensorSig(0,0) = sigarg[0];
      tensorSig(1,1) = sigarg[1];
      tensorSig(2,2) = sigarg[2];
      tensorSig(0,1) = sigarg[3];
      tensorSig(1,0) = sigarg[3];
      tensorSig(2,1) = sigarg[4];
      tensorSig(1,2) = sigarg[4];
      tensorSig(2,0) = sigarg[5];
      tensorSig(0,2) = sigarg[5];
      //Comment by KC : Computing tensorR at the end of the time-step
      deformationGradient_new[idx].polarDecompositionRMB(tensorU,tensorR);
      // ROTATE pstress_new: S=R*tensorSig*R^T
      pstress_new[idx] = (tensorR*tensorSig)*(tensorR.Transpose());
      c_dil = sqrt(USM/rho_cur);
      // Compute The Strain Energy for all the particles
      Matrix3 AvgStress = (pstress_new[idx] + pstress[idx])*.5;
      double e = (D(0,0)*AvgStress(0,0) +
                  D(1,1)*AvgStress(1,1) +
                  D(2,2)*AvgStress(2,2) +
              2.*(D(0,1)*AvgStress(0,1) +
                  D(0,2)*AvgStress(0,2) +
                  D(1,2)*AvgStress(1,2))) * pvolume_new[idx]*delT;
      se += e;
      // Compute wave speed at each particle, store the maximum
      Vector pvelocity_idx = pvelocity[idx];
      WaveSpeed=Vector(Max(c_dil+fabs(pvelocity_idx.x()),WaveSpeed.x()),
                       Max(c_dil+fabs(pvelocity_idx.y()),WaveSpeed.y()),
                       Max(c_dil+fabs(pvelocity_idx.z()),WaveSpeed.z()));
      // Compute artificial viscosity term
      if (flag->d_artificial_viscosity) {
        double dx_ave = (dx.x() + dx.y() + dx.z())/3.0;
        double c_bulk = sqrt(UI[0]/rho_cur);
        p_q[idx] = artificialBulkViscosity(D.Trace(), c_bulk, rho_cur, dx_ave);
      } else {
        p_q[idx] = 0.;
      }
    }  // end loop over particles
    WaveSpeed = dx/WaveSpeed;
    double delT_new = WaveSpeed.minComponent();
    new_dw->put(delt_vartype(delT_new), lb->delTLabel, patch->getLevel());
    if (flag->d_reductionVars->accStrainEnergy ||
        flag->d_reductionVars->strainEnergy) {
      new_dw->put(sum_vartype(se),     lb->StrainEnergyLabel);
    }
  }
}
void Kayenta::carryForward(const PatchSubset* patches,
                           const MPMMaterial* matl,
                           DataWarehouse* old_dw,
                           DataWarehouse* new_dw)
{
  for(int p=0;p<patches->size();p++){
    const Patch* patch = patches->get(p);
    int dwi = matl->getDWIndex();
    ParticleSubset* pset = old_dw->getParticleSubset(dwi, patch);
    constParticleVariable<double> peakI1IDist;
    ParticleVariable<double> peakI1IDist_new;

    old_dw->get(peakI1IDist, peakI1IDistLabel, pset);
    new_dw->allocateAndPut(peakI1IDist_new,
                                 peakI1IDistLabel_preReloc, pset);
    peakI1IDist_new.copyData(peakI1IDist);

    // Carry forward the data common to all constitutive models
    // when using RigidMPM.
    // This method is defined in the ConstitutiveModel base class.
    carryForwardSharedData(pset, old_dw, new_dw, matl);
    // Carry forward the data local to this constitutive model
    std::vector<constParticleVariable<double> > ISVs(d_NINSV+1);
    std::vector<ParticleVariable<double> > ISVs_new(d_NINSV+1);

    for(int i=0;i<d_NINSV;i++){
      old_dw->get(ISVs[i],ISVLabels[i], pset);
      new_dw->allocateAndPut(ISVs_new[i],ISVLabels_preReloc[i], pset);
      ISVs_new[i].copyData(ISVs[i]);
  }

    // Don't affect the strain energy or timestep size
    new_dw->put(delt_vartype(1.e10), lb->delTLabel, patch->getLevel());
    if (flag->d_reductionVars->accStrainEnergy ||
        flag->d_reductionVars->strainEnergy) {
      new_dw->put(sum_vartype(0.),   lb->StrainEnergyLabel);
    }
  }
}
void Kayenta::addInitialComputesAndRequires(Task* task,
                                            const MPMMaterial* matl,
                                            const PatchSet* ) const
{
  // Add the computes and requires that are common to all explicit
  // constitutive models.  The method is defined in the ConstitutiveModel
  // base class.
  const MaterialSubset* matlset = matl->thisMaterial();
  // Other constitutive model and input dependent computes and requires
  for(int i=0;i<d_NINSV;i++){
    task->computes(ISVLabels[i], matlset);
  }
  task->computes(peakI1IDistLabel, matlset);
}
void Kayenta::addComputesAndRequires(Task* task,
                                     const MPMMaterial* matl,
                                     const PatchSet* patches) const
{
  // Add the computes and requires that are common to all explicit
  // constitutive models.  The method is defined in the ConstitutiveModel
  // base class.
  const MaterialSubset* matlset = matl->thisMaterial();
  addSharedCRForHypoExplicit(task, matlset, patches);
  // Computes and requires for internal state data
  for(int i=0;i<d_NINSV;i++){
    task->requires(Task::OldDW, ISVLabels[i],          matlset, Ghost::None);
    task->computes(             ISVLabels_preReloc[i], matlset);
  }
  
  task->requires(Task::OldDW, lb->pLocalizedMPMLabel,   matlset, Ghost::None);
  task->requires(Task::OldDW, peakI1IDistLabel,         matlset, Ghost::None);
  task->requires(Task::OldDW, lb->pParticleIDLabel,     matlset, Ghost::None);
  
  task->computes(peakI1IDistLabel_preReloc,       matlset);
  task->computes(lb->pLocalizedMPMLabel_preReloc, matlset);
}
void Kayenta::addComputesAndRequires(Task*,
                                     const MPMMaterial*,
                                     const PatchSet*,
                                     const bool ) const
{
}
double Kayenta::computeRhoMicroCM(double pressure,
                                  const double p_ref,
                                  const MPMMaterial* matl,
                                  double temperature,
                                  double rho_guess)
{
  double rho_orig = matl->getInitialDensity();
  double p_gauge = pressure - p_ref;
  double rho_cur;
  double bulk = UI[0];
  rho_cur = rho_orig/(1-p_gauge/bulk);
  return rho_cur;
#if 1
  cout << "NO VERSION OF computeRhoMicroCM EXISTS YET FOR Kayenta" << endl;
#endif
}
void Kayenta::computePressEOSCM(double rho_cur, double& pressure,
                                double p_ref,
                                double& dp_drho,      double& tmp,
                                const MPMMaterial* matl,
                                double temperature)
{
  double bulk = UI[0];
  double rho_orig = matl->getInitialDensity();
  double p_g = bulk*(1.0 - rho_orig/rho_cur);
  pressure = p_ref + p_g;
  dp_drho  = bulk*rho_orig/(rho_cur*rho_cur);
  tmp = bulk/rho_cur;  // speed of sound squared
#if 1
  cout << "NO VERSION OF computePressEOSCM EXISTS YET FOR Kayenta" << endl;
#endif
}
double Kayenta::getCompressibility()
{
  return 1.0/UI[0];
}
void
Kayenta::getInputParameters(ProblemSpecP& ps)
{
  ps->require("B0", UI[0]);
  ps->getWithDefault("B1", UI[1],0.0);
  ps->getWithDefault("B2", UI[2],0.0);
  ps->getWithDefault("B3", UI[3],0.0);
  ps->getWithDefault("B4", UI[4],0.0);
  ps->require("G0", UI[5]);
  ps->getWithDefault("G1", UI[6],0.0);
  ps->getWithDefault("G2", UI[7],0.0);
  ps->getWithDefault("G3", UI[8],0.0);
  ps->getWithDefault("G4", UI[9],0.0);
  ps->getWithDefault("RJS", UI[10],0.0);
  ps->getWithDefault("RKS", UI[11],0.0);
  ps->getWithDefault("RKN", UI[12],0.0);
  ps->getWithDefault("A1", UI[13],0.0);
  ps->getWithDefault("A2", UI[14],0.0);
  ps->getWithDefault("A3", UI[15],0.0);
  ps->getWithDefault("A4", UI[16],0.0);
  ps->getWithDefault("P0", UI[17],0.0);
  ps->getWithDefault("P1", UI[18],0.0);
  ps->getWithDefault("P2", UI[19],0.0);
  ps->getWithDefault("P3", UI[20],0.0);
  ps->getWithDefault("CR", UI[21],0.0);
  ps->getWithDefault("RK", UI[22],0.0);
  ps->getWithDefault("RN", UI[23],0.0);
  ps->getWithDefault("HC", UI[24],0.0);
  ps->getWithDefault("CTPSF", UI[25],0.0);
  ps->getWithDefault("CTPS", UI[26],0.0);
  ps->getWithDefault("CTI1", UI[27],0.0);
  ps->getWithDefault("T1", UI[28],0.0);
  ps->getWithDefault("T2", UI[29],0.0);
  ps->getWithDefault("T3", UI[30],0.0);
  ps->getWithDefault("T4", UI[31],0.0);
  ps->getWithDefault("T5", UI[32],0.0);
  ps->getWithDefault("T6", UI[33],0.0);
  ps->getWithDefault("T7", UI[34],0.0);
  ps->getWithDefault("J3TYPE", UI[35],0.0);
  ps->getWithDefault("A2PF", UI[36],0.0);
  ps->getWithDefault("A4PF", UI[37],0.0);
  ps->getWithDefault("CRPF", UI[38],0.0);
  ps->getWithDefault("RKPF", UI[39],0.0);
  ps->getWithDefault("SUBX", UI[40],0.0);
  ps->getWithDefault("DEJAVU", UI[41],0.0);
  ps->getWithDefault("FAIL0", UI[42],0.0);
  ps->getWithDefault("FAIL1", UI[43],0.0);
  ps->getWithDefault("FAIL2", UI[44],0.0);
  ps->getWithDefault("FAIL3", UI[45],0.0);
  ps->getWithDefault("FAIL4", UI[46],0.0);
  ps->getWithDefault("FAIL5", UI[47],0.0);
  ps->getWithDefault("FAIL6", UI[48],0.0);
  ps->getWithDefault("FAIL7", UI[49],0.0);
  ps->getWithDefault("FAIL8", UI[50],0.0);
  ps->getWithDefault("FAIL9", UI[51],0.0);
  ps->getWithDefault("PEAKI1I", UI[52],0.0);
  ps->getWithDefault("STRENI", UI[53],0.0);
  ps->getWithDefault("FSLOPEI", UI[54],0.0);
  ps->getWithDefault("PEAKI1F", UI[55],0.0);
  ps->getWithDefault("STRENF", UI[56],0.0);
  ps->getWithDefault("SOFTENING", UI[57],0.0);
  ps->getWithDefault("FSLOPEF", UI[58],0.0);
  ps->getWithDefault("FAILSTAT", UI[59],0.0);
  ps->getWithDefault("EOSID", UI[60],0.0);
  ps->getWithDefault("DILATLIM", UI[61],0.0);
  ps->getWithDefault("NU", UI[62],0.0);
  ps->getWithDefault("YSLOPEI", UI[63],0.0);
  ps->getWithDefault("YSLOPEF", UI[64],0.0);
  ps->getWithDefault("SPALLI1", UI[65],0.0);
  ps->getWithDefault("FREE08", UI[66],0.0);
  ps->getWithDefault("FREE07", UI[67],0.0);
  ps->getWithDefault("FREE06", UI[68],0.0);
  ps->getWithDefault("FREE05", UI[69],0.0);
  ps->getWithDefault("FREE04", UI[70],0.0);
  ps->getWithDefault("FREE03", UI[71],0.0);
  ps->getWithDefault("FREE02", UI[72],0.0);
  ps->getWithDefault("FREE01", UI[73],0.0);
  ps->getWithDefault("CKN01", UI[74],0.0);
  ps->getWithDefault("CKN02", UI[75],0.0);
  ps->getWithDefault("CKN03", UI[76],0.0);
  ps->getWithDefault("VMAX1", UI[77],0.0);
  ps->getWithDefault("VMAX2", UI[78],0.0);
  ps->getWithDefault("VMAX3", UI[79],0.0);
  ps->getWithDefault("SPACE1", UI[80],0.0);
  ps->getWithDefault("SPACE2", UI[81],0.0);
  ps->getWithDefault("SPACE3", UI[82],0.0);
  ps->getWithDefault("SHRSTIFF1", UI[83],0.0);
  ps->getWithDefault("SHRSTIFF2", UI[84],0.0);
  ps->getWithDefault("SHRSTIFF3", UI[85],0.0);
  ps->getWithDefault("TMPRXP", UI[86],0.0);
  ps->getWithDefault("TM", UI[87],0.0);
  ps->getWithDefault("R0", UI[88],0.0);
  ps->getWithDefault("T0", UI[89],0.0);
  ps->getWithDefault("CS", UI[90],0.0);
  ps->getWithDefault("S1", UI[91],0.0);
  ps->getWithDefault("SR", UI[92],0.0);
  ps->getWithDefault("CV", UI[93],0.0);
  ps->getWithDefault("EOS01", UI[94],0.0);
  ps->getWithDefault("EOS02", UI[95],0.0);
  ps->getWithDefault("EOS03", UI[96],0.0);
  ps->getWithDefault("EOS04", UI[97],0.0);
  ps->getWithDefault("EOS05", UI[98],0.0);
  ps->getWithDefault("EOS06", UI[99],0.0);
  ps->getWithDefault("EOS07", UI[100],0.0);
  ps->getWithDefault("EOS08", UI[101],0.0);
  ps->getWithDefault("EOS09", UI[102],0.0);
  ps->getWithDefault("EOS10", UI[103],0.0);
  ps->getWithDefault("EOS11", UI[104],0.0);
  ps->getWithDefault("EOS12", UI[105],0.0);
  ps->getWithDefault("EOS13", UI[106],0.0);
  ps->getWithDefault("EOS14", UI[107],0.0);
  ps->getWithDefault("EOS15", UI[108],0.0);
  ps->getWithDefault("EOS16", UI[109],0.0);
  ps->getWithDefault("SQA", UI[110],0.0);
  ps->getWithDefault("DC01", UI[111],0.0);
  ps->getWithDefault("DC02", UI[112],0.0);
  ps->getWithDefault("DC03", UI[113],0.0);
  ps->getWithDefault("DC04", UI[114],0.0);
  ps->getWithDefault("DC05", UI[115],0.0);
  ps->getWithDefault("DC06", UI[116],0.0);
  ps->getWithDefault("DC07", UI[117],0.0);
  ps->getWithDefault("DC08", UI[118],0.0);
  ps->getWithDefault("DC09", UI[119],0.0);
  ps->getWithDefault("DC10", UI[120],0.0);
  ps->getWithDefault("DC11", UI[121],0.0);
  ps->getWithDefault("DC12", UI[122],0.0);
  ps->getWithDefault("DC13", UI[123],0.0);
  //    ________________________________________________________________________
  //    Uintah Variability Variables
  ps->get("PEAKI1IDIST",wdist.WeibDist);
  WeibullParser(wdist);
  ps->getWithDefault("hugeJ", d_hugeJ, 20.0);
//  proc0cout << "Weibull Variables for PEAKI1I (getInputParameters):\n"
//            << "Median:            " << wdist.WeibMed
//            << "\nModulus:         " << wdist.WeibMod
//            << "\nReference Vol:   " << wdist.WeibRefVol
//            << "\nSeed:            " << wdist.WeibSeed << std::endl;
}
void
Kayenta::initializeLocalMPMLabels()
{
 
 vector<string> ISVNames;
// These lines of code are added by KC to replace the currently hard-coded
// internal variable allocation with a proper call to KMMRXV routine.
//Create VarLabels for Kayenta internal state variables (ISVs)
  int nx;
  char namea[5000];
  char keya[5000];
  double xinit[100];
  double rdim[700];
  int iadvct[100];
  int itype[100];
  KAYENTA_REQUEST_XTRA_VARS( UI, nx, namea, keya, xinit, rdim, iadvct, itype );
  char *ISV[d_NINSV];
  ISV[0] = strtok(keya, "|"); // Splits | between words in string
  ISVNames.push_back(ISV[0]);
  proc0cout << "ISV[" << 0 << "] is called " << ISVNames[0] << endl;
  for(int i = 1; i < d_NINSV ; i++) {
// If you specify nullptr, by default it will start again from the previous stop.
     ISV[i] = strtok (nullptr, "|");
     ISVNames.push_back(ISV[i]);
     proc0cout << "ISV[" << i << "] is called " << ISVNames[i] << endl;
  }
// Code ends here.KC
  for(int i=0;i<d_NINSV;i++){
    ISVLabels.push_back(VarLabel::create(ISVNames[i],
                          ParticleVariable<double>::getTypeDescription()));
    ISVLabels_preReloc.push_back(VarLabel::create(ISVNames[i]+"+",
                          ParticleVariable<double>::getTypeDescription()));
  }
  peakI1IDistLabel = VarLabel::create("peakI1IDist",
                     ParticleVariable<double>::getTypeDescription());
  peakI1IDistLabel_preReloc = VarLabel::create("peakI1IDist+",
                     ParticleVariable<double>::getTypeDescription());
}
// Weibull input parser that accepts a structure of input
// parameters defined as:
//
// bool Perturb        'True' for perturbed parameter
// double WeibMed       Medain distrib. value OR const value
//                         depending on bool Perturb
// double WeibMod       Weibull modulus
// double WeibRefVol    Reference Volume
// int    WeibSeed      Seed for random number generator
// std::string WeibDist  String for Distribution
//
// the string 'WeibDist' accepts strings of the following form
// when a perturbed value is desired:
//
// --Distribution--|-Median-|-Modulus-|-Reference Vol -|- Seed -|
// "    weibull,      45e6,      4,        0.0001,          0"
//
// or simply a number if no perturbed value is desired.
void
Kayenta::WeibullParser(WeibParameters &iP)
{
  // Remove all unneeded characters
  // only remaining are alphanumeric '.' and ','
  for ( int i = iP.WeibDist.length()-1; i >= 0; i--) {
    iP.WeibDist[i] = tolower(iP.WeibDist[i]);
    if ( !isalnum(iP.WeibDist[i]) &&
       iP.WeibDist[i] != '.' &&
       iP.WeibDist[i] != ',' &&
       iP.WeibDist[i] != '-' &&
       iP.WeibDist[i] != EOF) {
         iP.WeibDist.erase(i,1);
    }
  } // End for
  if (iP.WeibDist.substr(0,4) == "weib") {
    iP.Perturb = true;
  } else {
    iP.Perturb = false;
  }
  // ######
  // If perturbation is NOT desired
  // ######
  if ( !iP.Perturb ) {
    bool escape = false;
    int num_of_e = 0;
    int num_of_periods = 0;
    for ( unsigned int i = 0; i < iP.WeibDist.length(); i++) {
      if ( iP.WeibDist[i] != '.'
           && iP.WeibDist[i] != 'e'
           && iP.WeibDist[i] != '-'
           && !isdigit(iP.WeibDist[i]) ) escape = true;
      if ( iP.WeibDist[i] == 'e' ) num_of_e += 1;
      if ( iP.WeibDist[i] == '.' ) num_of_periods += 1;
      if ( num_of_e > 1 || num_of_periods > 1 || escape ) {
        std::cerr << "\n\nERROR:\nInput value cannot be parsed. Please\n"
                     "check your input values.\n" << std::endl;
        exit (1);
      }
    } // end for(int i = 0;....)
    if ( escape ) exit (1);
    iP.WeibMed  = atof(iP.WeibDist.c_str());
  }
  // ######
  // If perturbation IS desired
  // ######
  if ( iP.Perturb ) {
    int weibValues[4];
    int weibValuesCounter = 0;
    for ( unsigned int r = 0; r < iP.WeibDist.length(); r++) {
      if ( iP.WeibDist[r] == ',' ) {
        weibValues[weibValuesCounter] = r;
        weibValuesCounter += 1;
      } // end if(iP.WeibDist[r] == ',')
    } // end for(int r = 0; ...... )
    if (weibValuesCounter != 4) {
      std::cerr << "\n\nERROR:\nWeibull perturbed input string must contain\n"
                   "exactly 4 commas. Verify that your input string is\n"
                   "of the form 'weibull, 45e6, 4, 0.001, 1'.\n" << std::endl;
      exit (1);
    } // end if(weibValuesCounter != 4)
    std::string weibMedian;
    std::string weibModulus;
    std::string weibRefVol;
    std::string weibSeed;
    weibMedian  = iP.WeibDist.substr(weibValues[0]+1,weibValues[1]-weibValues[0]-1);
    weibModulus = iP.WeibDist.substr(weibValues[1]+1,weibValues[2]-weibValues[1]-1);
    weibRefVol  = iP.WeibDist.substr(weibValues[2]+1,weibValues[3]-weibValues[2]-1);
    weibSeed    = iP.WeibDist.substr(weibValues[3]+1);
    iP.WeibMed    = atof(weibMedian.c_str());
    iP.WeibMod    = atof(weibModulus.c_str());
    iP.WeibRefVol = atof(weibRefVol.c_str());
    iP.WeibSeed   = atoi(weibSeed.c_str());
    UI[d_PEAKI1I]=iP.WeibMed;  // Set this here to satisfy KAYENTA_CHK
  } // End if (iP.Perturb)
}
