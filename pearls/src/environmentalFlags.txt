This file contains the name of environmental variables that can be set

Set these like this:
 -> tcsh: setenv SCI_DEBUG ExecTimes:+
 -> bash: export SCI_DEBUG=ExecTimes:+

Name              type               Description
______________________________________________________________________

ExecTimes         SCI_DEBUG     Outputs the time for execution on each task
                                NOTE: TaskExecTimes are: 
                                         1) Represented in seconds
                                         2) Cumulative over 10*floor(MaxTimeSteps/10) timesteps
                                        3a) Cumulative over nthreads when using the UnifiedScheduler
                                        3b) Cumulative over nthreads-1 when using the ThreadedMPIScheduler
                                To view the top 10 tasks use:
                                sort -t: -k 2 -k 3 -g -r exectimes.?.? | head
                                To get a summary of all exectimes files run the script src/scripts/execsummary
                                NOTE: This only works with MPI and you must run your input file for more than 10 timesteps
                                
ReductionTasks    SCI_DEBUG     outputs a message on processor 0 whenever a reduction task occurs.
RELOCATE_DBG      SCI_DEBUG     prints out debugging information in the code that finds the neighboring
                                patches inside of particle relocation task.
AMR               SCI_DEBUG     prints out the patch layout
AMR_CoarsenRefine SCI_DEBUG     prints out debugging information for coarsening and refining operations
TaskDBG           SCI_DEBUG     output the name of each task as it begins executing and when it's completed
TaskLevel         SCI_DEBUG     output the task name and beginning patch on each level after the 
                                task has completed.
TaskGraph         SCI_DEBUG     prints out computes and requires for every task
TaskGraphDetailed SCI_DEBUG     prints out internal details of computes and requires for every task
WaitForDebugger   SCI_DEBUG     when an exception is thrown halt the program and print out
                                the pid so you can attach a debugger to it.
OnDemandDataWarehouse           outputs when a variable is retrieved or put into the data warehouse.
VarLabel                        List when a VarLabel is created and deleted
ComponentTimings  SCI_DEBUG     output overall mpi and cpu times
BCR_dbg           SCI_DEBUG     print out some information regarding the BC setup


Schedulers:                              NOTE: The default is "MPI" without threads and "ThreadedMPI" with threads.
                                               These flags invoke specific schedulers and are semantically equivalent to
                                               adding a <Scheduler> section to an input file.
__________________________________
SingleProcessorScheduler   SCI_DEBUG     Use SingleProcessorScheduler (Static task ordering and deterministic execution without MPI.)
DynamicMPIScheduler        SCI_DEBUG     Use DynamicMPIScheduler - uses out-of-order task execution (1 MPI process per CPU core)
UnifiedScheduler           SCI_DEBUG     Use Multi-threaded Unified w/ GPU support - uses out-of-order, multi-threaded task execution
                                            (1 MPI process per multi-core node; Pthreads created to execute tasks on individual cores)
                                            NOTE: This scheduler is EXPERIMENTAL and under active development.


Scheduler Debugging Information:
__________________________________
MPIScheduler_DBG           SCI_DEBUG     Prints general debugging information for the MPIScheduler
WaitTimes                  SCI_DEBUG     Outputs fine-grained MPI wait time to file per rank, e.g. waittimes.<comm_size>.<rank>


DynamicMPIScheduler Related:
__________________________________
DynamicMPI_DBG             SCI_DEBUG     Prints general debugging information
DynamicMPI_TimingsOut      SCI_DEBUG     Outputs fine-grained communication timings to file per rank (e.g. MPI recv time, MPI send time, etc)
                                           e.g. timingStats.<rank>, timingStats.<rank>.avg, timingStats.<rank>.max
DynamicMPI_QueueLength     SCI_DEBUG     Prints the average task queue length


ThreadedMPIScheduler Related:
__________________________________
ThreadedMPI_DBG                  SCI_DEBUG     Prints general debugging information
ThreadedMPI_TimingsOut           SCI_DEBUG     Outputs fine-grained communication timings to file per rank (e.g. MPI recv time, MPI send time, etc)
                                                 e.g. timingStats.<rank>, timingStats.<rank>.avg, timingStats.<rank>.max
ThreadedMPI_QueueLength          SCI_DEBUG     Prints the average task queue length
ThreadedMPI_ThreadDBG            SCI_DEBUG     Prints thread pinning information
ThreadedMPI_CompactAffinity      SCI_DEBUG     Modeled after OpenMP's compact affinity, this affinity pattern binds task execution threads
                                               incrementally across logical cores 0 through nThreads-2. The logical core corresponding
                                               to the value of nThreads-1 is reserved for the control thread.
                                                 NOTE 1: This is ENABLED by default. To run simulations with no affinity, explicitly
                                                         disable this environmental flag by setting it with a "-" as opposed to a "+"
                                                 NOTE 2: This affinity pattern corresponds to the host-side implementation of the Compact
                                                         affinity pattern described within the High Performance Parallelism Pearls chapter
ThreadedMPI_ScatterAffinity      SCI_DEBUG     Modeled after OpenMP's scatter affinity, this affinity pattern binds task execution threads
                                               incrementally across physical cores 1 through 8 first and then across logical cores for
                                               logical cores 0 through nThreads-2. The logical core corresponding to the value of nThreads-1
                                               is reserved for the control thread.
                                                 NOTE: This affinity pattern corresponds to the host-side implementation of the Scatter
                                                       affinity pattern described within the High Performance Parallelism Pearls chapter.
ThreadedMPI_SelectiveAffinity    SCI_DEBUG     This affinity pattern allows task execution threads to run anywhere among logical cores 0
                                               through nThreads-2. The logical core corresponding to the value of nThreads-1 is reserved
                                               for the control thread.
                                                 NOTE: This affinity pattern corresponds to the host-side implementation of the Selective
                                                       affinity described within the High Performance Parallelism Pearls chapter.
ThreadedMPI_MICCompactAffinity2t   SCI_DEBUG   Modeled after OpenMP's compact affinity with KMP_PLACE_THREADS=61c,2t, this affinity pattern
                                               binds task execution threads incrementally across logical cores 1 through 2 and then across
                                               physical cores 1 through 61. 
                                                 NOTE 1: This affinity pattern corresponds to the coprocessor-side implementation of the 
                                                         Compact affinity described within the High Performance Parallelism Pearls chapter.
                                                 NOTE 2: nThreads = 120 results in the control thread being bound to logical core 238.
                                                         nThreads = 121 results in the control thread being bound to logical core 241.
                                                         nThreads = 122 results in the control thread being bound to logical core 242.
ThreadedMPI_MICCompactAffinity3t   SCI_DEBUG   Modeled after OpenMP's compact affinity with KMP_PLACE_THREADS=61c,3t, this affinity pattern
                                               binds task execution threads incrementally across logical cores 1 through 3 and then across
                                               physical cores 1 through 61. 
                                                 NOTE 1: This affinity pattern corresponds to the coprocessor-side implementation of the 
                                                         Compact affinity described within the High Performance Parallelism Pearls chapter.
                                                 NOTE 2: nThreads = 180 results in the control thread being bound to logical core 239.
                                                         nThreads = 181 results in the control thread being bound to logical core 241.
                                                         nThreads = 182 results in the control thread being bound to logical core 242.
                                                         nThreads = 183 results in the control thread being bound to logical core 243.
ThreadedMPI_MICCompactAffinity4t   SCI_DEBUG   Modeled after OpenMP's compact affinity with KMP_PLACE_THREADS=61c,4t, this affinity pattern
                                               binds task execution threads incrementally across logical cores 1 through 4 and then across
                                               physical cores 1 through 61. 
                                                 NOTE 1: This affinity pattern corresponds to the coprocessor-side implementation of the 
                                                         Compact affinity described within the High Performance Parallelism Pearls chapter.
                                                 NOTE 2: nThreads = 240 results in the control thread being bound to logical core 240.
                                                         nThreads = 241 results in the control thread being bound to logical core 241.
                                                         nThreads = 242 results in the control thread being bound to logical core 242.
                                                         nThreads = 243 results in the control thread being bound to logical core 243.
                                                         nThreads = 244 results in the control thread being bound to logical core 0.
ThreadedMPI_MICScatterAffinity   SCI_DEBUG     Modeled after OpenMP's scatter affinity, this affinity pattern binds task execution threads
                                               incrementally across physical cores 1 through 60 first and then across logical cores for
                                               logical cores 1 through nThreads-1.
                                                 NOTE 1: This affinity pattern corresponds to the coprocessor-side implementation of the
                                                         Scatter affinity pattern described within the High Performance Parallelism Pearls
                                                         chapter.
                                                 NOTE 2: nThreads = 120 results in the control thread being bound to logical core 238.
                                                         nThreads = 121 results in the control thread being bound to logical core 241.
                                                         nThreads = 122 results in the control thread being bound to logical core 242.
                                                         nThreads = 180 results in the control thread being bound to logical core 239.
                                                         nThreads = 181 results in the control thread being bound to logical core 241.
                                                         nThreads = 182 results in the control thread being bound to logical core 242.
                                                         nThreads = 183 results in the control thread being bound to logical core 243.
                                                         nThreads = 240 results in the control thread being bound to logical core 240.
                                                         nThreads = 241 results in the control thread being bound to logical core 241.
                                                         nThreads = 242 results in the control thread being bound to logical core 242.
                                                         nThreads = 243 results in the control thread being bound to logical core 243.
                                                         nThreads = 244 results in the control thread being bound to logical core 0.
ThreadedMPI_MICSelectiveAffinity SCI_DEBUG     This affinity pattern allows task execution threads to run anywhere among logical cores 1
                                               through either 240, 241, 242, 243, 244, or 0.
                                                 NOTE 1: This affinity pattern corresponds to the coprocessor-side implementation of the 
                                                         Selective affinity described within the High Performance Parallelism Pearls
                                                         chapter.
                                                 NOTE 2: nThreads = 120 results in the control thread being bound to logical core 240.
                                                         nThreads = 121 results in the control thread being bound to logical core 241.
                                                         nThreads = 122 results in the control thread being bound to logical core 242.
                                                         nThreads = 180 results in the control thread being bound to logical core 240.
                                                         nThreads = 181 results in the control thread being bound to logical core 241.
                                                         nThreads = 182 results in the control thread being bound to logical core 242.
                                                         nThreads = 183 results in the control thread being bound to logical core 243.
                                                         nThreads = 240 results in the control thread being bound to logical core 240.
                                                         nThreads = 241 results in the control thread being bound to logical core 241.
                                                         nThreads = 242 results in the control thread being bound to logical core 242.
                                                         nThreads = 243 results in the control thread being bound to logical core 243.
                                                         nThreads = 244 results in the control thread being bound to logical core 0.


UnifiedScheduler Related:
__________________________________
Unified_DBG                  SCI_DEBUG     Prints general debugging information
Unified_TimingsOut           SCI_DEBUG     Outputs fine-grained communication timings to file per rank (e.g. MPI recv time, MPI send time, etc)
                                             e.g. timingStats.<rank>, timingStats.<rank>.avg, timingStats.<rank>.max
Unified_QueueLength          SCI_DEBUG     Prints the average task queue length
Unified_ThreadDBG            SCI_DEBUG     Prints thread pinning information
Unified_CompactAffinity      SCI_DEBUG     Modeled after OpenMP's compact affinity, this affinity pattern binds task execution threads
                                           incrementally across logical cores 0 through nThreads-2. The logical core corresponding
                                           to the value of nThreads-1 is reserved for the main thread.
                                             NOTE 1: This is ENABLED by default. To run simulations with no affinity, explicitly
                                                     disable this environmental flag by setting it with a "-" as opposed to a "+"
                                             NOTE 2: This affinity pattern corresponds to the host-side implementation of the Compact
                                                     affinity pattern described within the High Performance Parallelism Pearls chapter.
Unified_ScatterAffinity      SCI_DEBUG     Modeled after OpenMP's scatter affinity, this affinity pattern binds task execution threads
                                           incrementally across physical cores 1 through 8 first and then across logical cores for
                                           logical cores 0 through nThreads-2. The logical core corresponding to the value of nThreads-1
                                           is reserved for the main thread.
                                             NOTE: This affinity pattern corresponds to the host-side implementation of the Scatter
                                                   affinity pattern described within the High Performance Parallelism Pearls chapter.
Unified_SelectiveAffinity    SCI_DEBUG    This affinity pattern allows task execution threads to run anywhere among logical cores 0
                                          through nThreads-2. The logical core corresponding to the value of nThreads-1 is reserved
                                          for the main thread.
                                          NOTE: This affinity pattern corresponds to the host-side implementation of the Selective
                                                affinity described within the High Performance Parallelism Pearls chapter.
Unified_MICCompactAffinity   SCI_DEBUG    Modeled after OpenMP's compact affinity, this affinity pattern binds task execution threads
                                          incrementally across logical cores 1 through nThreads-1. The logical core corresponding
                                          to the value of nThreads is reserved for the main thread.
                                            NOTE1 : This affinity pattern corresponds to the coprocessor-side implementation of the Compact
                                                    affinity described within the High Performance Parallelism Pearls chapter.
                                            NOTE 2: nThreads = 244 results in the main thread being bound to logical core 0.
Unified_MICScatterAffinity   SCI_DEBUG    Modeled after OpenMP's scatter affinity, this affinity pattern binds task execution threads
                                          incrementally across physical cores 1 through 60 first and then across logical cores for
                                          logical cores 1 through nThreads-1. The logical core corresponding to the value of nThreads
                                          is reserved for the main thread.
                                            NOTE 1: This affinity pattern corresponds to the coprocessor-side implementation of the Scatter
                                                    affinity pattern described within the High Performance Parallelism Pearls chapter.
                                            NOTE 2: nThreads = 244 results in the main thread being bound to logical core 0.
Unified_MICSelectiveAffinity SCI_DEBUG    This affinity pattern allows task execution threads to run anywhere among logical cores 1
                                          through	nThreads-1. The logical core corresponding to the value of nThreads is reserved
                                          for the main thread.
                                            NOTE 1: This affinity pattern corresponds to the coprocessor-side implementation of the Selective
                                                    affinity described within the High Performance Parallelism Pearls chapter.
                                            NOTE 2: nThreads = 244 results in the main thread being bound to logical core 0.


GPU Related:
__________________________________
SingleDevice      SCI_DEBUG     Restrict GPU usage to a "single" GPU, device 0. The default is to use all
                                available on-node GPUs, where tasks are assigned to GPUs in a round-robin fashion.
GPUStats          SCI_DEBUG     Reports detailed GPU statistics from within the UnififedScheudler on "host-->device"
                                and "device-->host" data movement.
GPUDataWarehouse  SCI_DEBUG     Reports detailed statistics from within the GPUDW on GPUDataWarehouse activity.


ICE:
__________________________________
ICE_DOING_COUT    SCI_DEBUG     Outputs the name of each task as it's being     
                                scheduled and executed.
ICE_BC_CC         SCI_DEBUG     output boundary condition debugging information for
                                Cell-centered variables.                         
ICE_BC_FC         SCI_DEBUG     output boundary condition debugging information for
                                Face-centered variables. 
DBG_EqPress       SCI_DEBUG     Output debugging information about the iteration
                                process in computeEquilibration if an exception is thrown.


ARCHES:
__________________________________
ARCHES_PRESS_SOLVE SCI_DEBUG    Outputs the name of each task in the pressure solveras it's being     
                                scheduled and executed.


MPM:
__________________________________
MPM               SCI_DEBUG     Outputs the name of each task as it's being     
                                scheduled and executed. 


MPMICE:
__________________________________
MPMICE_DOING_COUT SCI_DEBUG     Outputs the name of each task as it's being  
                                scheduled and executed. 
DBG_EqPress       SCI_DEBUG     Output debugging information if computeEquilibration throws
                                an exception.


WASATCH:
__________________________________
WASATCH_TASKS       SCI_DEBUG   Outputs Wasatch task diagnostics. See TaskInterface.cc
WASATCH_FIELDS      SCI_DEBUG   Outputs information on Wasatch registered fields. See TaskInterface.cc
WASATCH_REDUCTIONS 	SCI_DEBUG   Information about Wasatch's reduction tasks and related expressions. See ReductionBase.cc
WASATCH_QMOM_DBG    SCI_DEBUG   Outputs full matrices that are constructed during the product difference algorithm, and warning for moment reduction
