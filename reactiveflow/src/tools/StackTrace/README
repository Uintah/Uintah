
Note: StackTrace is compiled on the 'src' side of the tree (as opposed
to the binary tree where most everything else is compiled).  The
reason for this is that it should not be compiled using the same
compiler as the rest of the code.To build, just type 'make' in this
source directory.

The StackTrace program was written to take a stacktrace that includes
addresses by not function names and find the corresponding function
names.

StackTrace requires a current symbol list of the program in question.
This list MUST be sorted and can be produced in the following manner:

> nm sus | grep -v "      U " | grep -v "       w " | pgdecode | sort > sus.symbols.sorted

[Note: pgdecode is a symbol demangler (like c++filt) for the PGI compiler.]

FYI, StackTrace is to be compiled and run on a linux box.
However, in test mode (#define DO_TESTING),
it can be compiled for and run on the compute nodes to show that a
valid stack trace can be generated there.

-----------------------------------------

- Running StackTrace

To run StackTrace, you need to provide it two arguments.  1) The
symbol file (sorted), and 2) a file containing the stack trace you
want displayed with function names.

The stacktrace file should look like this:

0: ./StackTrace [0x4016dd]
1: ./StackTrace [0x4019ef]
2: ./StackTrace [0x401a02]
3: ./StackTrace [0x401e17]
4: /lib64/tls/libc.so.6(__libc_start_main+0xfd) [0x2a95ac9acd]
5: ./StackTrace(_ZNSt24__default_alloc_templateILb1ELi0EE10deallocateEPvm+0x42) [0x400f8a]

(The very minimum that is required is a hex number within []'s:
[0x4016dd]
If the stack trace does not look like this, then the
StackTrace program most likely will seg fault.)

