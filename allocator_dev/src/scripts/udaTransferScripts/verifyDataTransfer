#! /bin/csh
#
#.......................................................................
# verifyDataTransfer <num Processors> < localDirectory> <login@Machine>:<remote dir>
# This script is uses rsync to verify that all the data transferred with 
# the pscp2 script is all there on the remote machine
# You must be able to ssh onto the remote machine without a password
# or it won't work.
#.......................................................................
#echo $argv
#
#------------------
# unalias commands
unalias ssh
unalias cd
unalias rsync

#------------------
# on purple use gnu commands
set machine = `hostname | tr -d '[0-9]'`
if ( $machine == "up" ) then
  setenv PATH  /usr/local/gnu/bin:$PATH
endif

#------------------
# error checking
if ($#argv != 3) then
  echo ""
  echo " verifyDataTransfer < number of Processors>  < local dir to be copied> <login@Remote Machine>:<remote dir>"
  echo " "
  echo "      This script looks for differences between the local and remote copy of data.  If it detects a difference it"
  echo "      copies the data from the local to remote machine"
  echo ""
  echo " WARNING:"
  echo "      This script assumes that the local data is 'good' and the remote data is 'suspect'"
  echo "      If you've modified the index.xml or some other file on the remote machine it will replace it with the local copy" 
  echo ""
  exit
endif

set verifierDir   = `dirname $0`
set nproc         = $argv[1]
set localDir      = $argv[2]
set string        = $argv[3]
set remote_machine = `echo $string |cut -d\@ -f2 | cut -d\: -f1`
set user_test      = `echo $string |cut  -s -d\@ -f1`

if ( $user_test == ""   ) then
  set user_test = $USER
endif

setenv LOGIN              $user_test@$remote_machine
setenv REMOTEDIR_TMP      `echo $string |cut -d\: -f2`
setenv LOCALDIR           $localDir
setenv REMOTEDIR          $REMOTEDIR_TMP/$LOCALDIR/
setenv PSCP_FILES         /tmp/pscp_files_`basename $localDir`_`whoami`

echo "login:       $LOGIN"
echo "nprocessors: $nproc"
echo "localDir:    $localDir"
echo "remoteDir:   $REMOTEDIR"
echo "pscp_files:  $PSCP_FILES"

#------------------
# Bulletproofing
echo "_____________________________________"
echo "Bullet proof tests"

echo "  Test: does the local folder ($localDir) exist"
if ( ! -e $localDir ) then
  echo " ERROR: local directory $localDir doesn't exist"
  exit
endif

echo "  Test: passwordless access."
set test = `ssh -x $LOGIN "echo 'password_access_works'"`
if ( $test != "password_access_works" ) then
  echo " ERROR:  passwordless access is not working."
  echo "         You must be able to login into the $remote_machine without a password for this script to work"
  exit
endif

echo "  Test: Do we know about the remote operating system"
set OS = `ssh -x $LOGIN uname`
if ( $OS == "IRIX64" ) then
  echo " ERROR: this script only works on Linux machines"
  exit
endif


echo "  Test: does $REMOTEDIR exists on the remote machine"
set test = `ssh -x $LOGIN "if(-e $REMOTEDIR_TMP/$localDir) echo true"`
if ( $test != "true") then
  echo " ERROR:  the remote directory $REMOTEDIR_TMP/$localDir does not exist"
  echo "         Are you sure you typed it in correctly?"
  exit
endif

echo "_____________________________________"
#--------------------------------------------------------------------------
# Now do the work
echo "Now removing stamp directory"
/bin/rm -rf stamp

cd $localDir

#-------------------------------
# make a sorted list of files / directories to test
# let the user edit that file with vi
/bin/rm -f $PSCP_FILES

set FIND = find
if( `uname` == "AIX" ) then
   set FIND = /usr/local/gnu/bin/find
endif

$FIND . -maxdepth 1 -type f             -exec basename {} \; > $PSCP_FILES
$FIND . -maxdepth 1 -name "t*" -type d  -exec basename {} \; | sort -r >> $PSCP_FILES
$FIND -maxdepth 2 -path './checkpoints/*'  >> $PSCP_FILES
# remove ./ in front of ./checkpoints/....
cp $PSCP_FILES $PSCP_FILES.2
sed s/"\.\/"/""/g < $PSCP_FILES.2 >& $PSCP_FILES
/bin/rm $PSCP_FILES.2

if ( ! $?EDITOR ) then
  echo
  echo WARNING: \$EDITOR is not defined... defaulting to 'vi'
  echo "And 'vi' sometimes doesn't work well..."
  set EDITOR = vi
endif

echo "Now starting an editor in a separate xterm:  Add/remove the files or directories you want verified to the following list"
xterm -bg "DarkSlateGray" -fg "orange" -e $EDITOR $PSCP_FILES
chmod ug+rw $PSCP_FILES

/usr/bin/time -p gmake -f $verifierDir/dataVerify_driver -j $nproc
