/******************************************************************************
                                  WARNING
This file was automatically generated by the Kayenta release scripts. DO NOT
EDIT IT DIRECTLY. WHATEVER CHANGES THAT ARE MADE WILL BE LOST THE NEXT TIME
THE KAYENTA RELEASE SCRIPTS ARE RUN. If changes to this file are deemed
necessary, please contact the Kayenta developers so that the changes can be
made.
******************************************************************************/
/*
 * The MIT License
 *
 * Copyright (c) 1997-2017 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
//  Kayenta.h 
//  class ConstitutiveModel ConstitutiveModel data type -- 3D - 
//  This is for calling the Kayenta model
//  Features:
//  Usage:
#ifndef __KAYENTA_H__
#define __KAYENTA_H__
#include <cmath>
#include "ConstitutiveModel.h"  
#include <Core/Math/Matrix3.h>
#include <vector>
#include <Core/Grid/Variables/VarLabel.h>
namespace Uintah {
  class MPMFlags;
  class Kayenta : public ConstitutiveModel {
  public:
    // For usage instructions, see the 'WeibullParser' function
    // header in Kayenta.cc
    struct WeibParameters {
      bool Perturb;           // 'True' for perturbed parameter
      double WeibMed;         // Medain distrib. value OR const value depending on bool Perturb
      int    WeibSeed;        // seed for random number generator
      double WeibMod;         // Weibull modulus
      double WeibRefVol;      // Reference Volume
      std::string WeibDist;   // String for Distribution
    };
    int d_NKMMPROP;
    int d_NINSV;
    static int const d_B0 = 0; // Initial intact elastic bulk modulus
    static int const d_G0 = 5; // Initial intact elastic shear modulus
    static int const d_TFAIL = 42; // tenth failure parameter
    static int const d_PEAKI1I = 52; // Peak I1 hydrostatic tension strength
    static int const d_R0 = 88; //  initial density
    static int const d_T0 = 89; //  initial temperature
    static int const d_CS = 90; //  initial soundspeed
    static int const d_CV = 93; //  specific heat
    enum KAYENTA_UI {
      B0, B1, B2, B3, B4, G0, G1, G2, G3, G4, RJS, RKS, RKN, A1, A2, A3, A4, P0,
      P1, P2, P3, CR, RK, RN, HC, CTPSF, CTPS, CTI1, T1, T2, T3, T4, T5, T6, T7,
      J3TYPE, A2PF, A4PF, CRPF, RKPF, SUBX, DEJAVU, FAIL0, FAIL1, FAIL2, FAIL3,
      FAIL4, FAIL5, FAIL6, FAIL7, FAIL8, FAIL9, PEAKI1I, STRENI, FSLOPEI,
      PEAKI1F, STRENF, SOFTENING, FSLOPEF, FAILSTAT, EOSID, DILATLIM, NU,
      YSLOPEI, YSLOPEF, SPALLI1, FREE08, FREE07, FREE06, FREE05, FREE04, FREE03,
      FREE02, FREE01, CKN01, CKN02, CKN03, VMAX1, VMAX2, VMAX3, SPACE1, SPACE2,
      SPACE3, SHRSTIFF1, SHRSTIFF2, SHRSTIFF3, TMPRXP, TM, R0, T0, CS, S1, SR,
      CV, EOS01, EOS02, EOS03, EOS04, EOS05, EOS06, EOS07, EOS08, EOS09, EOS10,
      EOS11, EOS12, EOS13, EOS14, EOS15, EOS16, SQA, DC01, DC02, DC03, DC04,
      DC05, DC06, DC07, DC08, DC09, DC10, DC11, DC12, DC13, NUM_KAYENTA_PROPS
    };
    enum KAYENTA_EX {
      KKAPPA, KINDEX, KEQDOT, KI1, KROOTJ2, KALXX, KALYY, KALZZ, KALXY, KALYZ,
      KALZX, KGFUN, KEQPS, KEQPV, KEL0, KHK, KEVOL, KBACKRN, KCRACK, KSHEAR,
      KYIELD, KLODE, KQSSIGXX, KQSSIGYY, KQSSIGZZ, KQSSIGXY, KQSSIGYZ, KQSSIGZX,
      KDCSP, KQSEL, KQSBSXX, KQSBSYY, KQSBSZZ, KQSBSXY, KQSBSYZ, KQSBSZX,
      KTGROW, KCOHER, KTMPR, KSNDSP, KRHO, KENRGY, KBMOD, KSMOD, KPEOS, KVOID,
      KDPDR, KACCSTRAIN, KTGROWCTPS, KCOHERCTPS, KJNTOPN1, KJNTOPN2, KJNTOPN3,
      KELNUM, NUM_KAYENTA_XV
    };
    double UI[130];
    double xinit[200];
    double d_hugeJ;
    // weibull parameter set
    WeibParameters wdist;
    std::vector<const VarLabel*> ISVLabels;
    std::vector<const VarLabel*> ISVLabels_preReloc;
    const VarLabel* peakI1IDistLabel;
    const VarLabel* peakI1IDistLabel_preReloc;
     
  protected:
    bool   d_allowNoTension;
    bool   d_removeMass;
  private:
    // Prevent copying of this class
    // copy constructor
    Kayenta& operator=(const Kayenta &cm);
    void getInputParameters(ProblemSpecP& ps);
    void initializeLocalMPMLabels();
  public:
    // constructors
    Kayenta(ProblemSpecP& ps, MPMFlags* flag);
    //Kayenta(const Kayenta* cm);
    // destructor
    virtual ~Kayenta();
    virtual void outputProblemSpec(ProblemSpecP& ps,bool output_cm_tag = true);
    // clone
    Kayenta* clone();

    // compute stable timestep for this patch
    virtual void computeStableTimestep(const Patch* patch,
                                       const MPMMaterial* matl,
                                       DataWarehouse* new_dw);
    // compute stress at each particle in the patch
    virtual void computeStressTensor(const PatchSubset* patches,
                                     const MPMMaterial* matl,
                                     DataWarehouse* old_dw,
                                     DataWarehouse* new_dw);
    // carry forward CM data for RigidMPM
    virtual void carryForward(const PatchSubset* patches,
                              const MPMMaterial* matl,
                              DataWarehouse* old_dw,
                              DataWarehouse* new_dw);
    // initialize  each particle's constitutive model data
    virtual void initializeCMData(const Patch* patch,
                                  const MPMMaterial* matl,
                                  DataWarehouse* new_dw);
    virtual void addInitialComputesAndRequires(Task* task,
                                               const MPMMaterial* matl,
                                               const PatchSet* patches) const;
    virtual void addComputesAndRequires(Task* task,
                                        const MPMMaterial* matl,
                                        const PatchSet* patches) const;
    virtual void addComputesAndRequires(Task* task,
                                        const MPMMaterial* matl,
                                        const PatchSet* patches,
                                        const bool recursion) const;
    virtual double computeRhoMicroCM(double pressure,
                                     const double p_ref,
                                     const MPMMaterial* matl,
                                     double temperature,
                                     double rho_guess);
    virtual void computePressEOSCM(double rho_m, double& press_eos,
                                   double p_ref,
                                   double& dp_drho, double& ss_new,
                                   const MPMMaterial* matl, 
                                   double temperature);
    virtual double getCompressibility();
    virtual void addParticleState(std::vector<const VarLabel*>& from,
                                  std::vector<const VarLabel*>& to);
    // Weibull input parser that accepts a structure of input
    // parameters defined as:
    //
    // bool Perturb        'True' for perturbed parameter
    // double WeibMed       Medain distrib. value OR const value
    //                         depending on bool Perturb
    // double WeibMod       Weibull modulus
    // double WeibScale     Scale parameter
    // std::string WeibDist  String for Distribution
    virtual void WeibullParser(WeibParameters &iP);
    virtual void viscousStressUpdate(Matrix3& D, const Matrix3& old_stress, double& rho_orig,const double& old_volume, double& bulk, double& viscosity, double& delT,Matrix3& new_stress, Matrix3& new_defgrad, double& rho_cur, double& new_volume, double& USM, double& c_dil );
  protected:    
  };
} // End namespace Uintah
#endif  // __KAYENTA_H__ 
