******
sus.cc
------
create_sci_environment() (472)
read in .ups file [ProblemSpecReader().readInputFile(...)] (607)
assign world processorgroup (644)
create simulation controller (646)
create regridder (654)
create solver interface (662)
create Uintah parallel component (673)
recast parallel component to simulation interface (674) <-- This is the exposed set of methods for a component

attach sim interface to the simulation controller (681)
attach solver to the component (682)
attach regridder to the component (683)

create loadbalancer (694)
attach sim interface to the loadbalancer (695)

create dataarchiver (703)
register archiver with controller(705) and component (707)
register loadbalancer with archiver (706)
register sim interface with archiver (708)

create scheduler(712)
register scheduler with controller (714), loadbalancer (715), and component (716)

call controller run method (741)

delete everything and finalize MPI.... Thread::exitAll()



******************************
AMRSimulationController::run()
------------------------------
preGridSetup    (SimulationController.cc:286-310)
	create shared state
	map output port to d_output
	create scheduler and map to d_scheduler
	run problemSetup on d_scheduler and d_output



gridSetup        (SimulationController.cc:316:414)
    deal with restarting if d_restarting==true
    create DataArchive
	grab simulation controller instance
    do simulation interface (the component) preGridProblemSetup routine
    (NOTE: MD and Wasatch the only components to Overrides Uintah::SimulationInterface::preGridProblemSetup via Uintah::SimulationInterface)
    do the grid's problem setup
   
    
initialize scheduler(1,1)
advanceDataWarehouse(currentGrid, true)
setInitTimestep(true)



postGridSetup		(155)
	grab load balancer and do lbproblemSetup 				(SimulationController.cc:401)	
 !!!execute simulation component's problemSetup routine 	(SimulationController.cc:420)
 !!!finalize materials 										(SimulationController.cc:468)
	initializeOutput 										(SimulationController.cc:472)
	do restartSetup 										(SimulationController.cc:476)



calcStartTime		(157)
doInitialTimestep	(175)

	map old DW to DW(0)						(675)
	map new DW to DW(1)						(676)
	set top level timestep in shared state 	(697)
	assign boundary conditions 				(700)
 !!!loop through grid levels and call sim's scheduleInitialize on each (715)

	scheduleComputeStableTimestep			(727) // NOTE:  For AMRSimulationController, not for the component
 	 !!!loop through grid levels and call sim's scheduleComputeStableTimestep on each (1034)
		creat reduceSysVar task and plop it in the taskgraph (1037-1043) // NOTE:  Syncs delT reductions for AMR; should be lightweight for non-AMR reductions
	compile scheduler (736) // NOTE:  Should contain sim component's scheduleInitialize and scheduleComputeStableTimestep at this point
	execute taskgraph (743)
---------
TAKE-HOME:  The first taskgraph to execute has everything in scheduleInitialize plus everything in scheduleComputeStableTimestep!
---------

advanceDataWarehouse	(285)
increment current top level timestep (291)
check for recompile (includes first timestep!) (305)
---------
TAKE-HOME:	We ditch the old taskgraph with Initialize/computeStableTimestep and start building a new one here
---------

recompile taskgraph (317)
	Without multitaskgraphing, call subCycleCompile (900)
		mapDataWarehouses (481-485)
	 !!!sim->scheduleTimeAdvance (487)
	 	mapDataWarehouses (481-485) again ???
	 	sim->scheduleFinalizeTimestep (513)
 !!!scheduleComputeStableTimestep (918)
 	compile current taskgraph (925)
	 
unset first timestep flag 	(378)
executeTimestep				(387)















Main run loop
AMRSimulationController::run()

preGridSetup()
gridSetup()
scheduler->initialize(1,1);
scheduler->advanceDataWarehouse;
postGridSetup()

doInitialTimestep()

executeTimestep()
-->execute() // Line 910

// Other notes:

Gate oncePerProc dependencies with a SoleVariable type
Gate perPatch dependencies with a PerPatch variable type