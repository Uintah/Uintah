#!/bin/bash
#______________________________________________________________________

# to differentiate among the build names & even directories
COMPILE="yes"
DEFAULT_MAIL_TO="uintah-developer@gforge.sci.utah.edu"

DO_DBG="1"
DO_OPT="1"
LOCAL_OR_NIGHTLY_TEST="nightly"
WHICH_TESTS="NIGHTLYTESTS"
BUILDONLY="0"
OS=`uname -s`
PARALLELISM=0
REPLY_TO="uintah-developer@gforge.sci.utah.edu"
AUTO_UPDATE_PERF_GS="yes"                           # Automatically update performance GS if they improve
AUTO_UPDATE_SVN_STAMP="yes"                         # Automatically update the svn revision number when a test passes

SEND_MAIL_TO=""
USE_DEFAULT_BUILD="yes"
USE_PREVTREE="no"
USE_TREE="new"
VERBOSE="no"
COMMON_GROUP=""
CHECKPOINTS=""
MPIRUN_PATH=""
SVN_trunk="https://gforge.sci.utah.edu/svn/uintah/trunk/src"

ID=`date +%m%d%y`

#__________________________________
# Machine specific variables

MACHINE=`hostname`

if [ "$MACHINE" == "uintah-build" ]; then
  COMMON_GROUP="users"
  BUILD_DIR=/home/${LOGNAME}/"$OS"
  TEST_DATA_DIR=/home/${LOGNAME}/"$OS"/TestData
  TEMP_DIR=/home/${LOGNAME}/"$OS"
  SCRIPT_DIR=/home/${LOGNAME}/scripts
  CHECKPOINTS=/home/${LOGNAME}/CheckPoints         
  
  # Where the webpage will be, and init webpage
  # Note you need the following directory structure:
  #     public_html/          
  #       Plots/
  #          Memory/
  #          simRunTime/
  
  HTMLLOG=/home/${LOGNAME}/public_html/Uintah.html
  WEBLOG=http://155.101.15.100/~${LOGNAME}/Uintah.html
  
  if [ "$LOGNAME" == "gpu_rt" ]; then
    DEFAULT_MAIL_TO="ahumphrey@sci.utah.edu,t.harman@utah.edu,bradpeterson@gmail.com,jthornock@gmail.com,derkhar@gmail.com,bisaac2@gmail.com"
    export TEST_COMPONENTS="Examples ICE ARCHES"
  fi
  
fi

if test "$MACHINE" = "cyrus.mech.utah.edu" ; then
  DEFAULT_MAIL_TO="ahumphrey@sci.utah.edu,t.harman@utah.edu,bradpeterson@gmail.com,jthornock@gmail.com,derkhar@gmail.com,bisaac2@gmail.com"
  REPLY_TO="t.harman@utah.edu"
  COMMON_GROUP="users"
  BUILD_DIR=/raid/home/rt/"$OS"
  TEST_DATA_DIR=/raid/home/rt/"$OS"/TestData
  TEMP_DIR=/raid/home/rt/"$OS"
  SCRIPT_DIR=/raid/home/rt/scripts
  CHECKPOINTS=/raid/home/rt/CheckPoints
  MPIRUN_PATH=/usr/installed/openmpi/bin/
  export TEST_COMPONENTS="Examples ICE ARCHES"
  #export TEST_COMPONENTS="Examples ICE MPM MPMICE"
  #export TEST_COMPONENTS="ARCHES"    


  # Where the webpage will be, and init webpage.  (SEE above notes)
  HTMLLOG=/raid/home/rt/public_html/Uintah.html
  WEBLOG=http://cyrus.mech.utah.edu:8050/~rt/public_html/Uintah.html
fi


#______________________________________________________________________


# test OS
if [ "$OS" != "Linux" ]; then
  echo "Linux OS is the only OS that is currently configured to work. Abort"
  exit -1
fi

export OS
#unset SHELL
umask 002

show_help=0
if [ $# -eq 0 ]; then
    show_help=1
fi

# command line arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
    -sendmail)
        SEND_MAIL_TO="$DEFAULT_MAIL_TO"
        ;;
    -sendmailto)
        if [ "$#" -gt 1 ]; then
            shift
            SEND_MAIL_TO="$1"
            REPLY_TO=""
        fi
        ;;
    -verbose)
        VERBOSE="yes"
        ;;
    -use_prevtree)
        USE_PREVTREE="yes"
        ;;
    -use_tree)
        if [ "$#" -gt 1 ]; then
            shift
            USE_TREE="$1"
        fi
        USE_DEFAULT_BUILD="no"
        ;;
    -build_dir)
        if [ "$#" -gt 1 ]; then
            shift
            BUILD_DIR="$1"
        fi
        USE_DEFAULT_BUILD="no"
        ;;
    -test_data)
        if [ "$#" -gt 1 ]; then
            shift
            TEST_DATA_DIR="$1"
        fi
        ;;
    -j)
        if [ "$#" -gt 1 ]; then
            shift
            PARALLELISM="$1"
        fi
        ;;
    -build_only)
        BUILDONLY="1"
        ;;
    -dbg_only)
        DO_DBG="1"
        DO_OPT="0"
        ;;
    -opt_only)
        DO_DBG="0"
        DO_OPT="1"
        ;;
    -no_compile)
        COMPILE="no"
        ;;
    -help)
        show_help=1
        ;;
     *)
        echo "$1: Unknown option, -help for help"
        exit 1
        ;;
     esac
     shift
done

# usage string - exit
if [ $show_help != "0" ]; then
    cat <<EOF
    Usage: startTester should only be run by at(1) or cron(1)
        To run immediately, use "at now" with the path to this script as stdin.
        Options:
            -sendmail:              Send error messages to the default people
            -sendmailto "emails":   Send error messages to these people
            -j #:                   Use # number of processors maximum
            -use_tree "tree":       Use the given tree instead of checking one out
            -use_prevtree:          Use the previous (last_ran.lock) checkout and/or build
            -build_only:            Test the compilation only.  Don\'t run the tests.
            -dbg_only:              Only run debug tests.
            -opt_only:              Only run optimized tests.
            -no_compile:            Run the tests only; assume the build is already done.
            -verbose:               Display verbose output
            -build_dir:             Change the directory where Uintah is downloaded to.
            -test_data:             Change the GoldStandard directory.
            -help:                  Display this option summary
EOF
    exit 0
fi


PATH=:"$MPIRUN_PATH":"$PATH":"$SCRIPT_DIR":.
export PATH BUILDONLY COMPILE LOCAL_OR_NIGHTLY_TEST WHICH_TESTS COMMON_GROUP CHECKPOINTS AUTO_UPDATE_PERF_GS AUTO_UPDATE_SVN_STAMP

# set number of processors to use when building
if [ $PARALLELISM -eq 0 ]; then
  MAKE_PARALLELISM=1
else
  MAKE_PARALLELISM="$PARALLELISM"
fi

# use /usr/var/tmp on machines that have it, with the assumption that it will
# have more space than /tmp (true for burn at least)
if [ -d /usr/var/tmp ]; then
  TMPDIR=/usr/var/tmp
  export TMPDIR
fi

export BUILD_DIR BUILDROOT TEST_DATA_DIR PARALLELISM MAKE_PARALLELISM SEND_MAIL_TO  REPLY_TO

if [ $VERBOSE = "yes" ]; then
  echo "TIME STAMP: Regression Tester Starting at:"
  date
fi

if [ $USE_TREE != "new" ]; then
  # use the Uintah specified on the command line
  cd "$USE_TREE"
  BUILDROOT=`pwd`
  cd ..
  echo "Using tree at " > "$BUILDROOT"/log
  echo "$BUILDROOT" >> "$BUILDROOT"/log
  ID="$ID"-old
elif [ $USE_PREVTREE = "yes" ]; then
  # use the previous build of Uintah
  if [ ! -d "${BUILD_DIR}/last_ran.lock" ]; then
      echo "No previous build found"
      echo "${BUILD_DIR}/last_ran.lock does not exist"
      exit -1
  fi
  cd "${BUILD_DIR}/last_ran.lock"
  BUILDROOT=`pwd`
  cd ..
  echo "Using previous tree at " > "$BUILDROOT"/log
  echo "$BUILDROOT" >> "$BUILDROOT"/log
  ID="$ID"-old
else
  #check out the current version
  if [ $VERBOSE = "yes" ]; then
    echo "cd $BUILD_DIR"
  fi
  cd "$BUILD_DIR"

  BUILDROOT="${BUILD_DIR}/Uintah.${ID}"
  if [ -d "$BUILDROOT" ]; then
    
    # don\t just set the ID directly, we have two different possibilities for ID
    NID=`date +_%H`
    ID="${ID}${NID}"
    BUILDROOT="${BUILDROOT}${NID}"
    if [ -d "$BUILDROOT" ]; then
      NID=`date +%M`
      ID="${ID}${NID}"
      BUILDROOT="${BUILDROOT}${NID}"
      if [ -d "$BUILDROOT" ]; then
        echo "Uintah.${ID} dir already exists"
        exit -1
      fi
    fi
  fi


  if [ $VERBOSE = "yes" ]; then
    echo "mkdir $BUILDROOT"
  fi

  umask 002

  mkdir "$BUILDROOT"

  if [ -L "${BUILD_DIR}/last_ran.lock" ]; then
    rm -f "${BUILD_DIR}/last_ran.lock" 
  fi
  ln -s "$BUILDROOT" "${BUILD_DIR}/last_ran.lock"

  if [ $VERBOSE = "yes" ]; then
    echo "Checking out latest version of Uintah at `date`" 
  fi
  echo "Checking out latest version of Uintah at `date` to " > "$BUILDROOT"/log
  echo "$BUILDROOT" >> "$BUILDROOT"/log

  if [ $VERBOSE = "yes" ]; then
    echo "TIME STAMP: SVN CHECKOUT STARTING AT:"
    date
  fi
  cd "$BUILDROOT"


  echo $PATH
  
  #__________________________________
  # Try checking out the src tree 10 times
  # Occassionally it will fail with svn: REPORT of '/svn/uintah/!svn/vcc/default': Could not read response body: Secure connection truncated (https://gforge.sci.utah.edu)
  retval=-9
  counter=1
  while [[ $counter -le 10  &&  $retval -ne 0 ]]
  do
    
    svn co "$SVN_trunk" src  --username=anonymous --password=\"\"> "$BUILDROOT"/svn_co.log 2>&1
    retval=$?

    if [ $VERBOSE = "yes" ]; then
      cat "$BUILDROOT"/svn_co.log
    fi

    if [ $retval -ne 0 ]; then
      echo "SVN checkout failed with code $retval" > "$BUILDROOT"/svn_co.log
      echo "Look at ${BUILDROOT}/svn_co.log for more information"
      sleep 60
    fi
    counter=$(( $counter + 1 ))
    
    if [ $counter -gt 10 ]; then
      exit -1
    fi
    
  done
  
  cd "$BUILD_DIR"

  if [ $VERBOSE = "yes" ]; then
      echo "TIME STAMP: SVN CHECKOUT DONE AT:"
      date
  fi
fi


#__________________________________
# create html web page
rm -f $HTMLLOG
TITLE=`date`
echo "<HTML><HEAD><TITLE> $OS tests on $TITLE</TITLE></HEAD><BODY><pre>" >> $HTMLLOG 
echo "Regression Tester results from `hostname`" >> $HTMLLOG
echo "Architecture: ${OS}" >> $HTMLLOG
echo "" >> $HTMLLOG
echo "Using build: ${BUILDROOT}" >> $HTMLLOG
echo "LOG: $HTMLLOG" >> $HTMLLOG


#PATH="$BUILDROOT"/src/Packages/Uintah/R_Tester/helpers:"$PATH"
PATH="$BUILDROOT"/src/R_Tester/helpers:"$PATH"
export PATH DO_DBG DO_OPT HTMLLOG WEBLOG VERBOSE

if [ $VERBOSE = "yes" ]; then
   echo "Running Tests"
fi

runTests
retval=$?

chgrp -R $COMMON_GROUP $BUILDROOT > /dev/null 2>&1
chmod -R g+w $BUILDROOT > /dev/null 2>&1


if [ $VERBOSE = "yes" ]; then
  echo "TIME STAMP: REGRESSION TESTER DONE AT:"
  date
fi

exit $retval
