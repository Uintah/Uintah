#!/bin/bash
#______________________________________________________________________
#  This script compares the simulation time against the gold standards and reports
#  the percent change.  It also generates a plot so the user can look for slow "creep" in 
#  the run time over long periods of time.  If the simulation is faster then the GS will be automatically
#  updated if allowed.
#______________________________________________________________________

 
test=$1            # name of test
makeplots=$2       # switch: 1 or 0
test_timefile=$3   # filename
compare_root=$4
helperpath=$5
sus_output=$6
svn_revision=$7

comparison_timefile="$compare_root/$test/$test_timefile"
gs_dir="$compare_root/$test"

#__________________________________
# bulletproofing
if [ ! -f $test_timefile ]; then
  echo "No performance output ($test_timefile) found.  Can't do performance test."
  exit 5
fi

#__________________________________
# bulletproof the inputs
if [ "AUTO_UPDATE_PERF_GS" = "" ]; then
  echo "ERROR: performance_check  One of the environmental variables (AUTO_UPDATE_PERF_GS) has not been set"
  exit -1
fi

if [ ! -f $comparison_timefile ]; then
  echo "No previous performance output.  Storing results."
  cp $test_timefile $comparison_timefile
  chgrp $COMMON_GROUP $comparison_timefile
  chmod g+rw $comparison_timefile
  exit -1
fi

error=0

#__________________________________
# calculate the percent change and the time the test took to run
perfInfo=`performance_percent.pl $test_timefile $comparison_timefile`
percent=`echo $perfInfo | cut -d " " -f 1`
testTime=`echo $perfInfo | cut -d " " -f 2`

#__________________________________
# write data to log file and plot 
# the results
if [ $makeplots -eq "1" ]; then
  echo "Saving simulation run time data"

  simRunTimeHistory="$compare_root/$test/simRunTimeHistory"

  if [ ! -f $here ]; then
    echo "#date Run Time(sec)" > $simRunTimeHistory
  fi

  now=`date +%m-%d-%Y`
  echo "$now  $testTime" >> $simRunTimeHistory

  #eliminate entries from the restart test or if
  #it runs more that once a day
  uniq -w 10 $simRunTimeHistory > $simRunTimeHistory.clean
  cp $simRunTimeHistory.clean $simRunTimeHistory
  
  /bin/rm $simRunTimeHistory.clean

  #make a local copy
  cp $simRunTimeHistory ./simRunTimeHistory
  echo "Now plotting results"
  gnuplot $helperpath/plotRunTimeHistory.gp
  
fi


#create directory to store sus_output
outputDir="$gs_dir/oldOutput"
if [ ! -d $outputDir ]; then
  mkdir $outputDir
fi

#__________________________________
echo "Performing performance check"
if [ $percent -gt "10" ]; then
  echo "***Performance test failed"                                        
  echo " -- Time increased by %$percent" > performance_shortmessage.txt    
  error=2                                                                  
elif [ $percent -gt "0" ]; then
  echo " -- Time increased by %$percent" > performance_shortmessage.txt
elif [ $percent -lt "0" ]; then
  let percent_improvement=-$percent;

  if [ $percent -lt "-5" ]; then

    echo " -- Performance improved by %$percent_improvement," > performance_shortmessage.txt

    if [ $AUTO_UPDATE_PERF_GS = "yes" ]; then 
      echo " -- Performance improved by %$percent_improvement, replacing gold standard timestamp" > performance_shortmessage.txt
      cp $test_timefile $comparison_timefile

      # keep around the old output for analysis
      mv $gs_dir/$sus_output* $gs_dir/oldOutput/ >/dev/null 2>&1

      me="$sus_output.$svn_revision"
      cp $sus_output $gs_dir/$me

      chgrp -R $COMMON_GROUP $gs_dir
      chmod -R g+rw $gs_dir
    fi
  else
     echo " -- Performance improved by %$percent_improvement" > performance_shortmessage.txt
  fi
else
  echo "" > performance_shortmessage.txt
  echo "Performance check passed!"
fi

exit $error
