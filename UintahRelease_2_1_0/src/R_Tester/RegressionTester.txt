#############################################################################

             U I N T A H   R E G R E S S I O N   T E S T E R

#############################################################################

Table of Contents

Introduction
Top-Level Scripts
  startTester
  cron/at jobs
  viewing results
Intermediate Scripts
  runTests
  build_and_run
  do*tests (*=MPM,ARCHES,ICE,etc.)
Low-Level Scripts
  cleanup
  useFakeArches.pl
  * (MPM,ARCHES,ICE,etc.) - test scripts
  modUPS.py
  runSusTests.py
  compare_sus_runs
  mem_leak_check
  compare_dats
  compare_udas
  compare_dat_files.pl
  highwater_percent.pl
  replace_gold_standard
Other Items
  __init__.py
  sub.mk
  sus
  compare_uda
  setupTests
  Adding tests: (MPM,ARCHES,etc.)
  SSH authentication

****************************************************************************
Introduction
****************************************************************************
This text provides documentation for the Uintah testers and all the helper
scripts that they call.  It will show which ones can be run individually
from the command line, and which ones must be run from within other scripts,
and how they are to be called.

When each script is introduced, it will specify its location.  The location
will either be in relation to the tester root, which currently is 

/usr/sci/projects/Uintah/tester

or it will be in relation to the Uintah code, which is 

$BUILDROOT/src/

The do*tests, which are built by the regression tester, live in

$BUILDROOT/[opt|dbg]

To run everything, use startTester.  To test a subset of the tester,
Use the appropriate do*tests.  I.e., if changes are made to the ICE segment,
you could:

cd <test dir>/src/
cvs update -Pd
cd ../../../dbg
rm -rf ICE-results
doICEtests

or otherwise you could run

startTester <options>

or

echo "startTester -j 1" | at now
****************************************************************************
Top-Level Scripts
****************************************************************************

-----------
startTester - tester/bin/startTester (where tester is the root of the tester)
-----------

Overview
  startTester is the main script to run the Uintah regression tester.  It will 
set all necessary environment variables.  It tests the ability to compile the
Uintah code, the ability to run certain tests, and compares those tests to
expected results.  

Important note:
In order for startTester to check out a new tree from the CVS root, it will 
need password-less access to csf.cs.utah.edu.  This will normally require
an ssh authentication agent.  See section on SSH authentication for more
details.

Usage: startTester should only be run by at(1) or cron(1)
    To run immediately, use "at now" with the path to this script as stdin.
    Options:
        -sendmail:        Send error messages to the default people
        -sendmailto       "emails":  Send error messages to these people
        -j #:             Use # number of processors maximum
        -malloc_strict:   Have debug runs use malloc_strict
        -use_tree "tree": Use the given tree instead of checking one out
        -use_prevtree:    Use the previous (last_ran.lock) checkout and/or build
        -build_only:      Test the compilation only.  Don't run the tests.
        -no_compile:      Run the tests only; assume the build is already done.
        -verbose:         Display verbose output
        -weekly:          Run longer regression tests (meant for once a week)
        -build_dir:       Change the directory where SCIRun is downloaded to.
        -test_data:       Change the GoldStandard directory.
        -user <user>:     Run the tests in Test/users/<user>/ instead of Test/
          You must use either the -use_tree or -build_dir options and
          the -test_data option
        -help:            Display this option summary
        
        

Important Variables used:
  SCRIPT_DIR              directory where script lives: used in path
  DEFAULT_MAIL_TO         SEND_MAIL_TO set to default list if sendmail option 
    used: currently csafe-homebrew@cs.utah.edu, mcole@cs.utah.edu
  DEFAULT_REMAKE_LOG_TO   MAIL_REMAKE_LOG_TO set to default if sendmail option
    used: currently kuzimmer,bigler,witzel,sparker,dav,worthen

Environment Variables set:
  OS                      [IRIX64|Linux]
  CC                      Compiler environment variables, OS-dependent
  CXX
  F77
  PATH                    Path variable
  CVSROOT                 where to check out code from
  CVS_RSH                 how to get code from CVSROOT: ssh
  TMPDIR                  /usr/var if it exists: uses more disk space
  BUILD_DIR               directory to place builds
  BUILDROOT               directory of build: fresh build set to the most 
    recent build if -use_prevtree set, the specified tree if -use_tree set,
    or SCIRun.<date> otherwise
  TEST_DATA               Test data
  PARALLELISM             -j option from command line, or 1
  VERBOSE                 set true if -verbose set
  MAKE_PARALLELISM        # procs to build SCIRun with
  DBG_CONFIGURE           configure options in dbg build
  OPT_CONFIGURE           configure options in opt build
  HTMLLOG                 where to save the log file locally
    currently set to /usr/sci/projects/Uintah/csafeweb/tester/OS/BUILDROOT
  WEBLOG                  where to find the log file on the internet
  SEND_MAIL_TO            who to send test results to
  MAIL_REMAKE_LOG_TO      who to send make log to
  WEEKLY                  whether or not to use weekly tests

Files created:
  SCIRun.<date> directory (if use -use_tree flag used) - this is BUILDROOT
  BUILDROOT/log            main log file, sent in email
  BUILDROOT/cvs_co.log     log of the cvs checkout
  HTMLLOG                  where test summaries to be viewed online are saved

Side effects:

  startTester will either use a SCIRun tree that already exists, or it 
will create a new one in SCIRun.<date>.  date it in a slightly different
format if the weekly tests are to run.  Then it will call runTests which will
take care of the rest of the testing procedure.  It will also replace (if any)
the current last_ran.lock, and have it point to BUILDROOT

------------
cron/at jobs
------------

  Though you may simply run the regression tester by typing, for example:

startTester -j 16 -sendmail

You may also desire to run batch jobs.  You may do this in one of two ways:
One is cron - which runs jobs repeatedly, and the other is at, which runs a
job once (see the cron and at man pages).  There are crontab files set up in
the tester/bin directory, one per platform we test for (right now IRIX64 and 
Linux).  

By typing 

crontab crontab.irix 

or 

crontab crontab.linux 

it sets up the system to run the Uintah regression tester and the SCIRun 
build tester both once a day, in the evening (when hopefully nobody is 
working), until you disable the cron job with

crontab -r

You can tell it when to run with 

startTester <options> | at <time>

Again, see at man pages.  This will run the tester once, at a specified time.
When either a cron or an at job complete, you will receive an email that says
that the job has completed.


---------------------------------
Viewing Regression Tester Results
---------------------------------

Regression tester output is done in three phases:

The first is by email (or to stdout if verbose is on).  This will tell you
very high level information such as where the build was, which machine it was
run on, and which groups of tests passed and failed.

The second is a web page, which is referred to at the bottom of the email.
The webpage contains information about individual tests, such as what time 
they begin and if they failed.  If they failed, it will either give a brief
explanation (very brief), or point you to a log file.

There will be many log files saved, and any test that failed will show the 
location of any relevant log files.  They will show you the resulting output 
of the test, which (hopefully) explains clearly why the test failed.

The results of the SCIRun Build Test are currently in the email.  If the test
passed, no email is sent, but if the test failed, mail is sent and the 
compilation errors are shown in the email.


********************
Intermediate Scripts
********************

These are tests that are called by the Top-level scripts, or by simpler 
intermediate scripts.

--------
runTests - Uintah/R_Tester/helpers/runTests, sh script
--------
called by startTester, but can also be run from the command line, but it 
would be much easier to call startTester with the -use_tree option

usage:

	runTests

Overview:
  One of the first things runTests does is call build_and_run, a script which
builds the Uintah software, for both the dbg and opt builds.  Upon returning
from that, it prepares the email to be sent, and copies the summary logs into
the HTMLLOG file.  It then calls the cleanup script.

Environment variables that must be set:
  BUILD_DIR          directory that contains SCIRun builds
  BUILDROOT          root of SCIRun build
  VERBOSE            set to either "yes" or "no"
  DBG_CONFIGURE      configure options, in quotes
  OPT_CONFIGURE
  HTMLLOG            where the tester writes the log to be seen on the web
  TEST_DATA          directory that contains the test data
  SEND_MAIL_TO       who to send mail to, or "" for no mail
  WEBLOG             where to view the HTMLLOG on the www.
  MAIL_REMAKE_LOG_TO who to send mail to if SCIRun doesn't compile, or ""
  PARALLELISM        max num processors to use in testing
  MAKE_PARALLELISM   how many processors to use in make

Files created:
  BUILDROOT/[dbg/opt]       dirs for each separate dbg/opt build
  BUILDROOT/[dbg|opt]/log   output of the building and running of tests that 
    was not saved in other logs. (These log files are the mail message.)
  

Side effects:
If the tests were successful, then it will place a lock in BUILD_DIR pointing
to BUILDROOT.  It is called last_successful.lock

-------------  
build_and_run - Uintah/R_Tester/helpers/build_and_run
-------------
called by runTests, but can also be run from the command line.

Overview:

     Make is run up to three times.  If make fails, but sus is created,
message is displayed saying this.  If no sus, then try without arches
(uses useFakeArches.pl script).

If any of these strategies is successful, it runs all the files (test scripts)
in R_Tester.  build_and_run actually creates scripts to run
each of these tests.

Environment variables that must be set
  BUILD_DIR
  BUILDROOT
  PARALLELISM
  MAKE_PARALLELISM   how many processors to use in make
  TEST_DATA

Usage:

	build_and_run <dbg|opt> <"configure args">

Files Created:

  These files are created in BUILDROOT/mode (mode is either dbg or opt)

  configure_command    The configure command that will be used
                             to build the executable.
  configure.log        Output of running configure
  make.log             Output of running make.
  summary.log          Summary of test results (these are posted on the web)
  do*tests             Script created to run tests in R_Tester
                       where * is a test in that directory.
  remake_with_arches.log
  remake_failed_scirun.log
  remake_withoug_arches.log

Side Effects:

     If configure fails, creates a lock in BUILD_DIR pointing
     to BUILDROOT.  Lock name is "configure-$mode.lock"

--------
do*tests BUILDROOT/[opt|dbg]/do*tests (sh script)
--------
These scripts are created and run by build_and_run, and can also be run from
the command line (from BUILDROOT/[opt|dbg]).

This provides the easiest way to test a single set of tests.

Overview:

  These scripts (doARCHEStests, doICEtests, etc.) are output of the regression
tester itself.  They (currently) provide an interface between the sh scripts
and the python scripts.  Each script simply calls its corresponding test in
R_Testers and passes appropriate arguments.

Usage:
 
	do*tests solotest

where * is one of ARCHES, ICE, EXAMPLES, MPM, or MPMICE
solotest - optional parameter to run only the specified test

***************************************************************************
Low-Level Scripts
***************************************************************************
Scripts that are further down the script hierarchy

-------
cleanup - Uintah/R_Tester/helpers/cleanup (sh script)
-------
Called from runTests, but could be called from the command line

Overview:

  Tries to remove all SCIRun.* in BUILD_DIR that don't have a *.lock link
pointing to it.

usage:

	cleanup
  needs to be run in BUILD_DIR

Files created:
  BUILD_DIR/trash/

Side effects:

  Previously, any directory that had a .lock file pointing to it had a file
in BUILDROOT/ called lock.  Cleanup removes those lock files, and creates one
for every folder that is pointed to by a .lock file.

  Moves all the (non-locked) SCIRun.* dirs to the "trash" dir and then
tries to remove them.  Tries to delete everything in trask.  If not
successful (due to not owning the files), send email to people to
clean it up.

----------------
useFakeArches.pl Uintah/R_Tester/helpers/useFakeArches.pl (perl script)
----------------
This is called from build_and_run, and probably only makes sense to use from
there, or when trying to build Uintah without ARCHES.

Overview:
  Perl sript to hack around the compilation of ARCHES

Usage:
	useFakeArches.pl BUILDROOT

Side effects:
  edits Uintah/Standalone/sub.mk, adds FakeArches.cc to the compilation list, 
and removes mention of Arches from the LIBS needed.


-----------------------
* (MPM,ARCHES,ICE,etc.) Uintah/R_Tester/* (python scripts)
-----------------------
These are called from the do*tests, as mentioned above but can also be called
from the command line with similar arguments to the do*tests.

Overview:
  For any script file in the Uintah/R_Tester folder (executable permissions set),
the regression tester will create a do*tests, and run it every time.

Usage:
               V name of the test (MPM,ARCHES, etc.)
	python * susdir inputs goldStandard mode maxParallelism test

mode - [dbg|opt]
test is optional (as run from the do*tests, it is what * (MPM,ARCHES) is)

Variables set:

TESTS: a set of tests to run

TESTS = [   (nameOfTests, upsInputFile, extraSusFlags, numProcs, whichOS),
             ...,
	]

Then it calls runSusTests(argv, TESTS, algo)

You can create your own test file, and it will automatically run in the tester.
It will need 755 permissions.

Example:

#!/usr/bin/python

from sys import argv,exit
from helpers.runSusTests import runSusTests

TESTS = [   ("advect", "advect.ups", "", 1, "ALL"),     \
            ("hotBlob2mat", "hotBlob2mat.ups", "", 1, "ALL"),     \
            ("hotBlob2mat_sym", "hotBlob2mat_sym.ups", "", 1, "ALL"),     \
            ("hotBlob8patch", "hotBlob2mat8patch.ups", "", 8, "ALL"),     \
        ]

exit(runSusTests(argv, TESTS, "ice"))

You can also call modUPS to use the same ups file with different settings:

from helpers.modUPS import modUPS

methane8patch_ups = modUPS("%s/ARCHES" % inputs_root(), \
                           "methane_explicit_table.ups", \
                           ["<patches>[2,2,2]</patches>", \
                            "<maxTime>10.0</maxTime>"])

This will change the methane_explicit_table.ups patches from whatever they 
were to [2,2,2] and the maxTime to 10.0.

runSusTests can also have a callback defined (optional - by default null):

def chemfileCallback (test, susdir, inputsdir, compare_root, algo, mode, max_parallelism):
  symlink("%s/input.dtd" % (inputsdir), "input.dtd")
  cfile = chemfile(test)
  if platform[0:5] == "linux":
      cfile = cfile + ".linux.bin"
  else:
      cfile = cfile + ".bin"
  symlink("%s/%s" % (inputsdir, cfile), "chem.bin")

exit(runSusTests(argv, TESTS, "arches", chemfileCallback))


------
modUPS.py Uintah/R_Tester/helpers/modUPS.py - python script
------
Called by a * script (above), if desired.

Overview:
  modUPS is a way to change the input file temporarily, to not have stored 
derivations of the input file laying around.

usage:

	from helpers.modUPS import modUPS
	modUPS(inputDir, filename, list of changes)

i.e., modUPS("%s/ARCHES" % inputs_root(), \   <-- input dir
                           "methane_explicit_table.ups", \  <-- filename
                           ["<patches>[2,2,2]</patches>", \ <-- list of changes
                            "<maxTime>10.0</maxTime>"])

Make sure to put the entire field from the beginning of the tag to the close
of the tag.

modUPS will scan through the ups file and look for the pattern of the tag 
scecified.  I.e., in the example above, it will look for <patches>...</patches>
and then replace it with <patches>[2,2,2]</patches>. 

It can also replace tags in form <varname=something />.

Side effects:
  It will save a file in inputDir/tmp/MOD-filename.  This file will be exactly
the same as the original, EXCEPT for the changes specified.  Note, it is 
important for now to realize that EVERY occurrence of an item passed into
modUPS will be changed.  Thus, in the future, modUPS may need to be refined.
modUPS returns "tmp/MOD-filename".

--------------
runSusTests.py - Uintah/R_Tester/helpers/runSusTests.py (python script)
--------------
This should be run either by the regression tester, or by a do*tests script,
or a derivation thereof.

Overview:
  runSusTests.py is divided largely into 2 functions, runSusTests, and 
runSusTest.
  runSusTests takes the tests passed into it from * (MPM, ARCHES, etc., 
whichever script called it), and executes sus on them.  It then begins 
comparing the results of the output with the saved goldStandard.

usage:

	runSusTests(argv, TESTS, testtype, callback)

where argv is the same as the arguments passed into * (MPM, ARCHES) - 

susdir inputs goldStandard mode maxParallelism test (described above in *),

TESTS is a list of tests, also described above in *,

testtype is the algorithm to run - arches, mpm, ice, mpmice, examples, etc.

callback is an optional parameter.  If you pass a callback, you must define 
that function, which has parameters:

test, susdir, inputsdir, compare_root, algo, mode, max_parallelism

Callback is called before running each test.


Environment variables that must be set:
  PATH
  HTMLLOG, WEBLOG (only necessary if you want output to go to web server)

Files created by runSusTests:
  In the following, resultsdir is HTMLLOG-mode/*-results 
    (MPM-results, ARCHES-results, etc.) if the tests 
    initiated by startTester, and BUILDROOT/mode/*-results if the tests
    were initiated by some other means, and
    testname is the name of the current running test

  resultsdir/testname
  resultsdir/testname/restart
  resultsdir/testname/[restart/]replace_gold_standard
  

Files created by runSusTest:
  resultsdir/testname/[restart/]sus.log.txt
   sus produces resultsdir/testname/<something>.uda
   sus also produces resultsdir/testname/malloc_stats and 
    and testname/restart/restart_malloc_stats
    (if it is a dbgbuild)
  resultsdir/testname/[restart/]compare_sus_runs.log.txt

Side effects:
  runSusTests basically does a lot of error checking - like is sus where you
said it was, is inputs a valid directory, that there are no *-results dirs
before running the test, etc.
  It proceeds to iterate through the test, and if there was a solotest arg
specified in do*tests, it will check and see if that is the current test.  
Then it compares the OS specified of the current test, and if they are not 
compatible it continues with the next test.  Then it calls the callback if 
there is one, and calls runSusTest.  Then it repeats that process for the 
restart test (if the sus test passed) AND the files created in the resultsdir
directory will then be created in the restart directory.
  runSusTest is responsible for the running and testing of one individual test.
It first checks to see if the test requires more processors than the tester's
max paralellism setting (passed into startTester with the -j flag).  It 
proceeds to run the tests, noting that at any point if a test fails, it 
displays where the log message is that will be helpful, and then returns
immediately.  sus is then run with the parameters as set by the test, and 
sends its output to sus.log.txt.  If it passes, it proceeds to compare the udas
generated by sus with the gold standard, with compare_sus_runs, which saves
its output in compare_sus_runs.log.txt.  If we are in debug mode, it tests 
for memory leaks.  mem_leak_check saves its output in mem_leak_check.log.txt

----------------
compare_sus_runs - Uintah/R_Tester/helpers/compare_sus_runs - sh script
----------------
called by runSusTest (within runSusTests.py), can also be run from the command
line.

Overview:
  compares output of sus with gold standard

Usage:
  compare_sus_runs <testname> <testdir> <compare_root> <susdir>

  testname     - name of test
  testdir      - directory where test is in
  compare_root - folder where testdir/testname should be - i.e, OS/TestData/mode/ALGO
  susdir       - folder were sus and compare_uda are located.

  It will only work if the helpers script directory is in the path.

Side effects:
  If there is no data for the specified test in compare_root, compare_sus_runs
creates the necessary directories and copies the output from sus (in 
testdir/testname) over to be the new gold standard.  Otherwise, it calls
compare_dats and compare_udas on the input.


--------------
mem_leak_check - Uintah/R_Tester/helpers/mem_leak_check - sh script
--------------
called by runSusTest (within runSusTests.py), can also be run from the command
line.

Overview:
  Checks and compares memory usage

Usage:
  mem_leak_check <testname> <stats_file> <compare_stats_file> <tmpdir>

  testname           - name of test
  stats_file         - name of malloc output file -i.e., malloc_stats
  compare_stats_file - name/location of file to compare to.
  tmpdir             - any dir (temp)

Side effects:
  Looks for memory leaks in stats_file, and outputs them to 
tmpdir/scinew_malloc_stats.  Then calls highwater_percent.pl to check
memory usage. If the percentage returned is greater than 10, an error is
posted, if it returns a percentage less that -5%, than it replaces the stats
in the goldStandard.

------------
compare_dats - Uintah/R_Tester/helpers/compare_dats - sh script
------------
called by compare_sus_runs - can also be run from the command line.

Overview:
  It checks to see if there are any .dat files to compare.  If there are,
it calls compare_dat_files.pl to compare them.

Usage:
  compare_dats <testname> <testdir> <compare_udadir> <tmpdir>

  testname/testdir same as for compare_sus_runs
  compare_uda_dir - compare_root/testname/udadir
  tmpdir          - can probably be anything, but passed as testdir from 
   compare_sus_runs 

------------
compare_udas - Uintah/R_Tester/helpers/compare_udas - sh script
------------
called by compare_sus_runs.  Can also be run from the command line.

Overview:
  Simply calls compare_uda (executable in susdir), with the flags given

Usage:
  compare_udas <susdir> <test> <test_udadir> <compare_udadir> <tmp_dir> <flags>


--------------------
compare_dat_files.pl - Uintah/R_Tester/helpers/compare_dat_files.pl - perl script
--------------------
called by compare_dats.  Could probably be called by the command line, but
  just use compare_dats instead.  

Overview:
  checks to see if values in dat files and gold standard dat files are within
a tolerable percent of error.

Usage:
  compare_dat_files.pl <abs error> <rel error> <udadir> <compare_udadir> 
                       <dat filenames>


  abs error       - Absolute error - the max allowable exact difference
  rel error       - Relative error - the max allowable relative difference - 
    based on significant figures
  udadir          - Uda directory with data files
  compare_udadur  - Gold standard uda directory
  dat filenames   - list of .dat filenames


--------------------
highwater_percent.pl - Uintah/R_Tester/helpers/highwater_percent.pl - perl script
--------------------
called by mem_leak_check.  Also could be called by the command line.

Overview:
  Compares memory allocated by the two input files and calculates the 
percent difference.


Usage:
  highwater_percent.pl <malloc_stats_file> <compare_malloc_file>

---------------------
replace_gold_standard - resultsdir/replace_gold_standard - sh script (A)
--------------------- - Uintah/R_Tester/helpers/replace_gold_standard -  (B)
A)Script created by runSusTests.  To be run at the command line, when deemed
  necessary.

Overview:
  replaces the files in the gold standard with the ones created by this test.
(A) calls (B)

Usage:
(A)  replace_gold_standard
(B)  replace_gold_standard gold_standard_dir replacement_dir testname

  gold_standard_dir is the directory right above the testname 
    i.e., goldstandard/ARCHES
  replacement_dir is the directory to replace gold standard with
  testname is the name of the test
*****************************************************************************
Other items
*****************************************************************************
These are items that are not scripts themselves, but may give a little insight
to the tester.

-----------
__init__.py - Uintah/R_Tester/helpers/__init__.py
-----------
The existence of this file alone (it is virtually empty), helps to create a 
python package for helpers.  This makes it so the python scripts can call each
other's functions.

------
sub.mk - Uintah/R_Tester/sub.mk and Uintah/R_Tester/helpers/sub.mk
------
It appears that the compare_dat_files script used to be a C++ program, and 
these sub.mk files would have aided in its compilation.

---
sus - Uintah/Standalone/sus
---
Sus is the main program of the Uintah framework.  

  Usage: sus [options] <input_file_name> or
  mpirun sus [options] <input_file_name>

Valid options are:
-h[elp]              : This usage information.
-mpm                 :
-ice                 :
-arches              :
-nthreads <#>        : Only good with UnifiedScheduler
-gpu                 : Only goog with UnifiedScheduler
-scheduler <name>    : Don't specify, use system default!
-loadbalancer <name> : Usually use system default.
          NirvanaLoadBalancer [or NLB for short]
-layout NxMxO        : Eg: 2x1x1.  MxNxO must equal number
                           of boxes you are using.
-emit_taskgraphs     : Output taskgraph information
-restart             : Give the checkpointed uda directory as the input file
-combine_patches     : Give a uda directory as the input file
-t <timestep>        : Restart timestep (last checkpoint is default,
                        you can use -t 0 for the first checkpoint)
-copy                : Copy from old uda when restarting
-move                : Move from old uda when restarting
-nocopy              : Default: Don't copy or move old uda timestep when
                        restarting


-----------
compare_uda - Uintah/Standalone/compare_uda
-----------
compare_uda is used to compare udas.  Or rather, to test the accuracy of the
output of udas against a fixed standard.

Usage: compare_uda [options] <archive file 1> <archive file 2

Valid options are:
  -h[elp]
  -abs_tolerance [double] (allowable absolute difference of any numbers)
  -rel_tolerance [double] (allowable relative difference of any numbers)
  -as_warnings (treat tolerance errors as warnings and continue)
  -skip_unknown_types (skip variable comparisons of unknown types without error)
Note: The absolute and relative tolerance tests must both fail
      for a comparison to fail.

------------
Adding tests: (MPM,ARCHES,etc.)
------------

In the src/ directory there is a directory called
test.  In that directory there are several directories (helpers, toplevel,
etc.) and several files (ARCHES, MPM, etc.).  These files are the test
files.

Copy one of the test files to a new file (if you need to make so it formats
the right chem.bin file like Arches does, I would use ARCHES, otherwise I
would use anything else.  The main difference is that ARCHES uses a
callback function to set up the chem.bin stuff.).

You'll need to edit a few things in that file.  First, you'll notice a big
list called TESTS.  TESTS is a list of tests.  There can be as many tests
as you like, but each test must be a list of 5-6 items.  For example, in
MPM we find one of the tests:

("heatcond2mat", "heatcond2mat.ups", "", 1, "ALL")

The first parameter is the name of the test.  It doesn't really matter
what the name is, most people just use the name of the ups file, but
doesn't need to be.

The second parameter is the name of the ups file.
The third is any additional flags that you want to pass to sus.
The fourth is the number of processors to use.
The fifth is which operating system to run on.  Current choices are
"Linux", "IRIX64", or "ALL"  - these are case-sensitive.
An optional sixth parameter is the chem file name (see ARCHES), or
  any other info that may need to be processed before running the test.

Okay, that was a lot of writing but shouldn't be too much work.

Next, you'll notice the exit(runSusTests(...)) call at the very
bottom.  All you need to do here is change the third argument to
<algo>, where algo is the algorithm directly passed into sus,
like "ice" or "mpmarches", AND the uppercase version of algo must be the
name of a directory with ups files (ICE, MPMARCHES).
If you need a chem file, or need to do some other work before the just 
pass the name of the callback function.

The callback function, if passed into runSusTests will be called before
executing every test.  It must have the same parameters as the runSusTest
function, found in runSusTests.py.  In the case of ARCHES, it sets up 
necessary symbolic links for the test to run, by referencing the last item
in the TESTS list.

Finally, if you look at the top of ARCHES you'll see:
from helpers.modUPS import modUPS

methane8patch_ups = modUPS(...)

This is a method for using the same ups file with different parameters. If
you want to use it, follow the same style you see in ARCHES
(modUPS(directory, filename, [list-of-changes]) ), but it's not required.  
You'll need the from helpers/modUPS import modUPS line.  See modUPS docs.

Then add that file to the cvs repository and commit it, and the regression
tester will see it and take care of the rest!

------------------
SSH authentication
------------------

In order to check out a build from csf.cs.utah.edu from the tester, you
will need ssh public-key/private-key authentication.  This needs to be done
in several steps.

1) Create a public/private key pair on the computer that you want to run 
   ssh from.  Type ssh-keygen -t [type], where type is 
   the type of key you want.  To get to csf.cs, you'll need rsa1.  It will then
   ask you where you want the key saved.  Accept the default, and then it will
   ask you to enter a passphrase.

2) Copy the public key to the server where you want to ssh to.  The public key
   is the file that ssh-keygen asked you to create appended with a .pub.
   Append this file to your .ssh/authorized_keys file (or copy it there if
   it does not exist).  Make sure your .ssh directory has 700 permisions.

3) Run ssh-agent.  If it outputs some setenv lines, then you will need to
   execute the lines that it outputs, or do 
     eval `ssh-agent` (with the back-quotes)
   then run ssh-add.  It will prompt you for the same passphrase.

4) To run startTester from a cron, batch, or non-interactive job, you will
   need to set up your account to automatically load up an ssh-agent. To do 
   this, I added two lines to my .aliases file:

alias agent 'rm -f "$HOME"/.ssh/`hostname`.agent ; ssh-agent > "$HOME"/.ssh/`hostname`.agent ; source "$HOME"/.ssh/`hostname`.agent ; ssh-add'

alias sshagent 'if (-e "$HOME"/.ssh/`hostname`.agent) source "$HOME"/.ssh/`hostname`.agent ; endif'

   The first (agent), when ran, will create a `hostname`.agent (where hostname
   is the machine you are running on) file in the .ssh dir.  It will also load
   the ssh-agent, add the keys, and prompt you for a password.  When run, this
   agent will remain active until the computer is restarted or the process is
   killed (it will persist even after logging out).  So if you log out and log
   back in again, you don't need to do ssh-agent or ssh-add again, you just
   need to tell the shell which pid and socket the ssh-agent is using, which 
   is the same information that ssh-agent outputs.

   The second (sshagent), when ran, will look for the file 
   .ssh/`hostname`.agent.  If it exists, it will source it.  This will tell 
   the shell how to use the ssh-agent.

   Add these lines to load up at login time (I have them in my .aliases
   file, and my .cshrc file sources the .aliases file), and then add
     sshagent
   to load up at login time (I have this in my .cshrc file after it sources
   the .aliases file).  Run the agent alias once on a machine, and then every
   subsequent loging to that machine, it will automatically load up the same
   ssh-agent, which is convenient for much more than just using cvs.

*****************************************************************************
*****************************************************************************
