/*
 * The MIT License
 *
 * Copyright (c) 1997-2015 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */


Array1 is a parameterized type (template class) that implements a
flexible one dimensional array.

An array is constructed with the following:
Array1(int size=0, int default_grow_size=10, int asize=-1);
This looks fairly complex, but encapulates the simple way of using
the arrays also.  In it's simplest form, with no arguments, Array1
allocates an array which has 0 elements, and which allocates 10
elements at a time when growing the array.  The next most common form,
with a single integer argument, allocates an array of the specified
size.  Using the second  you can specify how many new elements are
allocated each time the array is reallocated.  Using a larger number
for this will cause fewer reallocations when slowly building a large
array, but is more wasteful when using small arrays.  The third
argument specifies how many elements to allocate initially.  This can
be used to jump start the growth of a large array.

The array is accessed through the following methods:

// Accesses the nth element of the array
T& operator[](int n)

// Returns the size of the array
int size() 

// Make the array larger by count elements
void grow(int count, int grow_size=10);

// Add one element to the array.  equivalent to:
//  grow(1)
//  array[array.size()-1]=data;
void add(const T& data);

// Remove one element from the array.  This is very inefficient
// if you remove anything besides the last element.
void remove(int);

// Remove all elements in the array.  The array is not freed,
// and the number of allocated elements remains the same.
void remove_all();
