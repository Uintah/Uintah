int MPI::Abort         __ARGS((MPI_Comm, int));
int MPI::Accumulate    __ARGS((void *,   int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Op, MPI::Win));
int MPI::Address       __ARGS((void *, MPI_Aint *));
int MPI::Allgather     __ARGS((void *, int, MPI_Datatype, void *, int, MPI_Datatype, MPI_Comm));
int MPI::Allgatherv    __ARGS((void *, int, MPI_Datatype, void *, int *, int *, MPI_Datatype, MPI_Comm));
int MPI::Alloc_mem     __ARGS((MPI_Aint, MPI::Info, void *));
int MPI::Allreduce     __ARGS((void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm));
int MPI::Alltoall      __ARGS((void *, int, MPI_Datatype, void *, int, MPI_Datatype, MPI_Comm));
int MPI::Alltoallv     __ARGS((void *, int *, int *, MPI_Datatype, void *, int *, int *, MPI_Datatype, MPI_Comm));
int MPI::Attr_delete   __ARGS((MPI_Comm, int));
int MPI::Attr_get      __ARGS((MPI_Comm, int, void *, int *));
int MPI::Attr_put      __ARGS((MPI_Comm, int, void *));
int MPI::Barrier       __ARGS((MPI_Comm));
int MPI::Bcast         __ARGS((void *, int, MPI_Datatype, int, MPI_Comm));
int MPI::Bsend         __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm));
int MPI::Bsend_init    __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *));
int MPI::Buffer_attach __ARGS((void *, int));
int MPI::Buffer_detach __ARGS((void *, int *));
int MPI::Cancel        __ARGS((MPI_Request *));
int MPI::Cart_coords   __ARGS((MPI_Comm, int, int, int *));
int MPI::Cart_create   __ARGS((MPI_Comm, int, int *, int *, int, MPI_Comm *));
int MPI::Cartdim_get __ARGS((MPI_Comm, int *));
int MPI::Cart_get __ARGS((MPI_Comm, int, int *, int *, int *));
int MPI::Cart_map __ARGS((MPI_Comm, int, int *, int *, int *));
int MPI::Cart_rank __ARGS((MPI_Comm, int *, int *));
int MPI::Cart_shift __ARGS((MPI_Comm, int, int, int *, int *));
int MPI::Cart_sub __ARGS((MPI_Comm, int *, MPI_Comm *));
int MPI::Comm_compare __ARGS((MPI_Comm, MPI_Comm, int *));
int MPI::Comm_create __ARGS((MPI_Comm, MPI::Group, MPI_Comm *));
int MPI::Comm_dup __ARGS((MPI_Comm, MPI_Comm *));
int MPI::Comm_free __ARGS((MPI_Comm *));
int MPI::Comm_get_attr __ARGS((MPI_Comm, int, void *, int *));
int MPI::Comm_get_name __ARGS((MPI_Comm, char *, int *));
int MPI::Comm_group __ARGS((MPI_Comm, MPI::Group *));
int MPI::Comm_rank __ARGS((MPI_Comm, int *));
int MPI::Comm_remote_group __ARGS((MPI_Comm, MPI::Group *));
int MPI::Comm_remote_size __ARGS((MPI_Comm, int *));
int MPI::Comm_set_name __ARGS((MPI_Comm, char *));
int MPI::Comm_size __ARGS((MPI_Comm, int *));
int MPI::Comm_split __ARGS((MPI_Comm, int, int, MPI_Comm *));
int MPI::Comm_test_inter __ARGS((MPI_Comm, int *));
int MPI::Dims_create __ARGS((int, int, int *));
int MPI::Errhandler_create __ARGS((MPI::Handler_function *, MPI::Errhandler *));
int MPI::Errhandler_free __ARGS((MPI::Errhandler *));
int MPI::Errhandler_get __ARGS((MPI_Comm, MPI::Errhandler *));
int MPI::Errhandler_set __ARGS((MPI_Comm, MPI::Errhandler));
int MPI::Error_class __ARGS((int, int *));
int MPI::Error_string __ARGS((int, char *, int *));
int MPI::Finalized __ARGS((int *));
int MPI::Free_mem __ARGS((void *));
int MPI::Gather __ARGS((void *, int, MPI_Datatype, void *, int, MPI_Datatype, int, MPI_Comm));
int MPI::Gatherv __ARGS((void *, int, MPI_Datatype, void *, int *,int *, MPI_Datatype, int, MPI_Comm));
int MPI::Get_address __ARGS((void *, MPI_Aint *));
int MPI::Get __ARGS((void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI::Win));
int MPI::Get_count __ARGS((MPI_Status *, MPI_Datatype, int *));
int MPI::Get_elements __ARGS((MPI_Status *, MPI_Datatype, int *));
int MPI::Get_processor_name __ARGS((char *, int *));
int MPI::Get_version __ARGS((int *, int *));
int MPI::Graph_create __ARGS((MPI_Comm, int, int *, int *, int, MPI_Comm *));
int MPI::Graphdims_get __ARGS((MPI_Comm, int *, int *));
int MPI::Graph_get __ARGS((MPI_Comm, int, int, int *, int *));
int MPI::Graph_map __ARGS((MPI_Comm, int, int *, int *, int *));
int MPI::Graph_neighbors __ARGS((MPI_Comm, int, int, int *));
int MPI::Graph_neighbors_count __ARGS((MPI_Comm, int, int *));
int MPI::Group_compare __ARGS((MPI::Group, MPI::Group, int *));
int MPI::Group_difference __ARGS((MPI::Group, MPI::Group, MPI::Group *));
int MPI::Group_excl __ARGS((MPI::Group, int, int *, MPI::Group *));
int MPI::Group_free __ARGS((MPI::Group *));
int MPI::Group_incl __ARGS((MPI::Group, int, int *, MPI::Group *));
int MPI::Group_intersection __ARGS((MPI::Group, MPI::Group, MPI::Group *));
int MPI::Group_rank __ARGS((MPI::Group, int *));
int MPI::Group_size __ARGS((MPI::Group, int *));
int MPI::Group_translate_ranks __ARGS((MPI::Group, int, int *, MPI::Group, int *));
int MPI::Group_union __ARGS((MPI::Group, MPI::Group, MPI::Group *));
int MPI::Ibsend __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *));
int MPI::Info_create __ARGS((MPI::Info *));
int MPI::Info_delete __ARGS((MPI::Info, char *));
int MPI::Info_dup __ARGS((MPI::Info, MPI::Info *));
int MPI::Info_free __ARGS((MPI::Info *));
int MPI::Info_get __ARGS((MPI::Info, char *, int, char *, int *));
int MPI::Info_get_nkeys __ARGS((MPI::Info, int *));
int MPI::Info_get_nthkey __ARGS((MPI::Info, int, char *));
int MPI::Info_get_valuelen __ARGS((MPI::Info, char *, int *, int *));
int MPI::Info_set __ARGS((MPI::Info, char *, char *));
int MPI::Init __ARGS((int *, char ***));
int MPI::Initialized __ARGS((int *));
int MPI::Intercomm_create __ARGS((MPI_Comm, int, MPI_Comm, int, int, MPI_Comm *));
int MPI::Intercomm_merge __ARGS((MPI_Comm, int, MPI_Comm *));
int MPI::Iprobe __ARGS((int, int, MPI_Comm, int *, MPI_Status *));
int MPI::Irecv __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *));
int MPI::Irsend __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *));
int MPI::Isend __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *));
int MPI::Issend __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *));
int MPI::Keyval_create __ARGS((MPI::Copy_function *, MPI::Delete_function *, int *, void *));
int MPI::Keyval_free __ARGS((int *));
int MPI::Op_create __ARGS((MPI::User_function *, int, MPI_Op *));
int MPI::Op_free __ARGS((MPI_Op *));
int MPI::Pack __ARGS((void *, int, MPI_Datatype, void *, int, int *, MPI_Comm));
int MPI::Pack_size __ARGS((int, MPI_Datatype, MPI_Comm, int *));
int MPI::Probe __ARGS((int, int, MPI_Comm, MPI_Status *));
int MPI::Put __ARGS((void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI::Win));
int MPI::Recv __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *));
int MPI::Recv_init __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *));
int MPI::Reduce __ARGS((void *, void *, int, MPI_Datatype, MPI_Op, int, MPI_Comm));
int MPI::Reduce_scatter __ARGS((void *, void *, int *, MPI_Datatype, MPI_Op, MPI_Comm));
int MPI::Request_free __ARGS((MPI_Request *));
int MPI::Rsend __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm));
int MPI::Rsend_init __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *));
int MPI::Scan __ARGS((void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm));
int MPI::Scatter __ARGS((void *, int, MPI_Datatype, void *, int, MPI_Datatype, int, MPI_Comm));
int MPI::Scatterv __ARGS((void *, int *, int *, MPI_Datatype, void *, int, MPI_Datatype, int, MPI_Comm));
int MPI::Send __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm));
int MPI::Send_init __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *));
int MPI::Sendrecv __ARGS((void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *));
int MPI::Sendrecv_replace __ARGS((void *, int, MPI_Datatype, int, int, int, int, MPI_Comm, MPI_Status *));
int MPI::Ssend __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm));
int MPI::Ssend_init __ARGS((void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *));
int MPI::Startall __ARGS((int, MPI_Request *));
int MPI::Start __ARGS((MPI_Request *));
int MPI::Testall __ARGS((int, MPI_Request *, int *, MPI_Status *));
int MPI::Testany __ARGS((int, MPI_Request *, int *, int *, MPI_Status *));
int MPI::Test __ARGS((MPI_Request *, int *, MPI_Status *));
int MPI::Test_cancelled __ARGS((MPI_Status *, int *));
int MPI::Testsome __ARGS((int, MPI_Request *, int *, int *, MPI_Status *));
int MPI::Topo_test __ARGS((MPI_Comm, int *));
int MPI::Type_commit __ARGS((MPI_Datatype *));
int MPI::Type_contiguous __ARGS((int, MPI_Datatype, MPI_Datatype *));
int MPI::Type_create_darray __ARGS((int, int, int, int *, int *, int *, int*, int, MPI_Datatype, MPI_Datatype *));
int MPI::Type_create_subarray __ARGS((int, int *, int *, int *, int, MPI_Datatype, MPI_Datatype *));
int MPI::Type_extent __ARGS((MPI_Datatype, MPI_Aint *));
int MPI::Type_free __ARGS((MPI_Datatype *));
int MPI::Type_get_contents __ARGS((MPI_Datatype, int, int, int, int *, MPI_Aint *, MPI_Datatype *));
int MPI::Type_get_envelope __ARGS((MPI_Datatype, int *, int *, int *, int *));
int MPI::Type_hindexed __ARGS((int, int *, MPI_Aint *, MPI_Datatype, MPI_Datatype *));
int MPI::Type_hvector __ARGS((int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *));
int MPI::Type_indexed __ARGS((int, int *, int *, MPI_Datatype, MPI_Datatype *));
int MPI::Type_lb __ARGS((MPI_Datatype, MPI_Aint *));
int MPI::Type_size __ARGS((MPI_Datatype, int *));
int MPI::Type_struct __ARGS((int, int *, MPI_Aint *, MPI_Datatype *, MPI_Datatype *));
int MPI::Type_ub __ARGS((MPI_Datatype, MPI_Aint *));
int MPI::Type_vector __ARGS((int, int, int, MPI_Datatype, MPI_Datatype *));
int MPI::Unpack __ARGS((void *, int, int *, void *, int, MPI_Datatype, MPI_Comm));
int MPI::Waitall __ARGS((int, MPI_Request *, MPI_Status *));
int MPI::Waitany __ARGS((int, MPI_Request *, int *, MPI_Status *));
int MPI::Wait __ARGS((MPI_Request *, MPI_Status *));
int MPI::Waitsome __ARGS((int, MPI_Request *, int *, int *, MPI_Status *));
int MPI::Win_complete __ARGS((MPI::Win));
int MPI::Win_create __ARGS((void *, MPI_Aint, int, MPI::Info, MPI_Comm, MPI::Win *));
int MPI::Win_fence __ARGS((int, MPI::Win));
int MPI::Win_free __ARGS((MPI::Win *));
int MPI::Win_get_group __ARGS((MPI::Win, MPI::Group *));
int MPI::Win_post __ARGS((MPI::Group, int, MPI::Win));
int MPI::Win_start __ARGS((MPI::Group, int, MPI::Win));
int MPI::Win_wait __ARGS((MPI::Win));
int MPI_Status_f2c __ARGS((MPI::Fint *, MPI_Status *));
MPI::Info MPI_Info_f2c __ARGS((MPI::Fint));
int MPI_Status_c2f __ARGS((MPI_Status *, MPI::Fint *));
MPI::Fint MPI_Info_c2f __ARGS((MPI::Info));
#ifdef LAM_MPI // LAM_MPI the following do not have a PMPI_ version on alc
int MPI::Close_port __ARGS((char *));
int MPI::Comm_accept __ARGS((char *, MPI::Info, int, MPI_Comm, MPI_Comm *));
int MPI::Comm_connect __ARGS((char *, MPI::Info, int, MPI_Comm, MPI_Comm *));
int MPI::Comm_create_errhandler __ARGS((MPI::Comm_errhandler_fn *, MPI::Errhandler *));
int MPI::Comm_create_keyval __ARGS((MPI::Comm_copy_attr_function *, MPI::Comm_delete_attr_function *, int *, void *));
int MPI::Comm_delete_attr __ARGS((MPI_Comm, int));
int MPI::Comm_disconnect __ARGS((MPI_Comm *));
int MPI::Comm_free_keyval __ARGS((int *));
int MPI::Comm_get_errhandler __ARGS((MPI_Comm, MPI::Errhandler *));
int MPI::Comm_get_parent __ARGS((MPI_Comm *));
int MPI::Comm_join __ARGS((int, MPI_Comm *));
int MPI::Comm_set_attr __ARGS((MPI_Comm, int, void *));
int MPI::Comm_set_errhandler __ARGS((MPI_Comm, MPI::Errhandler));
int MPI::Comm_spawn __ARGS((char *, char **, int, MPI::Info, int, MPI_Comm, MPI_Comm *, int *));
int MPI::Comm_spawn_multiple __ARGS((int, char **, char ***, int *, MPI::Info *, int, MPI_Comm, MPI_Comm *, int *));
int MPI::Is_thread_main __ARGS((int *));
int MPI::Lookup_name __ARGS((char *, MPI::Info, char *));
int MPI::Open_port __ARGS((MPI::Info, char *));
int MPI::Publish_name __ARGS((char *, MPI::Info, char *));
int MPI::Query_thread __ARGS((int *));
int MPI::Type_create_hindexed __ARGS((int, int *, MPI_Aint *, MPI_Datatype, MPI_Datatype *));
int MPI::Type_create_hvector __ARGS((int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *));
int MPI::Type_create_keyval __ARGS((MPI::Type_copy_attr_function *, MPI::Type_delete_attr_function *, int *, void *));
int MPI::Type_create_resized __ARGS((MPI_Datatype, MPI_Aint, MPI_Aint, MPI_Datatype *));
int MPI::Type_create_struct __ARGS((int, int *, MPI_Aint *, MPI_Datatype *, MPI_Datatype *));
int MPI::Type_delete_attr __ARGS((MPI_Datatype, int));
int MPI::Type_dup __ARGS((MPI_Datatype, MPI_Datatype *));
int MPI::Type_free_keyval __ARGS((int *));
int MPI::Type_get_attr __ARGS((MPI_Datatype, int, void *, int *));
int MPI::Type_get_extent __ARGS((MPI_Datatype, MPI_Aint *, MPI_Aint *));
int MPI::Type_get_name __ARGS((MPI_Datatype, char *, int *));
int MPI::Type_get_true_extent __ARGS((MPI_Datatype, MPI_Aint *, MPI_Aint *));
int MPI::Type_set_attr __ARGS((MPI_Datatype, int, void *));
int MPI::Type_set_name __ARGS((MPI_Datatype, char *));
int MPI::Unpublish_name __ARGS((char *, MPI::Info, char *));
int MPI::Win_create_errhandler __ARGS((MPI::Win_errhandler_fn *, MPI::Errhandler *));
int MPI::Win_create_keyval __ARGS((MPI::Win_copy_attr_function *, MPI::Win_delete_attr_function *, int *, void *));
int MPI::Win_delete_attr __ARGS((MPI::Win, int));
int MPI::Win_free_keyval __ARGS((int *));
int MPI::Win_get_attr __ARGS((MPI::Win, int, void *, int *));
int MPI::Win_get_errhandler __ARGS((MPI::Win, MPI::Errhandler *));
int MPI::Win_get_name __ARGS((MPI::Win, char *, int *));
int MPI::Win_set_attr __ARGS((MPI::Win, int, void *));
int MPI::Win_set_errhandler __ARGS((MPI::Win, MPI::Errhandler));
int MPI::Win_set_name __ARGS((MPI::Win, char *));
MPI::Fint MPI_Comm_c2f __ARGS((MPI_Comm));
MPI::Fint MPI_Errhandler_c2f __ARGS((MPI::Errhandler));
MPI::Fint MPI_Group_c2f __ARGS((MPI::Group));
MPI::Fint MPI_Op_c2f __ARGS((MPI_Op));
MPI::Fint MPI_Request_c2f __ARGS((MPI_Request));
MPI::Win MPI_Win_f2c __ARGS((MPI::Fint));
MPI_Comm MPI_Comm_f2c __ARGS((MPI::Fint));
MPI::Errhandler MPI_Errhandler_f2c __ARGS((MPI::Fint));
MPI::Group MPI_Group_f2c __ARGS((MPI::Fint));
MPI::Fint MPI_Type_c2f __ARGS((MPI_Datatype));
MPI::Fint MPI_Win_c2f __ARGS((MPI::Win));
MPI_Datatype MPI_Type_f2c __ARGS((MPI::Fint));
MPI_Request MPI_Request_f2c __ARGS((MPI::Fint));
#endif //ifdef LAM_MPI
