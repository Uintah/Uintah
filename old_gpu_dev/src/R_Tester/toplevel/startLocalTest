#!/bin/bash

#______________________________________________________________________
#  startLocalTest:
#     This script executes the local regression tests for a single component

#__________________________________
# define environmental variables and export them
HTMLLOG=""
LOCAL_OR_NIGHTLY_TEST="local"
WHICH_TESTS=${WHICH_TESTS:="local"}  #default value is local, it can be set by the buildbot
OS=`uname -s`
PARALLELISM=8
WEBLOG=""
BUILD_DIR=/dev/null

echo "WHICH_TESTS: $WHICH_TESTS"
export BUILD_DIR  HTMLLOG WEBLOG LOCAL_OR_NIGHTLY_TEST WHICH_TESTS OS

#__________________________________
unset SHELL
umask 002

if [ "$#" != 4 ]; then
  echo ""
  echo "Usage: startLocalTest <Path to Build Directory> <path to src directory> <is_debug_build> <sci_malloc_enabled>"
  echo "           <is_debug_build>     : 'yes' or 'no'"
  echo "           <sci_malloc_enabled> : 'yes' or 'no'"
  echo ""
  exit
fi

BUILD_DIR="$1"
SRCTOP="$2"
IS_DEBUG_BUILD="$3"     # Will be 'yes', or 'no'
SCI_MALLOC_ENABLED="$4" # Will be 'yes', or 'no'

if [ ! -d "${BUILD_DIR}" ]; then
  echo "ERROR: The build directory $BUILD_DIR does not exist.  Now exiting"
  exit -1
fi

cd "${BUILD_DIR}"

TEST_DATA="${BUILD_DIR}/TestData"
#__________________________________
#    - generate the symbolic links
#    - check for the goldStandards
mkdir local_RT > /dev/null 2>&1
cd    local_RT

if [ ! -d TestScripts ]; then
  ln -s ${SRCTOP}/R_Tester TestScripts
fi

if [ ! -f replace_all_GS ]; then
  ln -s ${SRCTOP}/R_Tester/helpers/replace_all_GS replace_all_GS
fi

if [ ! -d susdir ]; then
  ln -s ../StandAlone susdir
fi

if [ ! -d tools ]; then
  ln -s ${SRCTOP}/tools tools
fi

if [ ! -d inputs ]; then
  ln -s ${SRCTOP}/StandAlone/inputs inputs
fi

if [ -d goldStandard ]; then
  rm -f goldStandard
fi
ln -s "${TEST_DATA}" goldStandard

#__________________________________
# bulletproofing
if [ ! -d "$TEST_DATA" ]; then
  echo "__________________________________"
  echo "ERROR: gold standards directory doesn't exist: $TEST_DATA."
  echo "Run the command:"
  echo "    make gold_standards"
  echo " to generate them.  Now exiting"
  echo "__________________________________"
  exit -1;
fi

if [ ! -f susdir/sus ]; then
  echo "ERROR: The executable sus was not found.  Please compile it by running make uintah.  Now exiting"
  exit -1;
fi
if [ ! -f susdir/compare_uda ]; then
  echo "ERROR: The comparison utility compare_uda was not found.  Please compile it by running make uintah.  Now exiting"
  exit -1;
fi

# If the env var TEST_COMPONENTS is set, use it instead of asking user for component list...
if test ${TEST_COMPONENTS:+1}; then
    echo ""
    echo "Using TEST_COMPONENTS env var for list of components to test: ($TEST_COMPONENTS)"
    selectedCompTests=$TEST_COMPONENTS
else
  if test "$TERM" == "dumb" -o "$TERM" == "emacs"; then
    echo
    echo "ERROR: startLocalTest requires a fully functional terminal... you have '$TERM'."
    echo "       (Consider setting environment variable TEST_COMPONENTS.)  Goodbye."
    echo
    exit                                                                                    
  fi
  if test "$EMACS" == "t"; then
    echo
    echo "ERROR: startLocalTest cannot be run from within emacs..."
    echo "       (Consider setting environment variable TEST_COMPONENTS.)  Goodbye."
    echo
    exit                                                                                    
  fi
  #__________________________________
  # Have the user pick a component
  # find all the component tests which are python scripts

  allComponentTests=`ls TestScripts/*.py | grep -v __init__ | sed "s/.py//g" | sed "s,TestScripts/,,g"`

  list=""
  n="0"
  for comp in $allComponentTests; do
    list="$list $comp - off,"
    n=$(( $n + 1 ))
  done
  echo $list

  selectedCompTests=`dialog --stdout --separate-output --checklist "Select the component for local regression testing" 20 61 15 $list`

  if [ $? != 0 ] ; then                                                                
    echo ""
    echo "Cancel selected... Goodbye."                                                                  
    echo ""
    exit                                                                                    
  fi 
fi

#__________________________________
# Now run the tests
/bin/rm -rf log >/dev/null 2>&1

echo ""
echo ""
date
let retval=0;
for componentTest in $selectedCompTests; do
  echo "Running $componentTest Tests"

  # clean up old test results
  /bin/rm -f $componentTest.log >/dev/null 2>&1
  /bin/rm -rf $componentTest-results >/dev/null 2>&1
  /bin/rm -rf $componentTest-short.log >/dev/null 2>&1

  # create the do<component>tests  python script
  doTestScript="do${componentTest}tests"
  echo "#!/bin/tcsh"                                         >  "$doTestScript"
  echo "setenv PATH $PATH"                                   >> "$doTestScript"
  echo "setenv OS $OS"                                       >> "$doTestScript"
  echo "setenv SCI_DEBUG \"\""                               >> "$doTestScript"
  echo "setenv LOCAL_OR_NIGHTLY_TEST $LOCAL_OR_NIGHTLY_TEST" >> "$doTestScript"
  echo "setenv SCI_MALLOC_ENABLED $SCI_MALLOC_ENABLED"       >> "$doTestScript"

  BUILD_TYPE="opt"
  if [ "$IS_DEBUG_BUILD" = 'yes' ]; then
      BUILD_TYPE="dbg"
  fi

  echo "python -u TestScripts/$componentTest.py susdir inputs goldStandard $BUILD_TYPE $PARALLELISM "'$1' >> "$doTestScript"

  /bin/chmod a+x "$doTestScript"

  #__________________________________
  # run the python script that contains all the
  # tests for that component. If the return code != 0 capture it
  
  "./$doTestScript" | tee comp.log 2>&1
  
  exitCode=${PIPESTATUS[0]}
  
  mv comp.log "${componentTest}.log"
  
  echo "$componentTest exit Code: $exitCode"
  
  if test $exitCode = "0"; then
    echo "Passed: ${componentTest}-${BUILD_TYPE} tests! " >> log
  else
    echo "Failed: ${componentTest}-${BUILD_TYPE} tests " >> log
  fi
  
  if [ -f "${componentTest}-short.log" ]; then
    cat "${componentTest}-short.log" >> log
  fi
  
  
  if test $exitCode != "0"; then
    retval=$exitCode
  fi
  
  echo ""
  echo ""
done
echo "__________________________________"
echo "  S U M M A R Y "
cat log
echo ""
echo ""
echo "return code: $retval"
exit $retval

