
package XXX {
    class Class;
    class Method;
    class Object;

    /*
     * All interfaces extend this interface and all class implement it.
     * It provides basic reference counting services and run-time type
     * identification.
     */
    interface Interface {
	CIA.Object addReference();
	void deleteReference();
	CIA.Class getClass();
	bool isSame(in Interface object);
	bool isInstanceOf(in Class type);
	bool supportsInterface(in Class type);
	CIA.Interface queryInterface(in Class type);
    };

    /*
     * All class directly or indirectly extend this class. The member
     * functions are identical to that of Interface except that this class
     * provides the implementations.  Note that supportsInterface and
     * queryInterface are not final and thus may be redefined in subclasses
     * to support a query interface protocol.  Initially, the query interface
     * calls default to the equivalent functionality based on the static
     * IDL type information
     */
    class Object implements Interface {
	final CIA.Object xxaddReference();
	final void xxdeleteReference();
	final CIA.Class xxgetClass();
	final bool xxisSame(in Interface object);
	final bool xxisInstanceOf(in Class type);
	bool supportsInterface(in Class type);
	CIA.Interface queryInterface(in Class type);
    };

    /*
     * Base class for all exceptions.  This class will provide simple
     * stack trace mechanisms usable by the stubs and skeletons.
     */
    class Throwable {
	// need to add something for error reporting
    };

    /*
     * Must define standard exception classes.  Left as an excercise for
     * the reader...
     */
    class ClassNotFoundException extends Throwable {
	// say something here
    };

    /*
     * Must define standard exception classes.  Left as an excercise for
     * the reader...
     */
    class InstantiationException extends Throwable {
	// say something here
    };

    /*
     * Must define standard exception classes.  Left as an excercise for
     * the reader...
     */
    class NoSuchMethodException extends Throwable {
	// say something here
    };

    /*
     * Must define standard exception classes.  Left as an excercise for
     * the reader...
     */
    class IllegalArgumentException extends Throwable {
	// say something here
    };

    /*
     * Similar to Java java.lang.Class, this class provides basic meta-data
     * about classes in the system.  This meta-data is created from the IDL
     * specification.  Class, along with Method and its associated classes,
     * forms the foundation for run-time type indentification, reflection,
     * and dynamic method invocation.
     */
    class Class {
	static CIA.Class lookupClass(in string class_name)
	    throws CIA.ClassNotFoundException;
	final CIA.Object xxnewInstance() throws CIA.InstantiationException;
	final bool xxisInterface();
	final bool xxisArray();
	final bool xxisPrimitive();
	final string xxgetName();
	final CIA.Class xxgetSuperclass();
	final array<CIA.Class,1> xxgetInterfaces();
	final CIA.Class xxgetComponentType();
	final array<Method,1> xxgetMethods();
	final CIA.Method xxgetMethod() throws CIA.NoSuchMethodException;
	// and so on - see the Java spec for more information
    };

    /*
     * The method class represents a method of an object.  It also
     * supports the invokeMember() and invokeStatic() functions that
     * allow for dynamic invocation of methods by GUI builder tools.
     */
    class Method {
	final CIA.Class xxgetDeclaringClass();
	final string xxgetName();
	final CIA.Class xxgetReturnType();
	final array<CIA.Class,1> xxgetParameterTypes();
	final array<CIA.Class,1> xxgetExceptionTypes();
	final void xxinvokeStatic(in array<CIA.Object,1> arguments)
	    throws CIA.IllegalArgumentException;
	final void xxinvokeMember(in Object this, in array<Object,1> arguments)
	    throws CIA.IllegalArgumentException;
	// and so on - see the Java spec for more information
    };
};

