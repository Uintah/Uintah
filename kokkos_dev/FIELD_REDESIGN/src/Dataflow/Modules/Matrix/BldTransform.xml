<?xml version='1.0' encoding='us-ascii' ?>
<!DOCTYPE spec SYSTEM "spec.dtd">

<spec>

  <info>
    <name>BldTransform</name>
    <!-- hook for the menu item that launches this module -->
    <creation>BldTransform</creation>
    <description>
      <summary>BldTransform builds an arbitrary 3D translation, scale,
shear, or permutation matrix; pre- or post-applies it to an optional
input transform; and then sends out the result.</summary>
      <info-builder>
	<!-- one or more paragraphs -->
	<para> BldTransform provides an intuitive interface for
building an compositing geometric transformations.  The supported
transformations that can be generated are: translate, scale, shear,
and permute.  The values for the transformation are specified via a
tcl interface, or by interacting with a scene manipulation widget
which can be translated, rotated and scaled.  The user chooses which
type of transform they will be creating, and the interface dynamically
re-packs itself to support that transform.  The translation interface
consists of a (x,y,z) translation vector.  The scale interface
contains a scale fixed-point (x,y,z), as well as a uniform scale value
and composited, separable scale values for x, y, and z.  The shear
interface contains a shear vector, a second vector in the "shear
plane", and a point that lies on the plane (note: this is an
over-specified representation, but I believe it's the most intuitive
way to specify an arbitrary 3D shear).  The permutation interface
allow the user to build a matrix which permutes positive and negative
x, y, and z.

The widget interface is a special transformation which allows the user
to directly manipulate a scaled-box widget within the scene to
intuitively build a rotation, translation, and scale transform.  Used
in conjunction with a TransformSurface module, this widget interaction
provides an intuitive means for coregistrating two surfaces.  There
are two UI checkbuttons for the widget transform.  The first is the
"Ignore Changes" button.  When selected, any changes to the scene
widget are not reflected in the transform the module outputs.  This
mode is useful for alligning the widget with an object to be moved
(e.g. coregistration).  The second is the "Resize Separably" button.
When selected, the resize handles of the widget are shown - these can
be used for separably resizing the data in different directions.
Since most coregistration should not require separable scaling, the
default is not to sho the resize handles.  The user can perform a
uniform scale via the tcl interface (since scaled-box widgets do not
presently support such a mode).  After the scale is applied (via the
"Apply Transform" button), the scale is automatically reset to the
value 1.0.

When the module executes, it checks its optional matrix input port and
if no matrix was passed in, it build an identity matrix for input.
Then the matrix specified on the tcl interface (as described above) is
constructed.  Finally, the two matrices are multiplies together (pre-
or post-multiplied, as specified on the tcl interface) and the result
is sent out through the output port.

The module UI also has a Composite button which allows the user to
composite a sequence of transforms.  After pushing the composite
button, the current transformation is multiplied by whatever
transforms were previously composited, and the transform on the UI is
reset to be the identity.
</para>
      </info-builder>
      <info-developer>
	<!-- one or more paragraphs -->
	<para>BldTransform builds its transformation matrices using
the Geometry/Transform class.  This class has support for building
translation, scale, rotation, and permutation matrices, as well as for
pre- and post-multiplying and compositing an arbitrary number of them.</para>
	<!-- zero or more images -->
	<img></img>
      </info-developer>
    </description>
    <author>
      <!-- one or more names, last name on list assumed to be maintainer -->
      <name>
	David Weinstein
      </name>
    </author>
    <version>Version/revision number 1.5 (not currently supported)</version>
    <IO>
      <ports>
	<in>
	  <port>MatrixIPort</port>
          <!-- one or more datatype fields (list all valid) -->
	  <datatype>Matrix</datatype>
	  <!-- zero or one usage field -->
	  <usage>
	    <para>The MatrixIPort is for the optional input matrix.
If not provided, an identity matrix is constructed and used as
input.</para>
	  </usage>
	</in>
	<out>
	  <port>MatrixOPort</port>
	  <!-- one or more datatype fields (list all valid) -->
	  <datatype>Matrix</datatype>
	  <!-- zero or one usage field -->
	  <usage>
	    <para>The MatrixOPort is for the output matrix - the
product of the input matrix and the matrix constructed in this
module.</para>
	  </usage>
	  <datatype>Geom</datatype>
	  <!-- zero or one usage field -->
	  <usage>
	    <para>The GeometryOPort is for the ScaledBoxWidget - the
geometry for that widget is only visible when the user is in "widget"
transform mode.</para>
	  </usage>
	</out>
      </ports>
      <modules>
        <typin>
	  <!-- one or more name fields (list all valid) -->
          <name>BldTransform (transformations are often composited.)</name>
        </typin>
        <typout>
	  <!-- one or more name fields (list all valid) -->
          <name>TransformSurface</name>
        </typout>
      </modules>
      <!-- pointer to example network map -->
      <example>A .sr file that shows the intended use in ./doc</example>
    </IO>
    <also>
      <!-- one or more ref fields (list all valid) -->
      <ref>No reference fields yet</ref>
      <link>http://www.cool.info.about.this.module.org</link>
    </also>
    <!-- optional field -->
    <caution>
      <!-- optional field -->
      <knownbugs>
	<!-- one or more bugNum fields (list all valid) -->
	<bugNum>Bugzilla bug number</bugNum>
      </knownbugs>
      <!-- optional field -->
      <platformIssues>
	<!-- one or more issue fields (list all valid) -->
	<issue>No known platform issues</issue>
      </platformIssues>
    </caution>
    <!-- optional field -->
    <enhancements>
      <!-- one or more paragraphs -->
      <para>list future work or possible extensions to the module</para>
    </enhancements>
  </info>  

  <gui>
    <!-- one parameter field for each widget in the dialog -->
    <parameter>
      <label>Depending on the transformation to be constructed, there
will be different interface components.</label>
      <guidance>
	<!-- one or more paragraphs -->
	<para></para>
      </guidance>
      <gui-developer>
	<widgets>Identify it by widget type.</widgets>
	<use>Indicate how the code uses the parameter's value.</use>
      </gui-developer>
    </parameter>
    <img>./doc/BldTransformGUI.gif</img>
  </gui>
                         
  <testing>
    <plan>
      <procedure>
	<!-- one or more paragraphs -->
	<para>This module has no known special testing needs.</para>
      </procedure>
      <steps>
	<!-- add as many steps as needed. -->
        <step>There is no test plan.</step>
      </steps>
    </plan>
  </testing>
</spec>
