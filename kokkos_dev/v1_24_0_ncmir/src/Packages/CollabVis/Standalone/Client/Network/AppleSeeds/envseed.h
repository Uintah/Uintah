/* $Id$ */


/*
 * Copyright © 2000 The Regents of the University of California. 
 * All Rights Reserved. 
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for educational, research and non-profit purposes, without
 * fee, and without a written agreement is hereby granted, provided that the
 * above copyright notice, this paragraph and the following three paragraphs
 * appear in all copies. 
 *
 * Permission to incorporate this software into commercial products may be
 * obtained by contacting
 * Eric Lund
 * Technology Transfer Office 
 * 9500 Gilman Drive 
 * 411 University Center 
 * University of California 
 * La Jolla, CA 92093-0093
 * (858) 534-0175
 * ericlund@ucsd.edu
 *
 * This software program and documentation are copyrighted by The Regents of
 * the University of California. The software program and documentation are
 * supplied "as is", without any accompanying services from The Regents. The
 * Regents does not warrant that the operation of the program will be
 * uninterrupted or error-free. The end-user understands that the program was
 * developed for research purposes and is advised not to rely exclusively on
 * the program for any reason. 
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
 * EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED
 * HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO
 * OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
 * MODIFICATIONS. 
 */


#ifndef ENVSEED_H
#define ENVSEED_H


/*
 * This package provides facilities for examining the program environment.
 * Included are routines for parsing argv and a file search utility.
 */


#include <sys/types.h>    /* size_t */


#ifdef __cplusplus
extern "C" {
#endif


/* Unix-defined process environment; can be passed to propertyseed funcs.  */
extern char **environ;


/*
 * Error codes generated by ASENV_ParseArgv.
 *   ASENV_ARGUMENTS_NOT_ALLOWED indicates that argv includes a word that is
 *     neither a switch nor a switch value, but the list of valid switches does
 *     not include a specification for program arguments.
 *   ASENV_BAD_FORMAT indicates that the valid switch list contains an entry
 *     with a missing type name.
 *   ASENV_INVALID_VALUE indicates that argv includes a switch value that does
 *     not have the proper type for its switch.
 *   ASENV_MISSING_VALUE indicates that the last word in argv is a switch that
 *     requires a parameter.
 *   ASENV_UNKNOWN_SWITCH indicates that argv contains a switch not in valid.
 */
typedef enum {
  ASENV_ARGUMENTS_NOT_ALLOWED, ASENV_BAD_FORMAT, ASENV_INVALID_VALUE,
  ASENV_MISSING_VALUE, ASENV_UNKNOWN_SWITCH
} ASENV_ParseErrors;


/*
 * The error handler invoked by ASENV_ParseArgv.  #error# is one of the errors
 * in ASENV_ParseErrors.  #badWord# is the element of argv that contains the
 * erroneous switch, #badSwitchOffset# the offset into this element of the
 * faulty switch, and #badSwitchLen# its length.  In the case of
 * ASENV_ARGUMENTS_NOT_ALLOWED and ASENV_INVALID_VALUE errors, #badValue# is
 * the erroneous value; otherwise, it's "".
 */
typedef int (*ASENV_ErrorHandler)(ASENV_ParseErrors error,
                                  const char *badWord,
                                  unsigned badSwitchOffset,
                                  size_t badSwitchLen,
                                  const char *badValue);


/*
 * Returns the full path to a file.  Searches each of the colon-delimited
 * directories #dirs# for each of the colon-delimited file names #names#.
 * Returns the full path of the first of these that refers to an existing file,
 * or "" if none of them do.  The value returned is volatile and will be
 * overwritten by subsequent calls.
 */
const char *
ASENV_FindFile(const char *dirs,
               const char *names);


/*
 * argv parser.  Examines the program argument list #argv# to see if all
 * switches are listed in #valid#.  #valid# is a newline-separated list of
 * switch specifications, each of which has the form "name type" -- the name of
 * the switch and the type of parameter it takes.  Recognized types are "char",
 * "double", "int", and "void" (the latter for valueless switches); any other
 * type name may be used to specify switches that take an uninterpreted string
 * parameter.  A blank switch name (i.e., a specification that begins with a
 * space) indicates that program arguments of the given type are allowed.  Any
 * text beyond the type is ignored; this can be used, for example, to include
 * help text in switch specifications.  When an invalid switch is detected,
 * #handler# is called with information on the error.  If this function returns
 * a non-zero value, the bad switch (and its value, if any) are ignored and
 * parsing resumes with the next element of #argv#.  If #handler# is NULL or
 * returns 0, ASENV_ParseArgv immediately returns 0.  If no errors are detected
 * or the handler returns a non-zero value every time, the function returns 1.
 *
 * Switches begin with a hyphen.  The two switches "-" and "--" are treated
 * specially -- the first conventionally designates standard input in a list of
 * files and so is made available as a program argument; the second indicates
 * that all subsequent elements of argv should be interpreted as program
 * arguments, even those beginning with a hyphen.  ParseArgv matches each other
 * switch against three switch formats.  First, if the entire word past the
 * hyphen is a valid switch name, the word designates that switch, and, if the
 * switch takes a value, the following word is used.  Next, if the word
 * contains an equals sign and the characters before the equals constitute a
 * valid switch name, the word is a switch/value pair.  If both these fail,
 * ASENV_ParseArgv tries to interpret the word as a set of one or more single-
 * character switches.  The first of these character switches that takes a
 * value consumes the remainder of the word (or the next word, if it's the last
 * character) as its value.
 *
 * For example, if argv contains the words "-bar=x -foo", ASENV_ParseArgv will
 * first check to see if "bar=x" is a valid switch, and, if so, will use "-foo"
 * as its value if it takes one.  Next, it will check to see if "bar" is a
 * valid switch, using "x" as its value.  If neither "bar=x" nor "bar" is
 * valid, ASENV_ParseArgv will test each character of "bar=x" in turn against
 * the valid switch names.  If, for example, 'b' is a valid switch that takes
 * no value and 'a' is a switch that takes one, the word is interpreted as
 * these two switches and the value "r=x" for the 'a' switch.  If, on the other
 * hand, all five characters are valid switches and only 'x' takes a value, the
 * word is interpreted as five switches, and "-foo" is used as the value of 'x'.
 */
int
ASENV_ParseArgv(const char *const *argv,
                const char *valid,
                ASENV_ErrorHandler handler);


/*
 * Returns a value associated with a command-line switch.  After
 * ASENV_ParseArgv has been called, this function returns the #instance#th
 * value associated with #switchName#, or #defaultValue# if #switchName#
 * appears fewer than #instance# times in argv.  The function returns "" if
 * #switchName# appears in argv but takes no value (i.e., its value type is
 * "void").  An empty #switchName# ("") can be used to retrieve program args.
 */
const char *
ASENV_SwitchValueN(const char *switchName,
                   unsigned instance,
                   const char *defaultValue);
/* A special instance value for retrieving the final occurrence of a switch. */
#define ASENV_SWITCH_VALUE_LAST 0
/* A convenience macro for testing if a particular switch appears in argv. */
#define ASENV_SwitchPresent(switchName) (ASENV_SwitchValue(switchName, 0) != 0)
/* A convenience macro for retrieving the last value of a switch. */
#define ASENV_SwitchValue(switchName,defaultValue) \
  ASENV_SwitchValueN(switchName, ASENV_SWITCH_VALUE_LAST, defaultValue)


#ifdef ASENV_SHORT_NAMES

#define ARGUMENTS_NOT_ALLOWED ASENV_ARGUMENTS_NOT_ALLOWED
#define BAD_FORMAT ASENV_BAD_FORMAT
#define INVALID_VALUE ASENV_INVALID_VALUE
#define MISSING_VALUE ASENV_MISSING_VALUE
#define UNKNOWN_SWITCH ASENV_UNKNOWN_SWITCH
#define ParseErrors ASENV_ParseErrors

#define FindFile ASENV_FindFile
#define ParseArgv ASENV_ParseArgv
#define SWITCH_VALUE_LAST ASENV_SWITCH_VALUE_LAST
#define SwitchValueN ASENV_SwitchValueN
#define SwitchPresent ASENV_SwitchPresent
#define SwitchValue ASENV_SwitchValue

#endif


#ifdef __cplusplus
}
#endif


#endif
