# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("Lenny_64", "password"),
	       BuildSlave("Squeeze_64", "password",max_builds=1),
	       BuildSlave("Squeeze_32", "password",max_builds=1)]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.svnpoller import SVNPoller
source_code_svn_url='https://gforge.sci.utah.edu/svn/uintah/trunk'
svn_poller = SVNPoller(svnurl=source_code_svn_url,
		       pollinterval=1*60, # seconds -- every 1 minute
                       )
c['change_source'] = [ svn_poller ]



####### SCHEDULERS

## configure the Schedulers

from buildbot import scheduler

#daily = scheduler.Periodic("daily",["Uintah-Daily"],24*60*60)
#code_changed = scheduler.Scheduler(name="code_changed", branch=None,
#				   treeStableTimer=2*60, # wait 2 minutes
#				   builderNames=["Uintah-Incremental"])

quick = scheduler.Scheduler(name="quick-build", branch=None,
                            treeStableTimer=1*60, # wait 1 minutes
#                            builderNames=["quick-linux","quick-linux-32"])
                            builderNames=["quick-linux"])

quick_32 = scheduler.Scheduler(name="quick-build-32", branch=None,
                            treeStableTimer=5*60, # wait 5 minutes
                            builderNames=["quick-linux-32"])


full = scheduler.Scheduler(name="full-build & test", branch=None,
                           treeStableTimer=10*60, # wait 10 minutes
			   builderNames=["full-linux"])

night = scheduler.Nightly(name='nightly', builderNames=['nightly-linux'],
             		  hour=2, minute=1)


c['schedulers'] = []
#c['schedulers'] = [ daily, code_changed]
#c['schedulers'] = [ quick, full, night]
c['schedulers'] = [ quick, quick_32, full, night ]


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

from buildbot.process import factory
from buildbot.steps import source, shell


compiler_env = {'CC' : '/usr/lib/ccache/gcc',
		'CXX' : '/usr/lib/ccache/g++',
		'F77' : 'gfortran',
		'SCI_MAKE_BE_QUIET' : 'true',
		'LANG' : ''
		}

rt_env = {'GOLD_STANDARD': '/usr/local/TestData'}

third_party = ["/usr/local/Thirdparty/1.25.3/Linux/gcc-4.3.1-2-64bit"]

dbg_configure_command = ["/var/lib/buildbot/slave/uintah_quick/build/src/configure", 
                         "--enable-debug", 
                         "--enable-64bit",
		     	 "--enable-sci-malloc" ]

dbg_configure_command_32 = ["/var/lib/buildbot/slave/uintah_quick_32/build/src/configure", 
                         "--enable-debug", 
		     	 "--enable-sci-malloc" ]


opt_configure_command = ["/var/lib/buildbot/slave/uintah_full/build/src/configure", 
                         "--enable-optimize=-O3 -mfpmath=sse", 
                         "--enable-64bit", "--enable-assertion-level=0",
                         "--disable-sci-malloc" ]

opt_nightly_configure_command = ["/var/lib/buildbot/slave/uintah_full/build/src/configure", 
                         "--enable-optimize=-O3 -mfpmath=sse", 
                         "--enable-64bit", "--enable-assertion-level=0",
                         "--disable-sci-malloc", 
                         "--with-MallocTrace=/usr/local/MallocTrace"]

#src_step = [source.SVN, svnurl = source_code_svn_url, mode="update")

debug_f = factory.BuildFactory()
debug_f.addStep(source.SVN, svnurl=source_code_svn_url, mode="update",retry=(10,2))

debug_f.addStep(shell.ShellCommand,
	   description=["Doing debug configure"],
           command=dbg_configure_command,
           env=compiler_env,
           workdir='build/dbg',
	   haltOnFailure=True,
	   name="configure")

debug_f.addStep(shell.ShellCommand, 
	   description=["Doing make clean"],
           command=["make", "cleanreally"],
           env=compiler_env,
           workdir='build/dbg',
	   haltOnFailure=True,
	   name="make clean")

debug_f.addStep(shell.ShellCommand, 
	   description=["Compiling debug build"],
           command=["make", "-j4"],
           env=compiler_env,
           workdir='build/dbg',
	   haltOnFailure=True,
	   name="compile")

debug_f_32 = factory.BuildFactory()
debug_f_32.addStep(source.SVN, svnurl=source_code_svn_url, mode="update",retry=(10,2))

debug_f_32.addStep(shell.ShellCommand,
	   description=["Doing debug configure"],
           command=dbg_configure_command_32,
           env=compiler_env,
           workdir='build/dbg',
	   haltOnFailure=True,
	   name="configure")

debug_f_32.addStep(shell.ShellCommand, 
	   description=["Doing make clean"],
           command=["make", "cleanreally"],
           env=compiler_env,
           workdir='build/dbg',
	   haltOnFailure=True,
	   name="make clean")

debug_f_32.addStep(shell.ShellCommand, 
	   description=["Compiling debug build"],
           command=["make", "-j4"],
           env=compiler_env,
           workdir='build/dbg',
	   haltOnFailure=True,
	   name="compile")



optimize_f = factory.BuildFactory()
optimize_f.addStep(source.SVN, svnurl=source_code_svn_url, mode="update",retry=(10,2))

optimize_f.addStep(shell.ShellCommand,
                   description=["Doing optimize configure"],
                   command=opt_configure_command,
                   env=compiler_env,
                   workdir='build/opt',
                   haltOnFailure=True,
		   name="configure")

optimize_f.addStep(shell.ShellCommand, 
                   description=["Doing make clean"],
                   command=["make", "cleanreally"],
           	   env=compiler_env,
                   workdir='build/opt',
                   haltOnFailure=True,
	           name="make clean")

optimize_f.addStep(shell.ShellCommand, 
                   description=["Compiling optimize build"],
                   command=["make", "-j4"],
           	   env=compiler_env,
                   workdir='build/opt',
                   haltOnFailure=True,
	           name="compile")

optimize_f.addStep(shell.ShellCommand, 
                   description=["Creating inputs symbolic link"],
                   command=["/var/lib/buildbot/slave/uintah_full/build/src/scripts/create_inputs_dir.sh"],
                   workdir='build/opt/StandAlone',
                   warnOnWarnings=False,
                   warnOnFailure=False,
		   name="input_symbolic_link")

optimize_f.addStep(shell.ShellCommand, 
                   description=["Building documentation"],
                   command=["/var/lib/buildbot/slave/uintah_full/build/doc/runLatex"],
                   workdir='build/doc',
                   warnOnWarnings=False,
                   warnOnFailure=False,
		   name="build documentation")


rt_command = ["/var/lib/buildbot/slave/uintah_full/build/src/scripts/regression_tester"]

optimize_f.addStep(shell.ShellCommand, 
                   description=["Running Arches optimize tests"],
                   command=["/var/lib/buildbot/slave/uintah_full/build/src/scripts/regression_tester", "-arches", "-exact", "-opt", "-restart"],
                   env=rt_env,
                   workdir='build/opt/StandAlone',
                   warnOnWarnings=True,
		   name="arches_test")

optimize_f.addStep(shell.ShellCommand, 
                   description=["Running Example optimize tests"],
                   command=["/var/lib/buildbot/slave/uintah_full/build/src/scripts/regression_tester", "-e", "-exact", "-opt", "-restart"], 
                   env=rt_env,
                   workdir='build/opt/StandAlone',
                   warnOnWarnings=True,
		   name="examples_test")

optimize_f.addStep(shell.ShellCommand, 
                   description=["Running Models optimize tests"],
                   command=["/var/lib/buildbot/slave/uintah_full/build/src/scripts/regression_tester", "-models", "-exact", "-opt", "-restart"],
                   env=rt_env,
                   workdir='build/opt/StandAlone',
                   warnOnWarnings=True,
	           name="models_test")

optimize_f.addStep(shell.ShellCommand, 
                   description=["Running ICE optimize tests"],
                   command=["/var/lib/buildbot/slave/uintah_full/build/src/scripts/regression_tester", "-i", "-exact", "-opt", "-restart" ],
                   env=rt_env,
                   workdir='build/opt/StandAlone',
                   warnOnWarnings=True,
		   name="ice_test")

optimize_f.addStep(shell.ShellCommand, 
                   description=["Running ICE AMR optimize tests"],
                   command=["/var/lib/buildbot/slave/uintah_full/build/src/scripts/regression_tester", "-ice_amr", "-exact", "-opt", "-restart"],
                   env=rt_env,
                   workdir='build/opt/StandAlone',
                   warnOnWarnings=True,
		   name="ice_amr_test")

optimize_f.addStep(shell.ShellCommand, 
                   description=["Running MPM optimize tests"],
                   command=["/var/lib/buildbot/slave/uintah_full/build/src/scripts/regression_tester", "-m", "-exact", "-opt", "-restart"],
                   env=rt_env,
                   workdir='build/opt/StandAlone',
                   warnOnWarnings=True,
		   name="mpm_test")

optimize_f.addStep(shell.ShellCommand, 
                   description=["Running MPMICE optimize tests"],
                   command=["/var/lib/buildbot/slave/uintah_full/build/src/scripts/regression_tester", "-mi", "-exact", "-opt", "-restart"],
                   env=rt_env,
                   workdir='build/opt/StandAlone',
                   warnOnWarnings=True,
		   name="mpmice_test")

optimize_f.addStep(shell.ShellCommand, 
                   description=["Running MPMICE AMR optimize tests"],
                   command=["/var/lib/buildbot/slave/uintah_full/build/src/scripts/regression_tester", "-mpmice_amr", "-exact", "-opt","-restart"],
                   env=rt_env,
                   workdir='build/opt/StandAlone',
                   warnOnWarnings=True,
		   name="mpmice_test_amr")

optimize_f.addStep(shell.ShellCommand, 
                   description=["Running Implicit MPM optimize tests"],
                   command=["/var/lib/buildbot/slave/uintah_full/build/src/scripts/regression_tester", "-im", "-exact", "-opt", "-restart"],
                   env=rt_env,
                   workdir='build/opt/StandAlone',
                   warnOnWarnings=True,
		   name="impm_test")

optimize_f.addStep(shell.ShellCommand, 
                   description=["Running MPMArches optimize tests"],
                   command=["/var/lib/buildbot/slave/uintah_full/build/src/scripts/regression_tester", "-mpmarches", "-exact", "-opt", "-restart"],
                   env=rt_env,
                   workdir='build/opt/StandAlone',
                   warnOnWarnings=True,
		   name="mpmarches_test")



#f1.addStep(Trial(testpath="."))

night_f = factory.BuildFactory()
night_f.addStep(source.SVN, svnurl=source_code_svn_url, mode="update",retry=(10,2))

night_f.addStep(shell.ShellCommand,
                description=["Doing debug configure"],
                command=dbg_configure_command,
                env=compiler_env,
                workdir='build/dbg',
                haltOnFailure=True,
		name="configure")

night_f.addStep(shell.ShellCommand, 
                description=["Doing make clean"],
                command=["make", "cleanreally"],
                workdir='build/dbg',
                haltOnFailure=True,
		name="make clean")

night_f.addStep(shell.ShellCommand, 
                description=["Compiling debug build"],
                command=["make", "-j4"],
                workdir='build/dbg',
                haltOnFailure=True,
		name="compile")

night_f.addStep(shell.ShellCommand, 
                description=["Creating inputs symbolic link"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/create_inputs_dir.sh"],
                workdir='build/dbg/StandAlone',
                warnOnWarnings=False,
                warnOnFailure=False,
		name="input_symbolic_link")

night_f.addStep(shell.ShellCommand, 
                description=["Running Arches debug tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-arches", "-exact", "-dbg", "-restart"],
                env=rt_env,
                workdir='build/dbg/StandAlone',
                name="arches_test_dbg")

night_f.addStep(shell.ShellCommand, 
                description=["Running Examples debug tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-e", "-exact", "-dbg", "-restart"],
                env=rt_env,
                workdir='build/dbg/StandAlone',
		name="examples_test_dbg")

night_f.addStep(shell.ShellCommand, 
                description=["Running Models debug tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-models", "-exact", "-dbg","-restart"],
                env=rt_env,
                workdir='build/dbg/StandAlone',
		name="models_test_dbg")

night_f.addStep(shell.ShellCommand, 
                description=["Running ICE debug tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-i", "-exact", "-dbg","-restart"],
                env=rt_env,
                workdir='build/dbg/StandAlone',
		name="ice_test_dbg")

night_f.addStep(shell.ShellCommand, 
                description=["Running ICE AMR debug tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-ice_amr", "-exact", "-dbg","-restart"],
                env=rt_env,
                workdir='build/dbg/StandAlone',
		name="ice_amr_test_dbg")

night_f.addStep(shell.ShellCommand, 
                description=["Running MPM debug tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-m", "-exact", "-dbg","-restart"],
                env=rt_env,
                workdir='build/dbg/StandAlone',
		name="mpm_test_dbg")

night_f.addStep(shell.ShellCommand, 
                description=["Running MPMICE debug tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-mi", "-exact", "-dbg","-restart"],
                env=rt_env,
                workdir='build/dbg/StandAlone',
		name="mpmice_test_dbg")

night_f.addStep(shell.ShellCommand, 
                description=["Running MPMICE AMR debug tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-mpmice_amr", "-exact", "-dbg","-restart"],
                env=rt_env,
                workdir='build/dbg/StandAlone',
		name="mpmice_test_amr_dbg")


night_f.addStep(shell.ShellCommand, 
                description=["Running Implicit MPM debug tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-im", "-exact", "-dbg","-restart"],
                env=rt_env,
                workdir='build/dbg/StandAlone',
		name="impm_test_dbg")

night_f.addStep(shell.ShellCommand, 
                description=["Running MPMArches debug tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-mpmarches", "-exact", "-dbg","-restart"],
                env=rt_env,
                workdir='build/dbg/StandAlone',
		name="mpmarches_test_dbg")



night_f.addStep(shell.ShellCommand,
                description=["Doing optimize configure"],
                command=opt_configure_command,
                env=compiler_env,
                workdir='build/opt',
                haltOnFailure=True,
		name="configure")

night_f.addStep(shell.ShellCommand, 
                description=["Doing make clean"],
                command=["make", "cleanreally"],
                workdir='build/opt',
                haltOnFailure=True,
		name="make clean")

night_f.addStep(shell.ShellCommand, 
                description=["Compiling optimize build"],
                command=["make", "-j4"],
                workdir='build/opt',
                haltOnFailure=True,
		name="compile")

night_f.addStep(shell.ShellCommand, 
                description=["Creating inputs symbolic link"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/create_inputs_dir.sh"],
                workdir='build/opt/StandAlone',
                warnOnWarnings=False,
                warnOnFailure=False,
		hame="input_symbolic_link")

night_f.addStep(shell.ShellCommand, 
                description=["Running Arches optimize tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-arches", "-exact", "-opt","-restart"],
                env=rt_env,
                workdir='build/opt/StandAlone',
                warnOnWarnings=True,
		name="arches_test_opt")

night_f.addStep(shell.ShellCommand, 
                description=["Running Examples optimize tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-e", "-exact", "-opt","-restart"],
                env=rt_env,
                workdir='build/opt/StandAlone',
                warnOnWarnings=True,
		name="examples_test_opt")

night_f.addStep(shell.ShellCommand, 
                description=["Running Models optimize tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-models", "-exact", "-opt","-restart"],
                env=rt_env,
                workdir='build/opt/StandAlone',
                warnOnWarnings=True,
		name="models_test_opt")

night_f.addStep(shell.ShellCommand, 
                description=["Running ICE optimize tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-i", "-exact", "-opt","-restart"],
                env=rt_env,
                workdir='build/opt/StandAlone',
                warnOnWarnings=True,
		name="ice_test_opt")

night_f.addStep(shell.ShellCommand, 
                description=["Running ICE AMR optimize tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-ice_amr", "-exact", "-opt","-restart"],
                env=rt_env,
                workdir='build/opt/StandAlone',
                warnOnWarnings=True,
		name="ice_amr_test_opt")

night_f.addStep(shell.ShellCommand, 
                description=["Running MPM optimize tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-m", "-exact", "-opt","-restart"],
                env=rt_env,
                workdir='build/opt/StandAlone',
                warnOnWarnings=True,
		name="mpm_test_opt")

night_f.addStep(shell.ShellCommand, 
                description=["Running MPMICE optimize tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-mi", "-exact", "-opt","-restart"],
                env=rt_env,
                workdir='build/opt/StandAlone',
                warnOnWarnings=True,
		name="mpmice_test_opt")

night_f.addStep(shell.ShellCommand, 
                description=["Running MPMICE AMR optimize tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-mpmice_amr", "-exact", "-opt","-restart"],
                env=rt_env,
                workdir='build/opt/StandAlone',
                warnOnWarnings=True,
		name="mpmice_amr_test_opt")

night_f.addStep(shell.ShellCommand, 
                description=["Running Implicit MPM optimize tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-im", "-exact", "-opt","-restart"],
                env=rt_env,
                workdir='build/opt/StandAlone',
                warnOnWarnings=True,
		name="impm_test_opt")

night_f.addStep(shell.ShellCommand, 
                description=["Running MPMArches optimize tests"],
                command=["/var/lib/buildbot/slave/uintah_nightly/build/src/scripts/regression_tester", "-mpmarches", "-exact", "-opt","-restart"],
                env=rt_env,
                workdir='build/opt/StandAlone',
                warnOnWarnings=True,
		name="mpmarches_test_opt")




ql = {'name': "quick-linux",
      'slavename': "Lenny_64",
      'builddir': "uintah_quick",
      'factory': debug_f,
      }

ql_squeeze = {'name': "quick-linux",
      'slavename': "Squeeze_64",
      'builddir': "uintah_quick",
      'factory': debug_f,
      }

ql_squeeze_32 = {'name': "quick-linux-32",
      'slavename': "Squeeze_32",
      'builddir': "uintah_quick_32",
      'factory': debug_f_32,
      }

fl = {'name': "full-linux",
      'slavename': "Lenny_64",
      'builddir': "uintah_full",
      'factory': optimize_f,
      } 

fl_squeeze = {'name': "full-linux",
      'slavename': "Squeeze_64",
      'builddir': "uintah_full",
      'factory': optimize_f,
      } 

nl = {'name': "nightly-linux",
      	      'slavename': "Lenny_64",
      	      'builddir': "uintah_nightly",
      	      'factory': night_f,
      	     } 

nl_squeeze = {'name': "nightly-linux",
      	      'slavename': "Squeeze_64",
      	      'builddir': "uintah_nightly",
      	      'factory': night_f,
      	     } 

#c['builders'] = [quick-linux, full-linux, night-linux]
#c['builders'] = [ql, fl, nl]
c['builders'] = [ql_squeeze, ql_squeeze_32, fl_squeeze, nl_squeeze]
#c['builders'] = [ql_squeeze, fl_squeeze, nl_squeeze]
#c['builders'] = [ql-squeeze, fl-squeeze, nl-squeeze]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port="8010",allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot@buildbot.uintah.utah.edu",
                                     extraRecipients=["csafe-homebrew@cs.utah.edu"],
                                     sendToInterestedUsers=True,
				     lookup="sci.utah.edu",
				     mode="failing"))

# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Uintah"
c['projectURL'] = "http://www.uintah.utah.edu/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.uintah.utah.edu:8010/"
