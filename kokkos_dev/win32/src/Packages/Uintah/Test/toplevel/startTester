#!/bin/sh

# to differentiate among the build names & even directories
OS=`uname -s`

BUILD_DIR=/usr/csafe/raid2/csafe-tester/"$OS"
USE_DEFAULT_BUILD="yes"
SCRIPT_DIR=/usr/csafe/raid1/tester/bin
TEST_DATA=/usr/csafe/raid2/csafe-tester/"$OS"/TestData
USE_DEFAULT_TEST_DATA="yes"
TEMP_DIR=/usr/csafe/raid2/csafe-tester/"$OS"
COMPILE="yes"
USE_PREVTREE="no"
USE_TREE="new"
SEND_MAIL_TO=""
MAIL_REMAKE_LOG_TO=""
DEFAULT_MAIL_TO="csafe-homebrew@cs.utah.edu"
DEFAULT_REMAKE_LOG_TO="kuzimmer@cs.utah.edu, bigler@cs.utah.edu, sparker@cs.utah.edu, dav@cs.utah.edu, worthen@cs.utah.edu"
REPLY_TO="csafe-homebrew@cs.utah.edu"
PARALLELISM=0
VERBOSE="no"
WEEKLY="0"
NOTESTS="0"
MONTHLYBACKUP="no"
mallocstrict="no"
USER=""

# test OS, if Linux or IRIX, set appropriate compiler env. vars, else, abort
if [ "$OS" == "IRIX64" -o "$OS" == "IRIX" ]; then
    CC=cc
    CXX=CC
    F77=f77
elif [ "$OS" == "Linux" ]; then
    CC=gcc
    CXX=c++
    F77=g77

else
    echo "Unknown OS. Abort"
    exit -1
fi

export OS CC CXX F77

unset SHELL
umask 002

show_help=0
if [ "$#" == 0 ]; then
    show_help=1
fi

# command line arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
    -sendmail)
	SEND_MAIL_TO="$DEFAULT_MAIL_TO"
	MAIL_REMAKE_LOG_TO="$DEFAULT_REMAKE_LOG_TO"
	;;
    -sendmailto)
	if [ "$#" -gt 1 ]; then
	    shift
	    SEND_MAIL_TO="$1"
            REPLY_TO=""
	fi
	;;
    -verbose)
        VERBOSE="yes"
	;;
    -use_prevtree)
	USE_PREVTREE="yes"
	;;
    -use_tree)
	if [ "$#" -gt 1 ]; then
	    shift
	    USE_TREE="$1"
	fi
        USE_DEFAULT_BUILD="no"
	;;
    -build_dir)
	if [ "$#" -gt 1 ]; then
	    shift
	    BUILD_DIR="$1"
	fi
        USE_DEFAULT_BUILD="no"
	;;
    -test_data)
	if [ "$#" -gt 1 ]; then
	    shift
	    TEST_DATA="$1"
	fi
        USE_DEFAULT_TEST_DATA="no"
	;;
    -j)
	if [ "$#" -gt 1 ]; then
	    shift
	    PARALLELISM="$1"
	fi
	;;

    -weekly)
        WEEKLY="1"
        ;;
    -build_only)
        NOTESTS="1"
        ;;
    -monthlybackup)
        MONTHLYBACKUP="1"
        ;;
    -no_compile)
        COMPILE="no"
        ;;
    -malloc_strict)
        mallocstrict="yes"
        ;;
    -help)
	show_help=1
	;;
    -user)
	if [ "$#" -gt 1 ]; then
	    shift
	    USER="$1"
	fi
        ;;
     *)
	echo "$1: Unknown option, -help for help"
	exit 1
	;;
     esac
     shift
done

if [ "$USER" != "" ]; then
  if [ "$USE_DEFAULT_BUILD" = "yes" -o "$USE_DEFAULT_TEST_DATA" = "yes" ]; then
    show_help="1"
  fi
fi

# usage string - exit
if [ $show_help != "0" ]; then
    cat <<EOF
    Usage: startTester should only be run by at(1) or cron(1)
	To run immediately, use "at now" with the path to this script as stdin.
	Options:
	    -sendmail:  Send error messages to the default people
	    -sendmailto "emails":  Send error messages to these people
	    -j #:  Use # number of processors maximum
            -malloc_strict:  Have debug runs use malloc_strict 
	    -use_tree "tree": Use the given tree instead of checking one out
	    -use_prevtree: Use the previous (last_ran.lock) checkout and/or build
	    -build_only:  Test the compilation only.  Don't run the tests.
            -no_compile:  Run the tests only; assume the build is already done.
            -verbose: Display verbose output
            -weekly:  Run longer regression tests (meant for once a week)
            -build_dir: Change the directory where SCIRun is downloaded to.
            -test_data: Change the GoldStandard directory.
            -user <user>: Run the tests in Test/users/<user>/ instead of Test/
              You must use either the -use_tree or -build_dir options and
              the -test_data option
	    -help:    Display this option summary
EOF
    exit 0
fi

if [ "$WEEKLY" == "1" ]; then
  BUILD_DIR="$BUILD_DIR"/Weekly
fi

PATH="$PATH":"$SCRIPT_DIR":/usr/bin:/local/bin:/usr/sci/local/bin/:/usr/gnu/bin:/usr/local/bin:/bin:/usr/lib:.
export PATH WEEKLY mallocstrict NOTESTS USER COMPILE

# set number of processors to use when building
if [ "$PARALLELISM" == "0" ]; then
    if [ "$OS" == "IRIX64" -o "$OS" == "IRIX" ]; then
	MAKE_PARALLELISM=`/usr/sbin/sysconf NPROC_ONLN`
    else
	MAKE_PARALLELISM=1
    fi
else
	MAKE_PARALLELISM="$PARALLELISM"
fi

# use /usr/var/tmp on machines that have it, with the assumption that it will
# have more space than /tmp (true for burn at least)
if [ -d /usr/var/tmp ]; then
	TMPDIR=/usr/var/tmp
	export TMPDIR
fi

export BUILD_DIR BUILDROOT TEST_DATA PARALLELISM MAKE_PARALLELISM SEND_MAIL_TO MAIL_REMAKE_LOG_TO REPLY_TO

if [ $VERBOSE == "yes" ]; then
    echo "TIME STAMP: Regression Tester Starting at:"
    date
fi

# find the ID to append to SCIRun based on time of run - i.e., SCIRun.080102
if [ $WEEKLY == "1" ]; then
  ID=`date +%a%b%d%y`
else
  ID=`date +%m%d%y`
fi

if [ "$USER" != "" ]; then
    ID="$ID"-"$USER"
fi

if [ $USE_TREE != "new" ]; then
# use the SCIRun specified on the command line
    cd "$USE_TREE"
    BUILDROOT=`pwd`
    cd ..
    echo "Using tree at " > "$BUILDROOT"/log
    echo "$BUILDROOT" >> "$BUILDROOT"/log
    ID="$ID"-old
elif [ $USE_PREVTREE == "yes" ]; then
# use the previous build of SCIRun
    if [ ! -d "${BUILD_DIR}/last_ran.lock" ]; then
	echo "No previous build found"
	echo "${BUILD_DIR}/last_ran.lock does not exist"
	exit -1
    fi
    cd "${BUILD_DIR}/last_ran.lock"
    BUILDROOT=`pwd`
    cd ..
    echo "Using previous tree at " > "$BUILDROOT"/log
    echo "$BUILDROOT" >> "$BUILDROOT"/log
    ID="$ID"-old
else
#check out the current version
    if [ $VERBOSE == "yes" ]; then
       echo "cd $BUILD_DIR"
    fi
    cd "$BUILD_DIR"

    BUILDROOT="${BUILD_DIR}/SCIRun.${ID}"
    if [ -d "$BUILDROOT" ]; then

# don\t just set the ID directly, we have two different possibilities for ID
	NID=`date +_%H`
	ID="${ID}${NID}"
	BUILDROOT="${BUILDROOT}${NID}"
	if [ -d "$BUILDROOT" ]; then
	    NID=`date +%M`
	    ID="${ID}${NID}"
	    BUILDROOT="${BUILDROOT}${NID}"
	    if [ -d "$BUILDROOT" ]; then
		echo "SCIRun.${ID} dir already exists"
		exit -1
	    fi
	fi
    fi


    if [ $VERBOSE == "yes" ]; then
       echo "mkdir $BUILDROOT"
    fi

    umask 002

    mkdir "$BUILDROOT"

    if [ -L "${BUILD_DIR}/last_ran.lock" ]; then
	rm -f "${BUILD_DIR}/last_ran.lock" 
    fi
    ln -s "$BUILDROOT" "${BUILD_DIR}/last_ran.lock"

    if [ $VERBOSE == "yes" ]; then
      echo "Checking out latest version of Uintah at `date`" 
    fi
    echo "Checking out latest version of Uintah at `date` to " > "$BUILDROOT"/log
    echo "$BUILDROOT" >> "$BUILDROOT"/log

    if [ $VERBOSE == "yes" ]; then
	echo "TIME STAMP: SVN CHECKOUT STARTING AT:"
	date
    fi
    cd "$BUILDROOT"

    echo $PATH
    svn co https://code.sci.utah.edu/svn/SCIRun/trunk/src src  > "$BUILDROOT"/svn_co.log 2>&1
    retval=$?

    if [ $VERBOSE == "yes" ]; then
      cat "$BUILDROOT"/svn_co.log
    fi

    if [ $retval != "0" ]; then
	echo "SVN checkout failed with code $retval"
	echo "Look at ${BUILDROOT}/svn_co.log for more information"
	exit 1
    fi

# link directly from the build root to the Uintah code
    ln -s src/Packages/Uintah Uintah

    cd "$BUILD_DIR"

    if [ $VERBOSE == "yes" ]; then
	echo "TIME STAMP: SVN CHECKOUT DONE AT:"
	date
    fi
fi

# set a lock once a month for six months
if [ "$USE_TREE" == "new" -a "$USE_PREVTREE" == "no" -a `date +%d` == "01" -a "$MONTHLYBACKUP" == "1" -a "$WEEKLY" == "0" ]; then
    if [ -L "5_month.lock" ]; then
	mv -f "${BUILD_DIR}/5_month.lock" "${BUILD_DIR}/6_month.lock"
    fi
    if [ -L "4_month.lock" ]; then
	mv -f "${BUILD_DIR}/4_month.lock" "${BUILD_DIR}/5_month.lock"
    fi
    if [ -L "3_month.lock" ]; then
	mv -f "${BUILD_DIR}/3_month.lock" "${BUILD_DIR}/4_month.lock"
    fi
    if [ -L "2_month.lock" ]; then
	mv -f "${BUILD_DIR}/2_month.lock" "${BUILD_DIR}/3_month.lock"
    fi
    if [ -L "1_month.lock" ]; then
	mv -f "${BUILD_DIR}/1_month.lock" "${BUILD_DIR}/2_month.lock"
    fi
    ln -s "$BUILDROOT" "${BUILD_DIR}/1_month.lock" 
fi

# where the webpage will be, and init webpage
if [ "$WEEKLY" == "0" ]; then
    HTMLLOG=/usr/sci/projects/Uintah/csafeweb/tester/"$OS"/SCIRun.${ID}
    WEBLOG=http://www.csafe.utah.edu/tester/"$OS"/SCIRun.${ID}
else
    HTMLLOG=/usr/sci/projects/Uintah/csafeweb/tester/"$OS"/Weekly/SCIRun.${ID}
    WEBLOG=http://www.csafe.utah.edu/tester/"$OS"/Weekly/SCIRun.${ID}
fi
# set configure command options based on architecture
if [ "$OS" == "IRIX64" -o "$OS" == "IRIX" ]; then
	DBG_CONFIGURE="'--enable-package=Uintah' --enable-debug '--enable-64bit' '--with-petsc=/usr/sci/projects/Uintah/Thirdparty/1.0.0/IRIX64/MIPSpro-7.4.2m-64bit/petsc-2.2.1' '--with-hypre=/usr/sci/projects/Uintah/Thirdparty/1.0.0/IRIX64/MIPSpro-7.4.2m-64bit/hypre-1.7.7b/src/hypre' --enable-scinew-line-numbers"
#	OPT_CONFIGURE="'--enable-package=Uintah' '--enable-optimize=-O3 -INLINE:=ON:all -TARG:processor=r10k -G0 -OPT:div_split=OFF:fast_complex=ON:fast_nint=ON:Olimit=0:roundoff=3' '--disable-sci-malloc' '--enable-assertion-level=0' '--enable-64bit' '--with-petsc=/usr/sci/projects/Uintah/Thirdparty/1.0.0/IRIX64/MIPSpro-7.4.2m-64bit/petsc-2.2.1' '--with-hypre=/usr/sci/projects/Uintah/Thirdparty/1.0.0/IRIX64/MIPSpro-7.4.2m-64bit/hypre-1.7.7b/src/hypre'"
        OPT_CONFIGURE="--enable-package=Uintah --enable-64bit --enable-optimize='-O3 -G0 -OPT:div_split=OFF:Olimit=0:roundoff=3:alias=typed' --enable-assertion-level=0 --disable-sci-malloc --with-petsc=/usr/sci/projects/Uintah/Thirdparty/1.0.0/IRIX64/MIPSpro-7.4.2m-64bit/petsc-2.2.1 --with-hypre=/usr/sci/projects/Uintah/Thirdparty/1.0.0/IRIX64/MIPSpro-7.4.2m-64bit/hypre-1.7.7b/src/hypre"
else
	DBG_CONFIGURE="--enable-package='Uintah' --enable-debug --with-petsc=/usr/sci/projects/Uintah/Thirdparty/1.0.0/Linux/gcc-3.2-lam-32bit/petsc-2.2.1 --with-hypre=/usr/sci/projects/Uintah/Thirdparty/1.0.0/Linux/gcc-3.2-lam-32bit/hypre-1.7.7b/src/hypre --with-mpi=/usr/local/lam-mpi --enable-scinew-line-numbers"
	OPT_CONFIGURE="--enable-package='Uintah' '--enable-optimize=-march=pentium4 -msse -msse2 -O3' --disable-sci-malloc --enable-assertion-level=0 --with-petsc=/usr/sci/projects/Uintah/Thirdparty/1.0.0/Linux/gcc-3.2-lam-32bit/petsc-2.2.1 --with-hypre=/usr/sci/projects/Uintah/Thirdparty/1.0.0/Linux/gcc-3.2-lam-32bit/hypre-1.7.7b/src/hypre --with-mpi=/usr/local/lam-mpi"
fi

rm -f $HTMLLOG
TITLE=`date`
echo "<HTML><HEAD><TITLE> $OS tests on $TITLE</TITLE></HEAD><BODY><pre>" >> $HTMLLOG 
echo "Regression Tester results from `hostname`" >> $HTMLLOG
echo "Architecture: ${OS}" >> $HTMLLOG
echo "" >> $HTMLLOG
echo "Using build: ${BUILDROOT}" >> $HTMLLOG
echo "LOG: $HTMLLOG" >> $HTMLLOG


PATH="$BUILDROOT"/src/Packages/Uintah/Test/helpers:"$PATH"
export PATH DBG_CONFIGURE OPT_CONFIGURE HTMLLOG WEBLOG VERBOSE

if [ $VERBOSE == "yes" ]; then
   echo "Running Tests"
fi

runTests
retval=$?

chgrp -R csafe $BUILDROOT > /dev/null 2>&1
chmod -R g+w $BUILDROOT > /dev/null 2>&1


if [ $VERBOSE == "yes" ]; then
    echo "TIME STAMP: REGRESSION TESTER DONE AT:"
    date
fi

exit $retval

