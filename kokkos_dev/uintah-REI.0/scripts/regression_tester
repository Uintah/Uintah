#!/bin/sh

# Check if we are on inferno, if so, use the TestData in /usr/sci/projects
# if not revert to the 1st test_dir
hostname=`uname -n`

if test ${#GOLD_STANDARD} = 0; 
    then
    test_dir=/home/jas/mnt/TestData
else
    test_dir=${GOLD_STANDARD}
fi


did_mount=0

hostname_inf=`uname -n | grep inf`

if test "$hostname" = "$hostname_inf";
    then
    test_dir=/home/csafe/csafe-tester/Linux/TestData
    lamboot;
else
    if test ! -d $test_dir/dbg
        then 
    	/home/jas/bin/smount TestData;
	did_mount=1;
    fi
fi

if test ! -d $test_dir/dbg
    then
    echo "GOLD_STANDARD directory is not valid"
    exit
fi

#Set the default TestData directory
DIR=dbg

#Set up MPI 
MPI=''
MPI_RUN="yes"

#Set the default inputs directory
INPUTS=../../../../src/Packages/Uintah/StandAlone/inputs
input_file=

#Set the test results directory
results=TestResults
if test ! -d $results
	then
    mkdir TestResults;
fi

do_mpm=0
do_mpmf=0
do_ice=0
do_ice_amr=0
do_mpmice=0
do_mpmice_amr=0
do_models=0
do_impm=0
do_smpm=0
do_arches=0
do_mpmarches=0
do_examples=0
do_remove=0
do_restart=0

ALL=

usage () {
    echo
    echo "Usage: regression_tester [OPTION]..."
    echo "Run the regression tester.  With no OPTION, run all the tests."
    echo
    echo "  -main          run the mpm,ice,mpmice,arches and mpmarches tests"
    echo "  -all           run all tests (overrides other tests flags)"
    echo "  -ar            run the arches tests"
    echo "  -ice_amr       run the tests ice amr tests"
    echo "  -e             run the example tests"
    echo "  -m             run the mpm tests"
    echo "  -models        run the Models tests"
    echo "  -ma            run the mpmarches tests"
    echo "  -sm            run the smpm tests"
    echo "  -i             run the ice tests"
    echo "  -mi            run the mpmice tests"
    echo "  -mpmice_amr    run the mpmice amr tests"
    echo "  -im            run the implicit mpm tests"
    echo "  -dbg           use the dbg TestData"
    echo "  -opt           use the opt TestData"
    echo "  -nompi         do not use mpi"
    echo "  -restart       restart and compare with the original uda.000"
    echo "  -clean         remove the *.out *.compare and uda directories"
    echo "  -h[elp]        display this help and exit"
    echo;
    exit
}

for arg in $*; do

    case $arg in
	-all)
            ALL=yes
            ;;
        -main)
	    echo; echo "Running mpm, ice, and mpmice tests . . ."
	    do_ice=1
	    do_mpm=1
           do_mpmf=1
	    do_mpmice=1
           do_models=1
	    do_arches=1
	    do_mpmarches=1
	    do_examples=1;;
	-ar)
	    echo; echo "Running the arches tests . . ."
	    do_arches=1;;
	-ice_amr)
	    echo; echo "Running the ICE AMR tests . . ."
	    do_ice_amr=1;;
	-e)
	    echo; echo "Running the examples tests . . ."
	    do_examples=1;;
	-i) 
	    echo; echo "Running the ice tests . . ."
	    do_ice=1;;
	-m)
	    echo; echo "Running the mpm tests . . ."
	    do_mpm=1;;
	-mf)
	    echo; echo "Running the mpmfracture tests . . ."
	    do_mpmf=1;;
	-models)
	    echo; echo "Running the models tests . . ."
	    do_models=1;;
	-ma)
	    echo; echo "Running the mpmarches tests . . ."
	    do_mpmarches=1;;
	-sm)
	    echo; echo "Running the smpm tests . . ."
	    do_smpm=1;;
	-mi)
	    echo; echo "Running the mpmice tests . . ."
	    do_mpmice=1;;
	-mpmice_amr)
	    echo; echo "Running the MPMICE AMR tests . . ."
	    do_mpmice_amr=1;;
	-im)
	    echo; echo "Running the implicit mpm tests . . ."
	    do_impm=1;;
	-clean)
	    echo; echo "Removing *.out *.compare and *.uda files . . ."
	    do_remove=1;;
	-dbg)
	    echo; echo "Using the dbg TestData . . ."
	    DIR=dbg;;
	-opt)
	    echo; echo "Using the opt TestData . . ."
	    DIR=opt;;
        -nompi)
            echo; echo "Not using mpi . . ."
            MPI_RUN="no";;
        -restart)
            echo; echo "Doing restart tests . . ."
            do_restart=1;;
        *)
	    usage ;;
    esac
done

# If no args, do all tests.
if test $# = 0; then
   ALL=yes
fi

echo;echo "Using the "$DIR "gold standard directory"


# Set up the various test cases


mpm_test_cases="disks2mat4patch heatcond2mat inclined_plane_sphere foam_crush const_test_hypo const_test_cmr const_test_nhp const_test_vs adiCuJC4000s696K adiCuMTS4000s696K adiCuPTW4000s696K adiCuSCG4000s696K adiCuZA4000s696K test_corrug_plate test_cyl_pene_no_ero test_gurson_beckerdrucker_mts testConvert1MAdd"
mpmf_test_cases="regressionFMPM"
ice_test_cases="advect rieman_sm impHotBlob hotBlob2mat hotBlob2mat_sym hotBlob2mat8patch"
ice_amr_test_cases="hotBlob_AMR advect2matAMR"
mpmice_test_cases="advect massX guni2dRT TRWnoz testConvertMPMICEAdd"
mpmice_amr_test_cases="advect_2L_MI"
model_test_cases="HePlume JP8_Radiation"
smpm_test_cases="test_plane_shell_punch test_sphere_shell_compress"
impm_test_cases="4disks_2d.1mat billet.static adiCuJC01s296K adiCuMTS01s296K adiCuPTW01s296K adiCuSCG01s296K adiCuZA01s296K"
arches_test_cases="methane_explicit_table"
mpmarches_test_cases="jp8cyl"
examples_test_cases="poisson1 poisson2"

#IRIX tests
OS=`uname -s`
if test $OS = "IRIX64"; then
  mpmice_test_cases="advect massX thermx thermx8patch guni2dRT TRWnoz testConvertMPMICEAdd"
fi



# Check if the applications sus and compare_uda are available

if test ! -x sus; then
    echo; echo "sus is not available . . . exiting"
    exit
fi

if test ! -x compare_uda; then
    echo; echo "compare_uda is not available . . . exiting"
    exit
fi

if test ! -e inputs; then
    echo; echo "'inputs' data directory is not available . . . exiting"
    exit
fi

if test  -e $results; then
   echo; echo "cleaning out old "$results "directory"
   rm -rf $results/*
fi


REMOVE () {
    if test -a chem.bin
    	then
    	rm -f chem.bin;
    fi	
    if test -a input.dtd
       then
       rm -f input.dtd;
    fi
    rm -rf $results;
}

num_proc () {
	numproc=`grep -m1 patches $input_file | sed -e :a -e 's/<[^>]*>//g;/</N;//ba' | sed -e 's/\[//g' | sed 's/\]//g' | awk '{split($0,patch,","); print patch[1]*patch[2]*patch[3]}'`
}


run_test () {
    cd $results
    cp ../$INPUTS/$CASE/$n.ups ../$n.ups.rt
    input_file=../$n.ups.rt

    num_proc
   
    if test $MPI_RUN == "yes";
        then 
        if test $numproc -gt 1;
            then
            MPI="mpirun -np $numproc"
        elif test -n "$MPI" ;
            then
            echo $MPI
        else
            MPI=""
        fi
    else
        MPI=""
    fi

    echo; echo "Running $MPI sus $opts $input_file"
    $MPI ../sus $opts $input_file &> $n.out
    rm $input_file

    success=`grep "successfully" $n.out`
    if test -n "$success";
	then 
	echo $success
	cd ..
    else
	echo; echo "FAILURE running sus . . ."
	cd ..
	continue;
    fi

}


compare_results () {
    cd $results
    
    #Inside of the component directory find the location of the 
    #gold standard uda and pass it to compare_uda
    
    uda_tmp=`echo $uda |tr "[/]" "[ ]"`  # eliminate "/" from $uda
    goldStandard=`find $test_dir/$DIR/$CASE -maxdepth 3 -type d -name $uda_tmp`
    echo "Comparing $uda results against $goldStandard"
    
    ../compare_uda $goldStandard $uda &> $n.compare
    
    compare=`grep "passed" $n.compare`
    if test -n "$compare";
	then
	echo $compare
	cd ..
    else
	echo; echo "FAILURE running compare_uda . . ."
	cd ..
    fi
}

run_restart () {
    if test $do_restart -eq 1; 
        then
        cd $results
        

        uda_new=`echo $uda | tr -d "/"`

        echo; echo "Running $MPI sus $opts -restart -t 0 -copy $uda_new.000"
        $MPI ../sus $opts -restart -t 0 -copy $uda_new.000 &> $n.out_restart
        success=`grep "successfully" $n.out_restart`
        if test -n "$success";
            then 
            echo $success
            echo "Comparing restart results"
            echo "compare_uda $uda_new.000 $uda_new.001"
            ../compare_uda $uda_new.000 $uda_new.001 &> $n.compare_restart
            compare=`grep "passed" $n.compare_restart`
            if test -n "$compare";
                then
                echo $compare
            else
                echo; echo "FAILURE running compare_uda on restart test . . ."
            fi
        else
            echo; echo "FAILURE running sus . . ."
        fi
        cd ..
    fi
}

mpm_test () {
    echo; echo "Testing $mpm_test_cases"
    
    for n in $mpm_test_cases; do
	run_test
	uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | awk '{print $1}'  `
	compare_results 
       run_restart
    done
}

mpmf_test () {
    echo; echo "Testing $mpmf_test_cases"
    
    for n in $mpmf_test_cases; do
	run_test
	uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | awk '{print $1}'  `
	compare_results 
        run_restart
        MPI=""
    done
}

mpmice_test () {
    echo; echo "Testing $mpmice_test_cases"
    
    for n in $mpmice_test_cases; do
	run_test
	uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<*filebase\>//g | sed s/\<// | awk '{print $1}'  `
	compare_results
        run_restart
        MPI=""
    done
}
model_test () {
    echo; echo "Testing $model_test_cases"
    echo "making link to inputs directory"
    cd $results
    ln -s ../inputs .
    cd ..
    
    for n in $model_test_cases; do
	run_test
	uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<*filebase\>//g | sed s/\<// | awk '{print $1}'  `
	compare_results
        run_restart
        MPI=""
    done
}
impm_test () {
    echo; echo "Testing $impm_test_cases"
    
    for n in $impm_test_cases; do
	run_test
	uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<*filebase\>//g | sed s/\<// | awk '{print $1}'  `
	compare_results
        run_restart
    done
    MPI=""
}

smpm_test () {
    echo; echo "Testing $smpm_test_cases"
    
    for n in $smpm_test_cases; do
	run_test
	uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | sed 's/^[ ^t]*//'  `
	compare_results
        run_restart
        MPI=""
    done
}


ice_test () {
    echo; echo "Testing $ice_test_cases"
    
    for n in $ice_test_cases; do
	run_test
	uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | sed 's/^[ ^t]*//'  `
	compare_results
        run_restart
        MPI=""
    done
}
ice_amr_test () {
    echo; echo "Testing $ice_amr_test_cases"
    
    for n in $ice_amr_test_cases; do
	run_test
	uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | sed 's/^[ ^t]*//'  `
	compare_results
        run_restart
        MPI=""
    done
}
mpmice_amr_test () {
    echo; echo "Testing $mpmice_amr_test_cases"
    
    for n in $mpmice_amr_test_cases; do
	run_test
	uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | sed 's/^[ ^t]*//'  `
	compare_results
        run_restart
        MPI=""
    done
}

arches_test () {
    echo; echo "Testing $arches_test_cases"
    
    for n in $arches_test_cases; do
	echo; echo "Running mpirun -np 1 sus -arches $INPUTS/$CASE/$n.ups"
	uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | sed 's/^[ ^t]*//'  `
	cp $INPUTS/ARCHES/chem_bins/chem_meth.linux.bin chem.bin
	cp $INPUTS/ARCHES/input.dtd input.dtd
	mpirun -np 1 sus -arches -mpi $INPUTS/$CASE/$n.ups &> $n.out
	success=`grep "successfully" $n.out`
	if test -n "$success";
	    then 
	    echo $success
	else
	    echo; echo "FAILURE running sus . . ."
	    continue;
	fi

	compare_results
        run_restart
        MPI=""
    done
}

mpmarches_test () {
    echo; echo "Testing $mpmarches_test_cases"
    
    for n in $mpmarches_test_cases; do

	uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | sed 's/^[ ^t]*//'  `
	cd $results
#	cp $INPUTS/MPMARCHES/chem_hept_westbrook.linux.bin chem.bin
	cp ../$INPUTS/MPMARCHES/input.dtd input.dtd
	cp ../$INPUTS/ARCHES/StaticMixingTables/JP-8/NAE.rxn.new NAE.rxn.new
	cd ../

        MPI_RUN_OLD=$MPI_RUN
        MPI_RUN="yes"
	MPI='mpirun -np 1'
	run_test

#	mpirun -np 1 sus -mpmarches $INPUTS/$CASE/$n.ups &> $n.out
	
	compare_results
        run_restart
        MPI=""
    done
}

examples_test () {
    echo; echo "Testing $examples_test_cases"
    
    for n in $examples_test_cases; do
	echo; echo "Running sus -poisson1 $INPUTS/$CASE/$n.ups"
	uda=`grep filebase $INPUTS/$CASE/$n.ups | sed s/\<//g | sed s/filebase//g | sed s/\>//g  | sed 's/^[ ^t]*//'  `
	sus -poisson1 $INPUTS/$CASE/$n.ups &> $n.out
	success=`grep "successfully" $n.out`
	if test -n "$success";
	    then 
	    echo $success
	else
	    echo; echo "FAILURE running sus . . ."
	    continue;
	fi

	compare_results
        run_restart
        MPI=""
    done
}

if test -n "$ALL"; then
    echo; echo "Running all the tests (Using $test_dir)"
    mpm_test;
    mpmf_test;
    ice_test;
    ice_amr_test;
    smpm_test;
    mpmice_test;
    mpmice_amr_test;
    model_test;
    arches_test;
    mpmarches_test;
    examples_test;
    exit
fi

# Actually do the tests

echo
echo "Using $test_dir"
echo

if test $do_mpm -eq 1; then
    CASE=MPM
    opts=-mpm
    mpm_test
fi

if test $do_mpmf -eq 1; then
    CASE=MPMF
    opts=-mpmf
    mpmf_test
fi

if test $do_ice -eq 1; then
    CASE=ICE
    opts=-ice
    ice_test
fi
if test $do_ice_amr -eq 1; then
    CASE=ICE    # this won't work when we have MPMICE AMR
    opts=-ice
    ice_amr_test
fi
if test $do_mpmice -eq 1; then
    CASE=MPMICE
    opts=-mpmice
    mpmice_test
fi
if test $do_mpmice_amr -eq 1; then
    CASE=MPMICE
    opts=-mpmice
    mpmice_amr_test
fi
if test $do_models -eq 1; then 
    CASE=Models
    opts="-mpi"
    model_test
fi
if test $do_smpm -eq 1; then
    CASE=SMPM
    opts=-smpm
    smpm_test
fi

if test $do_impm -eq 1; then
    CASE=IMPM
    MPI="mpirun -np 1 "
    opts="-impm"
    impm_test
fi

if test $do_arches -eq 1; then
    CASE=ARCHES
    opts=-arches
    arches_test
fi

if test $do_mpmarches -eq 1; then
    CASE=MPMARCHES
    opts=-mpmarches
    mpmarches_test
fi

if test $do_examples -eq 1; then
    CASE=Examples
    examples_test
fi

if test $do_remove -eq 1; then
    REMOVE
fi

if test "$hostname" != "$hostname_inf" && test $did_mount -eq 1; then
    /home/jas/bin/sunmount TestData
fi

if test "$hostname" = "$hostname_inf"; then
	lamhalt
fi
