______________________________________________________________________
This file contains code that currently isn't being used but we want to 
keep around in case we ever want to dust it off and use it.  Please put 
a date around the stuff you put in this file so we know how long to keep
it.

____________________Initialize with Vortices_____________________________
07/16/04
This initializes the flow field with 2 vortices.  Put this code in right 
after the initializeCells() routine in ICE.cc

See "Boundary Conditions for Direct Simulations of Compressible Viscous
     Flows" by Poinsot & LeLe pg 121

double R = 0.5;           // vortex radius
double R_sqr = R * R;
double p_ref  = 101325;   // reference pressure
int    n_vortices  = 2;   // Number for vortices

// vortex strength
vector<double> C(n_vortices + 1);
C[0] = 100;
C[1] = -100.0;

//vortex origin
vector<Vector> origin(n_vortices + 1);
origin[0] = Vector(0,0.5,0);
origin[1] = Vector(0,-0.5,0);

for(int i = 0; i < n_vortices; i++ ) {
  double C1 = C[i];
  
  for(CellIterator iter=patch->getCellIterator(); !iter.done();iter++) {
    IntVector c = *iter;
    Point pt = patch->cellPosition(c);

    double x = pt.x() - origin[i].x();
    double y = pt.y() - origin[i].y();
    double r = sqrt( x*x + y*y);

    if(r <= R ) {
      double A = exp( -((x*x) + (y*y) )/(2 * R_sqr)); 

      press_CC[c] = p_ref + rho_CC[m][c] * ((C1*C1)/R_sqr) * A; 

      double uvel = vel_CC[m][c].x();
      double vvel = vel_CC[m][c].y();

      vel_CC[m][c].x(uvel - ((C1 * y)/(rho_CC[m][c] * R_sqr) ) * A);
      vel_CC[m][c].y(vvel + ((C1 * x)/(rho_CC[m][c] * R_sqr) ) * A);
    }
   }
  }

