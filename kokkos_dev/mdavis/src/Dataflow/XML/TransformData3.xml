<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "component.dtd">
<?xml-stylesheet href="component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
-->



<component name="TransformData3" category="FieldsData">
  <overview>
    <authors>
      <author>Michael Callahan</author>
    </authors>
    <summary>Perform a specified functional transform on all of the
  data in a field.</summary>
    <description>

	<p>Compute the specified function for each tripple of
        corresponding data elements in the input fields.  In order to
        correspond the data points, this module requires that the
        three input fields share the same mesh and have their data at
        the same location.</p>
  
        <p>The data transform is specified in the GUI as the body of a
        C++ function.  The input values to the function are the x, y,
        and z positions of the data point, v0 for the first field's
        data element, v1 for the second field's data element, and v2
        for the third field's data element.  No value is returned,
        rather set the 'result' variable to the return type.  For
        example, "result = v0 + v1 + v3;" would add each of the
        corresponding elements of the two fields.  "result =
        Vector(v0, v1, v2);" would concatenate the values of three
        scalar fields into a vector field.</p>

    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
        <name>Input Field 0</name>
	<datatype>SCIRun::Field</datatype>
      </port>
      <port>
        <name>Input Field 1</name>
	<datatype>SCIRun::Field</datatype>
      </port>
      <port>
        <name>Input Field 2</name>
	<datatype>SCIRun::Field</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
        <name>Output Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
    </outputs>
  </io>
  <gui>
  </gui>
  <testing>
  </testing>
<nets>
<net id="TransformData3">
<title>TransformData3 Regression Test</title>

<p>Use the TransformData3 to merge three scalar fields into a vector
field.  First we create a PointCloudField by resampling a square
lattice.  Then <modref package="SCIRun" name="TransformData"/> is used repeatedly to create three scalar
fields, one containin the X positions, one containing the Y positions,
and one containing the Z positions.  Then TransformData3 is used to
merge these three scalar fields into one vector field.  Finally that
vector field is visualized using <modref package="SCIRun" name="ShowField"/>.  Note that this
network is meant to demonstrate useage of the TransformData3 module
and thus is not the most efficient means of creating the final field.
The same field would be created by running the results of <modref package="SCIRun" name="SampleField"/>
through a <modref package="SCIRun" name="TransformData"/> module with the function set to be
"result = Vector(x, y z);" and the output to be of type Vector.</p>

<p>This network can be found at src/nets/Modules/FieldsData/TransformData3.net.</p>

</net>
</nets>
</component>
