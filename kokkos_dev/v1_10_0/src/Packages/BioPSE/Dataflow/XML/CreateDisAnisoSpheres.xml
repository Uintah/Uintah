<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "../../../../../doc/Utilities/XML/component.dtd">

<component name="CreateDisAnisoSpheres" category="Forward">
  <overview>

    <authors>
      <author>Sascha Moehrs</author>
    </authors>

	<summary>Scale the geometry of a sphere to a requested size and assign a conductivity tensor to each cell;</summary>

    <description>
      <p>Date: January 2003; Version: 1.0</p>
	  <p>The module creates a discrete version of a 4-layer anisotropic spherical volume conductor which resembles the human head.
         The volume conductor consists of four concentric spheres, where each sphere can have different radial and tangential conductivities.
         Thus, the input mesh, which is supposed to be a discrete unit sphere, is scaled to the outer radius of the model. 
         The radii of all four layers should be provided via the input port 'SphereRadii'. Moreover, a conductivity tensor is assigned to
         each cell, i.e. based on the distance of the cell to the sphere center the cell is associated with one of the four layers, then,
         based on the radial and tangential conductivities at port 'AnisoConductivities', a conductivity tensor is computed for that
         cell.
    </p>
    </description>

  </overview>

  <io>

    <inputs lastportdynamic="no">
      <port>
        <name>Mesh</name>
		<description> The port takes a handle of the Hex / or Tet Field</description>
		<datatype>SCIRun::Field</datatype>
      </port>
	  <port>
		<name>SphereRadii</name>
		<description>Radii of the brain, cbsf, skull, scalp</description>
		<datatype>SCIRun::Matrix</datatype>
	  </port>
	  <port>
		<name>AnisoConductivities</name>
		<description> The port takes a matrix containing radial and tangential conductivities of all 4 layers</description>
		<datatype>SCIRun::Matrix</datatype>
	  </port>
    </inputs>

    <outputs>
      <port>
        <name>Mesh</name>
		<description>Hex Field with conductivities assigned to each element</description>
		<datatype>SCIRun::Field</datatype>
      </port>
	  
    </outputs>
  </io>

  <gui>
	
  </gui>
  
</component>
