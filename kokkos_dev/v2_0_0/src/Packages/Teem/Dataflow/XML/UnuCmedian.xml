<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "../../../../Dataflow/XML/component.dtd">

<!--
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
-->


<component name="UnuCmedian" category="Unu">
  <overview>
    <authors>
      <author>Martin Cole</author>
    </authors>
    <summary>Cheap histogram-based median filtering</summary>
    <description>
      <p>Cheap histogram-based median filtering. Only works on 1, 2,
or 3 dimensional data (not counting the tuple axis). The window over
which filtering is done is always square, and only a simplistic
weighting scheme is available. The filtering works by forming a
histogram of the values in the window, and updating it as the window
slides through the volume. Because of this histogramming, precision
will be lost on anything other than 8-bit data (assuming a sane #
bins). Also, this is "cheap" because it doesn't do any filtering on
the border (as defined by radius). values at these locations are
simply copied from input.
      </p>
      <p>
The filter is applied as if there were always scalars along the tuple
axis, for example if you have a Vector set in along the tuple axis,
then your Vectors x component is in the first position, y the second,
z the third along the tuple axis. Each component gets the filter
applied independently.
      </p>
    </description>
    <examplesr>Teem/nets/cmedian.net</examplesr>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
        <name>nin</name>
	<datatype>Teem::Nrrd</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
        <name>nout</name>
	<datatype>Teem::Nrrd</datatype>
      </port>
    </outputs>
  </io>
  <testing>
  </testing>
</component>
