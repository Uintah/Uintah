<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "component.dtd">
<?xml-stylesheet href="component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
-->


<component name="TransformData" category="FieldsData">
  <overview>
    <authors>
      <author>Michael Callahan</author>
    </authors>
    <summary>Perform a specified functional transform on all of the
  data in a field.</summary>
    <description>
    	<p>Compute the specified function on each data element in the
	 input field.</p>

        <p>The data transform is specified in the GUI as the body of a
	C++ function.  The input values to the function are x, y, z,
	and v, where x, y, and z are the positions of the data point
	and v is the value of the input field's data element.  No
	value is returned, rather set the 'result' variable to the
	return type.  For example, "result = x + v;" would return a
	new field containing the x position of each element added with
	the value that was already there. "result = v.x();" could be
	used to extract the x component of a vector field into a
	scalar field.</p>

    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
        <name>Input Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
        <name>Output Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
    </outputs>
  </io>
  <gui>
  </gui>
  <testing>
  </testing>
</component>
