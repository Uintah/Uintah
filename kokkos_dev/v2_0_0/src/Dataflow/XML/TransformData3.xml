<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "component.dtd">
<?xml-stylesheet href="component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
-->


<component name="TransformData3" category="FieldsData">
  <overview>
    <authors>
      <author>Michael Callahan</author>
    </authors>
    <summary>Perform a specified functional transform on all of the
  data in a field.</summary>
    <description>

	<p>Compute the specified function for each tripple of
        corresponding data elements in the input fields.  In order to
        correspond the data points, this module requires that the
        three input fields share the same mesh and have their data at
        the same location.</p>
  
        <p>The data transform is specified in the GUI as the body of a
        C++ function.  The input values to the function are the x, y,
        and z positions of the data point, v0 for the first field's
        data element, v1 for the second field's data element, and v2
        for the third field's data element.  No value is returned,
        rather set the 'result' variable to the return type.  For
        example, "result = v0 + v1 + v3;" would add each of the
        corresponding elements of the two fields.  "result =
        Vector(v0, v1, v2);" would concatenate the values of three
        scalar fields into a vector field.</p>

    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
        <name>Input Field 0</name>
	<datatype>SCIRun::Field</datatype>
      </port>
      <port>
        <name>Input Field 1</name>
	<datatype>SCIRun::Field</datatype>
      </port>
      <port>
        <name>Input Field 2</name>
	<datatype>SCIRun::Field</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
        <name>Output Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
    </outputs>
  </io>
  <gui>
  </gui>
  <testing>
  </testing>
</component>
