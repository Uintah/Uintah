/*
 *
 * NetConnection: Abstraction for a network connection.
 * $Id$
 *
 * Written by:
 *   Author: Eric Luke
 *   Department of Computer Science
 *   University of Utah
 *   Date: April 2001
 *
 */

#ifndef __NetConnection_h_
#define __NetConnection_h_

#include <Network/PTPConnection.h>
#include <Network/dataItem.h>

#include <Thread/Runnable.h>
#include <Thread/Mailbox.h>
#include <Thread/CrowdMonitor.h>

#include <Logging/Log.h>

namespace SemotusVisum {
namespace Network {

class NetConnection;

/**************************************
 
CLASS
   NetConnectionHelper
   
KEYWORDS
   Network
   
DESCRIPTION

   NetConnectionHelper is a helper to a network connection. It performs
   blocking network actions (read/write), and should thus be run in
   a different thread than its parent NetConnection.
   
****************************************/
class NetConnectionHelper : public Runnable {
public:

  //////////
  // Constructor. Initializes our parent.
  NetConnectionHelper( NetConnection *parent );

  //////////
  // Destructor. Cleans up our resources.
  ~NetConnectionHelper();

  //////////
  // Run method, which waits for reads and writes to our connection.
  virtual void   run();

protected:
  // Pointer to our parent
  NetConnection * parent;
  
};

/**************************************
 
CLASS
   NetMonitor
   
KEYWORDS
   Network
   
DESCRIPTION

   NetMonitor both disposes of NetConnections that are no longer active
   (ie, have disconnected), and notifies NetConnections when they have
   data ready to read. Furthermore, it also handles callbacks for
   incoming client handshake data. 
   
****************************************/

class NetMonitor : public Runnable {
public:

  //////////
  // Constructor. Gives us a ref to a list of net connections, as well
  // as a lock for that list.
  NetMonitor( list<NetConnection*>& connectList,
	      CrowdMonitor & connectListLock);

  //////////
  // Destructor. 
  ~NetMonitor();

  //////////
  // Run method, which checks both the mailboxs and the network for events.
  virtual void run();

  //////////
  // Returns a reference to our remove mailbox.
  inline Mailbox<NetConnection*>& getMailbox() {
    return removeBox;
  }

  inline Mailbox<MessageData>& getHandshakeBox() {
    return handshakeBox;
  }
  
protected:
  Mailbox<NetConnection*> removeBox;     // Net connections to remove.
  Mailbox<MessageData>        handshakeBox;  // Mailbox for handshake data.
  list<NetConnection*> &connectList;     // Connection list to monitor 
  CrowdMonitor         &connectListLock; // Lock for connection list
};


/**************************************
 
CLASS
   NetConnection
   
KEYWORDS
   Network
   
DESCRIPTION

   NetConnection is an interface to a network connection. 
   
****************************************/

const int MAX_UNAVAILABLE   = 5;    // Max # times a connection is unavailable
                                    // before we consider it disconnected.
const int MAX_PENDING_ITEMS = 15;   // Max # items in our mailbox

const int MAX_MSG_SIZE      = 2048; // Max size of a client->server message

class NetConnection {
  friend class NetMonitor;
  friend class NetConnectionHelper;
public:

  //////////
  // Constructor. Initializes our connection, as well as the name of the
  // client that is initiating this connection.
  NetConnection( Connection &connection, 
		 const char * name );


  //////////
  // Copy constructor. Copies the name and connection, but creates a new
  // mailbox (as they can't be shared)...
  NetConnection( const NetConnection& netConnect);

  
  //////////
  // Tests for equality.
  bool operator==( const NetConnection& netConnect );
  
  //////////
  // Destructor. Deallocates all memory.
  ~NetConnection();


  //////////
  // Returns the mailbox for this network connection.
  inline Mailbox<dataItem>& getMailbox() {
    //Logging::Log::log( Logging::DEBUG, "Grabbing mailbox!" );
    return mbox;
  }

  //////////
  // Returns the name of the client initiating this connection.
  inline  char * getName() {
    return name;
  }

  //////////
  // Returns the low-level connection.
  inline Connection& getConnection() {
    return connection;
  }
  
  //////////
  // Turns on/off use of the network dispatch manager. Adds an optional
  // extra function to be called when we get data.
  static inline void useDM( bool use,  void (*func)(void *) = NULL ) {
    NetConnection::useDispatchManager = use;
    NetConnection::callbackFunction = func;
  }

  // Mutex to prevent us from looking for new data while we're still
  // currently reading data.
  Mutex readingData;

  int reading;

  static inline NetMonitor& getNetMonitor() {
    return netMonitor;
  }
  
protected:

  // Thread for network monitor. 
  static SemotusVisum::Thread::Thread *incomingThread;

  // List of all active connections.
  static list<NetConnection*> connectionList;

  // Lock to ensure that we don't munge our connection list.
  static CrowdMonitor connectionListLock;

  // Monitors all sockets for incoming connections.
  static NetMonitor netMonitor;

  // True if we should use the net dispatch manager for inbound data.
  static bool useDispatchManager;

  // Callback function to call if we are not using the dispatch manager.
  static void (*callbackFunction)(void *);
  
  // Sends messages to all net connections who have data available.
  // NOTE - THIS FUNCTION BLOCKS!
  static void notifyDataAvailable();
  
  // Writes data to the network.
  int                 write( const char * data, const int numBytes );

  // Name of the client on this connection.
  char                *name;

  // Underlying low-level connection
  Connection          &connection;

  // Mailbox for incoming/outgoing data
  Mailbox<dataItem>   mbox;

  // Thread for helper
  SemotusVisum::Thread::Thread * myThread;
  
  // Helper for multithreading
  NetConnectionHelper * helper;
};


}
}
#endif
//
// $Log$
// Revision 1.1  2003/07/22 15:46:25  simpson
// Moved CollabVis Server files to Packages/CollabVis/Standalone -- adding these files
//
// Revision 1.1  2003/06/18 21:28:44  simpson
// Adding CollabVis files/dirs
//
// Revision 1.5  2001/05/21 22:00:45  luke
// Got basic set viewing method to work. Problems still with reading 0 data from net and ignoring outbound messages
//
// Revision 1.4  2001/05/12 03:29:11  luke
// Now uses messages instead of XML. Also moved drivers to new location
//
// Revision 1.3  2001/05/01 20:55:55  luke
// Works for a single client, but client disconnect causes the server to seg fault
//
// Revision 1.2  2001/04/12 20:14:47  luke
// Cleaned some bugs, moved error detection to PTPConnection. Some bugs still remain.
//
// Revision 1.1  2001/04/11 17:47:24  luke
// Net connections and net interface work, but with a few bugs
//
// Revision 1.3  2001/04/05 22:28:01  luke
// Documentation done
//
// Revision 1.2  2001/04/04 21:45:29  luke
// Added NetDispatch Driver. Fixed bugs in NDM.
//
// Revision 1.1  2001/02/08 23:53:29  luke
// Added network stuff, incorporated SemotusVisum namespace
//
