/*
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/

package sci_ports {
  interface GoPort extends Port {
    int go();
  };

  interface ConnectionEventService extends Port {
    // subscribe the listener, l, to a type of event.
    void addConnectionEventListener( in int connectionEventType, 
				     in ConnectionEventListener l);
    void removeConnectionEventListener( in int connectionEventType, 
					in ConnectionEventListener l);
    
  };

  interface ConnectionEventListener {
    /** Called on all listeners when a connection is made or broken. */
    void connectionActivity( in ConnectionEvent event );
  };

  interface ConnectionEvent {
    int getEventType();
    PortInfo getPortInfo();

//     enumeration Type { 
//       Error = -1;            // Someone got their hands on a bogus event 
//                              //   object somehow.
//       ALL = 0;               // Component wants to receive all event notices. 
//                              //   ALL itself never received.
//       ConnectPending = 1;    // A connection is about to be attempted.
//       Connected = 2;         // A connection has been made.
//       DisconnectPending = 3; // A disconnection is about to be attempted.
//       Disconnected = 4;      // A disconnection has been made.
//     };
  };
}; // package sci.cca.ports
