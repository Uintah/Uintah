<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "../../../../Dataflow/XML/component.dtd">
<?xml-stylesheet href="../../../../Dataflow/XML/package-component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
-->

<component name="ExportMatricesToMatlab" category="DataIO">
  <overview>
    <authors>
      <author>Jeroen Stinstra</author>
    </authors>
    <summary> The ExportMatricesToMatlab module saves a SCIRun matrix in
a MATLAB .mat file
		</summary>


  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
        <name>Matrix1</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
      <port>
        <name>Matrix2</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
      <port>
        <name>Matrix3</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
      <port>
        <name>Matrix4</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
      <port>
        <name>Matrix5</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
      <port>
        <name>Matrix6</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
      <port>
        <name>Filename</name>
        <datatype>SCIRun::String</datatype>
      </port>          
    </inputs>
  </io>
  
  <gui>
    <parameter>
      <widget> Entry </widget>
      <label> .mat file </label>
      <description>
	<p>The name of the MATLAB file </p>
      </description>
    </parameter>

    <parameter>
      <widget> Button </widget>
      <label> Browse </label>
      <description>
	<p> Open a filesectionbox and choose a MATLAB file </p>
      </description>
    </parameter>
	
    <parameter>
      <widget> Entry </widget>
      <label> Port N </label>
      <description> 
	<p>Enter the name of the MATLAB matrix here. When the matrix
is loaded into MATLAB it will have this name.</p>
      </description>
    </parameter>
	
    <parameter>
      <widget> Popup Menu </widget>
      <label> Array Type </label>
      <description>
	<p>Use this button to select the output format. In case
"numeric array" is selected, the matrix will be exported as a plain
dense or sparse matrix without any additional information. This is the
default option and will be sufficient in most cases. In case "struct
array" is chosen, a structured MATLAB array will be created with a
field .data containing the matrix and a field .property containing the
properties from the property manager. Note: that not every type in the
property manager can be converted to matlab currently. Hence, this
latter option is meant for future expansions of this module. </p>
      </description>
    </parameter>
	
    <parameter>
      <widget> Popup Menu </widget>
      <label> Data type </label>
      <description>
	<p>Use this menu to select the datatype of the MATLAB matrix.
By default the matrix will be exported as doubles which seems the most
logical choice, as matlab predominately uses doubles. However one can
opt to use a different format, for instance for integer. The module
will automatically cast the data into the proper format before
exporting the data to disk.</p>
      </description>
    </parameter>
  </gui>
</component>
