<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "component.dtd">
<?xml-stylesheet href="component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
-->



<component name="GenerateStreamLines" category="Visualization">
  <overview>
    <authors>
      <author>Chris Moulding</author>
      <author>Michael Callahan</author>
    </authors>
    <summary>
         The GenerateStreamLines module visualizes vector fields by generating
curves that interpolate the vector of vectors in a Field. 
    </summary>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
        <name>Vector Field</name>
        <description>
          <p>
            Vector field is the field to be visualized.  It can be 2D or
3D and can be structured or unstructured. GenerateStreamLines is more
effective if vector field represents the vector present in a field rather
than the gradient of a generic field. 
          </p>
        </description>
        <datatype>SCIRun::Field</datatype>
        <componentname>GenField</componentname>
        <componentname>ReadField</componentname>
      </port>
      <port>
        <name>Seed Points</name>
        <description>
          <p>
            Seeds is a field whose nodes will be used as seed points,
or starting points, for the generation of the stream lines.
          </p>
        </description>
        <datatype>SCIRun::Field</datatype>
        <componentname>GenField</componentname>
        <componentname>ReadField</componentname>
      </port>
    </inputs>
    <outputs>
      <port>
        <name>Streamlines</name>
        <description>
          <p>
            Streamlines is a CurveMesh&lt;double&gt;
          </p>
        </description>
        <datatype>SCIRun::Field</datatype>
        <componentname>Render3D</componentname>
        <componentname>WriteGeometry</componentname>
      </port>
    </outputs>
  </io>
  <gui>
    <description>
      <p>
        The GUI for GenerateStreamLines allows the user to control the
parameters for the advection algorithm (Runge-Kutta-Fehlberg) used to
extract the streamlines. 
      </p>
    </description>
    <parameter>
      <widget>Button</widget>
      <label>Execute</label>
      <description>
        <p>
          Sends a request to the scheduler to have this component
executed.
        </p>
      </description>
    </parameter>
    <parameter>
      <widget>Entry</widget>
      <label>Error Tolerance</label>
      <description>
        <p>
          The value entered here will control the RKF step-size
variable.  It will adaptively change the step-size based on how close
the local truncation error is to this value.
        </p>
      </description>
    </parameter>
    <parameter>
      <widget>Entry</widget>
      <label>Step Size</label>
      <description>
        <p>
          The value entered here will provide RKF with the initial
step size.
        </p>
      </description>
    </parameter>
    <parameter>
      <widget>Entry</widget>
      <label>Maximum Steps</label>
      <description>
        <p>
          The value entered here will be the maximum number of nodes
allowed in a single stream line (to prevent infinite run time). 
        </p>
      </description>
    </parameter>
    <img>../Modules/Visualization/doc/GenerateStreamLinesGUI.jpg</img>
  </gui>
  <nets>
    <net id="GenerateStreamLines-cellwalk">
      <title>GenerateStreamLines-cellwalk Regression Test</title>

      <p>Test the StreamLine cellwalk code by making a synthetic cell
centered lattice vortex data set and then computing a set of
streamlines through that data set.</p>

      <p>This network can be found at
src/nets/Modules/Visualization/GenerateStreamLines-cellwalk.net.</p>

    </net>
    <net id="GenerateStreamLines-lic">
      <title>GenerateStreamLines-lic Regression Test</title>

      <p>Use the GenerateStreamLines module to create a line interval
convolution like visualization of a vector data set.  First the scalar
voltages for the utahtorso-lowres model are loaded in and then the
gradient is taken of that data set.  Then 1000 seeds are randomly
picked from inside the torso.  These are then streamlined and colored
according to which seed they are.  Since the seeds are randomly
distributed this results in a random but unique color per streamline.
Finally all of the 1000 streamlines are displayed as transparent lines
along with a reference torso boundary and the heart model.  For full
3D effect the model should be rotated interactively.</p>

      <p>This network can be found at
src/nets/Modules/Visualization/GenerateStreamLines-lic.net.</p>

    </net>
  </nets>
</component>







