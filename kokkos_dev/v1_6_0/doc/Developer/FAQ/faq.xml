<!--
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
-->

<faq>
<title>Developer FAQ</title>
  <description> 
    <para> 
      This FAQ includes questions of interest to SCIRun developers.
    </para> 
  </description>

  <entry>
    <keywords>modules, granularity</keywords>
    <question>
      <para>
        What is the granularity of modules?
      </para>
    </question>
    <answer>
      <para>
        There is no simple answer to this question and modules that start
        at one level sometimes divide or merge to move to a different
        level.  When designing and writing the code, it is therefore
        important to think in terms of modularity even within a single
        module so that subsequent divisions or reorganization is possible.
        One approach we take within the group is to present the design for
        a new module or set of modules to the group and see if there are
        others interested in some part of the functionality or can provide
        existing modules for the new module.  In this way we at least
        benefit from the collective plans and knowledge of the group.
      </para>
    </answer>
  </entry>
 
  <entry>
    <keywords>coding standards, emacs</keywords>
    <question>
      <para>
        Are there Emacs tools for coding standard?
      </para>
    </question>
    <answer>
      <para>
      Yes, here is the code we use to support the coding standard:
      </para>
 
      <pre>
      ; Filename: sci-c++-style.el
      ; Author: Marty Cole
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      (defun c-no-initializer-indent (langelem)
        ;; using in a statement block intro...
          (save-excursion
              (let* ((curpos (point))
           retval)
      (setq retval (if (search-forward "{" (c-point 'eol) t)
                       (* -1 c-basic-offset) c-basic-offset))
      (goto-char curpos)
      retval)))
 
      (defun my-c-mode-common-hook ()
      ;; my customizations for all of c-mode and related modes
      (c-set-style "gnu")
      (set 'c-label-minimum-indentation 0)
      (c-set-offset 'substatement-open 0)
      (c-set-offset 'innamespace 0)
      (c-set-offset 'statement-cont 'c-no-initializer-indent)
      )
 
      (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
      </pre>
 
      <para>
      Place this in a file that you load, or directly in your .emacs file.
      </para>
 
      <para>
      We are working on a <I>BioPSE</I> coding standard that will replace
      the one that we currently share with the C-SAFE/Uintah group.  As
      soon as it is ready, we will add it to the <A NAME="tex2html7"
      HREF="../Developer/Guide/index.html">developer documentation</A>.
      </para>
    </answer>
  </entry>

  <entry>
    <keywords></keywords>
    <question>
      <para>
        Do we need to get accounts for your CVS? How do we handle checking
        out the latest version of <I>SCIRun</I> or <I>BioPSE</I>?
      </para>
    </question>
    <answer>
      <para>
      At present, remote access to the code repository does require an
      account on our server.  To get the most recent released version,
      visit our web site to download archives.  You may place the resulting
      files on your own code repository site and manage your own
      development.
      </para>
    </answer>
  </entry>
 
  <entry>
    <keywords></keywords>
    <question>
      <para>
         Are there guidelines for module testing? What is the testing
         strategy?
      </para>
    </question>
    <answer>
      <para>
      The nature of <I>SCIRun</I> as a very interactive, user driven
      program makes testing modules and their interactions very
      challenging.  Our approach to this is to develop a user interface the
      contains a state manager that will accept and manage input from all
      user interface elements.  One advantage of such a manager is that it
      will be possible to replace the interactive input with a program that
      supplies a script of interaction requests to which the state manager
      will respond, just as if a user had executed the requests manually.
      The development of this structure is in progress and we hope to have
      the essential elements in place soon.
      </para>
    </answer>
  </entry>
 
  <entry>
    <keywords>XML</keywords>
    <question>
      <para>
        What is XML?
      </para>
    </question>
    <answer>
      <para>
        The best place to find the answer to this in on one of the XML web
        sites such as <A NAME="tex2html9"
        HREF="http://faq.oreillynet.com/XML/index0.shtm">
        faq.oreillynet.com/XML/index0.shtm</A>
        or
        <A NAME="tex2html10"
           HREF="http://www.xml.com/pub/a/98/10/guide0.html">
        www.xml.com/pub/a/98/10/guide0.html</A>.
      </para>
    </answer>
  </entry>

  <entry>
    <keywords></keywords>
    <question>
      <para>
        What does XML have to do with <I>SCIRun</I>?
      </para>
    </question>
    <answer>
      <para>
        Each module in <I>BioPSE</I> requires an XML format description of
        its functionality.  The information in the XML specification
        provides information to assist the <A NAME="tex2html11"
        HREF="../Developer/Guide/create_module.html">
        module-maker</A> do its job and help create the template for a
        module.  It also forms the basis of a Reference Manual of all
        modules.  And it even provides information to <I>SCIRun</I> about
        the number of type of ports that the module needs when it appears
        in a network diagram.  There is additional <A NAME="tex2html12"
        HREF="../Developer/Guide/module-xml.html">documentation</A> that describes the format and content of the XML
        spec.
      </para>
    </answer>
  </entry>

  <entry>
    <keywords></keywords>
    <question>
      <para>
        What does it mean to <I>validate</I> a design specification in
        XML?
      </para>
    </question>
    <answer>
      <para>
        One of the powerful elements of XML is that it requires adherence
        to the language standard, unlike HTML, which permits many implicit
        actions like environments that are never closed properly.  To
        ensure that an XML specification for <I>BioPSE</I> adheres to
        specifications, there is a document description that the <A
        NAME="tex2html13"
        HREF="http://eegah.cvrti.utah.edu/srvalidate.html">online validation
        tool</A> requires against which to test the XML file.  This
        document description describes all the legal tags and other
        elements of the document structure.
      </para>
    </answer>
  </entry>

  <entry>
    <keywords>memory, unmapping, leaks, sgi</keywords>
    <question>
      <para>
	Recently I've been getting the following message across my screen while
	running SCIRun on my sgi octane:
      </para>
      <pre>
Error unmapping memory
munmap: errno=16
Unmap failed - leaking memory
      </pre>
      <para>
	Is this something that I'm causing via a coding error or is this a
	memory issue with my machine?
      </para>
    </question>
    <answer>
      <para>
	There is nothing wrong with your machine, nor is it your fault.  It
	is something weird about IRIX and the SCIRun memory allocator that
	has never been tracked down, and it is a fairly rare occurrence.
      </para>
    </answer>
  </entry>
  <entry>
    <keywords>geometry object, color</keywords>
    <question>
      <para>
	I created some simple geometry objects like cylinders, but I don't
	know how to customize their color, anyone knows that?
      </para>
    </question>
    <answer>
      <para>
	We have container classes for GeomObj's -- these are themselves
	GeomObj's that contain one of more other GeomObj's inside of them.
	They're very useful for building up scene graphs.  The
	container you want to use is a GeomMaterial -- its constructor
	takes a GeomObj (e.g. a GeomCylinder) and a MaterialHandle.  (Note:
	the constructor for a Material can be as simple as passing in a
	Color triple!)
      </para>
    </answer>
  </entry>
  <entry>
    <keywords></keywords>
    <question>
      <para>
	I created a user data type, but I don't know how to specify a new
	color to represent its port type in the module. Now I'm using
	yellow, the same color as field.
      </para>
    </question>
    <answer>
      <para>
	When you created the new Port, you added a file into
	Dataflow/Ports/ -- the .cc file for your new Port type should have
	a specification for a name and for a color.  See
	SCIRun/src/Dataflow/Ports/MatrixPort.cc as an example.
      </para>
    </answer>
  </entry>

  <entry>
    <keywords>GUI, GuiInt, GuiDouble, GuiString</keywords>
    <question>
      <para>
	When I save my network, why don't the settings in my modules GUI get saved?
      </para>
    </question>
    <answer>
      <para>
	You need to use GuiVars.  these are how you share a variable between 
	C++ and tcl, and are also the only values that get saved to the tcl 
	scripts.

	Look and any module with a gui for an example, Look for GuiString or 
	GuiInt or GuiDouble, and in particular look at their constructor.   
	You need to synch with the tcl side by specifying the name of the var 
	on the tcl side.  That will be reffered to on the tcl side like so...
      </para>
      <para>
	C++ side:
      </para>

      <pre>
	GuiInt myint_;

	// Initialization in constructor --
	myint_("myint", id, &lt;plus whatever other args it takes...&gt;)
      </pre>
      <para>
	tcl side:
      </para>

      <pre>
	set $this-myint 1    # or whatever value you want
      </pre>
      <para>
	Look at ShowField.cc and .tcl for examples.
      </para>
    </answer>
  </entry>
</faq>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-default-dtd-file:"../../Utilities/XML/faq.ced"
sgml-omittag:nil
sgml-shorttag:nil
End:
-->
