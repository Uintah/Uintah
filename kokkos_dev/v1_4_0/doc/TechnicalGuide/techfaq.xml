<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE faq SYSTEM "../faq.dtd">

<!-- 

  each faq is a collection of entries.  Entries are a paired question and
  answer, along with a set of keywords.  Questions and answers are delimited
  with <para> or <pre> tags.

  <entry>
    <keywords>SGI, endian</keywords>
    <question>
      <para>
        ...
      </para>
      ...
    </question>
    <answer>
      <para>
        ...
      </para>
      ...
    </answer>
  </entry>
          
  the guts of para's and pre's are "free form": you can use HTML
  inside them.

-->

<faq>
<title>Technical FAQ</title>
  <description> 
    <para> 
      This FAQ includes technical questions of interest to users who
      install, maintain and develop SCIRun
    </para> 
  </description>

  <entry>  
    <keywords>SGI, runtime, pthreads and SIGABRT</keywords> 
    <question> 
      <para>
        I successfully installed SCIRun and its required thirdparty
	software (by hand) onto an SGI target install machine, but
	when I run SCIRun, it immediately signals an abort (SIGABRT).  
      </para>
      
      <para> 
        The output of SCIRun after it signals the abort looks like this: 
      </para> 

      <pre>
Thread "main"(pid 251775) caught signal SIGABRT (Abort)
Backtrace:
0x5ff69224: SCIRun::Thread::niceAbort(void)
0x5ff7106c: handle_abort_signals
0xc37f7c0: sig_fixup_mask
0xfb11100: prctl
0xc37ee00: pthread_kill
0xc37fef8: _SGIPT_libc_raise
0xc378068: ptctl
0xfaf3e20: raise
0xfa668a4: abort
0xae40958: terminate(void)
0xae40788: __call_terminate
0xae42ba8: __throw
0x5ff72ad0: SCIRun::Thread::os_start(bool)
0x5ff68c7c: SCIRun::Thread::Thread(SCIRun::Runnable*,const
char*,SCIRun::ThreadGroup*,SCIRun::Thread::ActiveState)
0x100057c4: main
251775: main (state=running)
 
Abort signalled by pid: 251775
Occured for thread:
"main"resume(r)/dbx(d)/cvd(c)/kill thread(k)/exit(e)?
      </pre>
    </question>
    <answer>
      <para>
        One or more of the thirdparty libraries was configured and built to
        use (i.e. link against) pthreads.  On SGI machines, SCIRun uses sproc
        threads instead of pthreads.  It is illegal to use both sproc and 
        pthreads in a single process.  When two binaries are linked together
        into a single process at runtime (e.g. scirun and libxerces-c1_4.so)
        an abort is signalled and the process is shutdown.
      </para>
      <para>
        The solution is to rebuild the offending libraries, configuring them
        to _not_ use threads.  Xerces is typically the offending library, 
        although Tcl and others may also be incorrectly configured to use
        threads.  See the 
        <a href="p1c3.html#4">Thirdparty
        Software Installation and Build Information</a> for recommended
	configure arguments for the thirdparty software.  Note that when the
	automatic install script is used, all the software is automatically
        configured and built correctly.
      </para>
    </answer>
  </entry>

  <entry>
    <keywords>SGI, thirdparty, compile</keywords>
    <question>
      <para>
        When building SCIRun on an SGI target machine, I get an error
        message regarding the SGI Image Format Library (IFL).
      </para>
      <para>
        The error text looks similar to this:
      </para>
      <pre>
ld64: FATAL   9  : I/O error (-lifl): No such file or directory
      </pre>
    </question>
    <answer>
      <para>
        The problem is a bug within the SCIRun build system that requires
        the SGI Image Format Library (IFL) in order to make SCIRun.  The long
        term solution will be to make the IFL optional instead of required.
      </para>
      <para>
        For now, however, you can work around the problem by having your
        system administrator install the IFL onto your target install machine.
        Be sure to install the type (32 or 64 bit) needed for your SCIRun
        configuration(s).
      </para>
    </answer>
  </entry>

  <entry>
    <keywords>SGI, LANG:std, MIPSpro</keywords>
    <question>
      <para>
	I successfully installed the thirdparty software onto an SGI
        target install machine, but when I try to build SCIRun it fails
        during the compile phase.
      </para>
      <para>
        The error message displayed contains the following warning:
      </para>
      <pre>
...
Warning: Option 'std' not in group 'LANG' (LANG:std)
...
      </pre>
    </question>
    <answer>
      <para>
        The MIPSpro compiler on your target install machine is too old.
        SCIRun requires version 7.3.1.1m at a minimum.
      </para>
    </answer>
  </entry>

  <entry>
    <keywords>hang, linux, dual processor</keywords>
    <question>
      <para>
        SCIRun sometimes hangs when running the example nets on a dual
        processor linux machine.
      </para>
    </question>
    <answer>
      <para>
        This is a known bug with no known solution.  There is,
        however, a workaround:
      </para>

      <para>
        Re-configure SCIRun adding the --disable-sci-malloc option to
        the configure command, then rebuild SCIRun.  If SCIRun still 
        hangs while running example nets, change directories to
        on-the-fly-libs and issue a make command by hand.  Run the
        example again once the make of the on-the-fly-libs finishes.
      </para>
    </answer>
  </entry>

  <entry>
    <keywords>SGI, Linux, ~</keywords>
    <question>
      <para>
        I'm trying to install SCIRun or the thirdparty software into 
        my home directory, but it fails when building.
      </para>
    </question>
    <answer>
      <para>
        When installing any of the software into your home directory
        be sure to use complete and absolute paths when providing
        configure argumenst.  <b>Do Not</b> use tilde expansion or
        any other short cuts, as they will not be properly expanded
        by the install scripts and makefiles.
      </para>
      <para>
        For example, instead of configuring with "--prefix=~bob",
        configure with "--prefix=/home/bob".
      </para>
    </answer>
  </entry>

  <entry>
    <question>
      <para>
        How can I make a 64 bit build of SCIRun?
      </para>
    </question>
    <answer>
      <para>
        64 bit is currently only available on the SGI platform.  To
        build a 64 bit version of SCIRun, you first need to have 64
        bit versions of the thirdparty software.  The easiest way to
        do that is to use the SCI thirdparty install script using the 64
        option.  If building by hand, see the advice below.
      </para>
      <para>
        Once the thirdparty software is available in 64 bits, 
        configure
        SCIRun with the "--enable-64bit" option and rebuild.
      </para>
      <para>
        Unfortunately, most of the required third party software did
        not take 64 bit SGI platforms into account when writing
        configure scripts and makefiles. However, with some effort, it
        is possible to build all the software in 64 bit. In general,
        to get 64 bit versions of the third party software it is
        necessary to edit Makefiles such that the CFLAGS and LFLAGS
        macros have "-64" listed instead of "-n32". In the case of the
        tcl distributions, this means editing the makefiles (after
        configuring) by hand and replacing all instances of "-n32"
        with "-64". For Xerces, this means changing the environment
        variables listed above replacing all instances of " -n32 "
        with " -64 " before configuring. 
      </para>       
    </answer>
  </entry>

  <entry>
    <question>
      <para>
        I want to build the thirdparty software by hand.  What are the
        gotchas and bugs I should be aware of?
      </para>
    </question>
    <answer>
      <para>
        <b><i>Building [incr Tcl/Tk]</i></b>
      </para>
    
      <para> 
        The [incr Tcl/Tk] distribution listed in the system
        requirements has a bug in it: the installation scripts are
        bundled without execute permissions.  Before attempting to
        configure or make [incr Tcl/Tk], type the following commands:  
      </para>

      <pre class="example">
cd itcl3.1.0/config
chmod a+x install-sh mkinstalldirs
      </pre>

      <para>
        Then, proceed normally with the configure and make.
      </para>

      <para>
        <b><i>Building BLT</i></b>
      </para>
    
      <para>
        The BLT make files have bugs in them that cause apparent
        errors in the building process. To build without the apparent
        errors, type the following (in the order shown) after
        configuring: 
      </para> 

      <pre class="example">
cd blt2.4u
make 
cd src/shared
make 
cd ../..
make -k install
cd src/shared
make -k install
      </pre>

      <para>
        <b><i>Building Xerces-C++</i></b>
      </para>

      <para>
        Xerces-C++ uses a non-standard configure mechanism.  You must
        specify most options as environment variables, and then run
        the configure command with the --prefix option only.
      </para>

      <para>
        The Xerces-C++ configure scripts are bundled without execute
        permissions.  Before attempting to configure, type the following
        commands: 
      </para>

      <pre class="example">
cd xerces-c-src1_5_1/src
chmod a+x configure runConfigure
      </pre>
   
      <para>
        There is no dependency tree for the copy phase of the xerces
        build, so using a -j flag (number of jobs) as a GNU make
        argument will cause the build to fail. 
      </para> 

      <para>
        There is no dependency tree for the "install" target within
        the make files, so passing "install" as an argument to the
        first time "make" is typed will cause the build to
        fail. Instead type "make" first, then "make install."  
      </para>
    </answer>
  </entry>

  <entry>
    <keywords>Tcl, headers, configure</keywords> 
    <question>
      <para>
        When I try to configure SCIRun, it says that it cannot find
        header files for one or more of the Tcl distributions, but my
        system has the correct versions for all the Tcl
        distributions.
      </para> 
    </question>
    <answer>
      <para>
        SCIRun currently requires the full source of Tcl and Tk to be
        installed. This is required because SCIRun defines a few Tk
        widgets of its own, and needs some headers from the source
        that aren't included with typical installations. If your
        system already has the correct Tcl and Tk versions installed,
        you will have to re-install in order to have the sources
        included.
      </para> 
    </answer> 
  </entry> 

  <entry>
    <question>  
      <para>
        I successfully installed SCIRun onto a linux target install
        machine with XFree86 version 4.1.0 installed, but when I run
        it, it immediately signals a segmentation violation (SIGSEGV):
      </para>  

      <pre>
Thread "main"(pid 2063) caught signal SIGSEGV at address 0xdccc10 (segmentation
violation)
0: main (state=running)
1026: TCL main event loop (detached, state=blocking on semaphore, TCLTask startup continue semaphore)
2051: Scheduler (daemon, detached, state=blocking, NetworkEditor request FIFO,
Mailbox empty condition)
 
Abort signalled by pid: 2063
Occured for thread:
"main"resume(r)/dbx(d)/cvd(c)/kill thread(k)/exit(e)?
      </pre>
    </question>
    <answer>
      <para>
        The XFree86 version 4.1.0 binary distributions for linux ship
        with a version of GLU (libGLU.so.1.3) that somehow conflicts with the 
        xerces library.  The solution is to replace the GLU library with
        a different version (e.g. libMesaGLU.so, or some other GLU
	already on the machine).
      </para>
    </answer>
  </entry>
  <entry>
    <keywords>memory, unmapping, leaks, sgi</keywords>
    <question>
      <para>
	Recently I've been getting the following message across my screen while
	running SCIRun on my sgi octane:
      </para>
      <pre>
Error unmapping memory
munmap: errno=16
Unmap failed - leaking memory
      </pre>
      <para>
	Is this something that I'm causing via a coding error or is this a
	memory issue with my machine?
      </para>
    </question>
    <answer>
      <para>
	There is nothing wrong with your machine, nor is it your fault.  It
	is something weird about IRIX and the SCIRun memory allocator that
	has never been tracked down, and it is a fairly rare occurrence.
      </para>
    </answer>
  </entry>
  <entry>
    <keywords>geometry object, color</keywords>
    <question>
      <para>
	I created some simple geometry objects like cylinders, but I don't
	know how to customize their color, anyone knows that?
      </para>
    </question>
    <answer>
      <para>
	We have container classes for GeomObj's -- these are themselves
	GeomObj's that contain one of more other GeomObj's inside of them.
	They're very useful for building up scene graphs.  The
	container you want to use is a GeomMaterial -- its constructor
	takes a GeomObj (e.g. a GeomCylinder) and a MaterialHandle.  (Note:
	the constructor for a Material can be as simple as passing in a
	Color triple!)
      </para>
    </answer>
  </entry>
  <entry>
    <keywords></keywords>
    <question>
      <para>
	I created a user data type, but I don't know how to specify a new
	color to represent its port type in the module. Now I'm using
	yellow, the same color as field.
      </para>
    </question>
    <answer>
      <para>
	When you created the new Port, you added a file into
	Dataflow/Ports/ -- the .cc file for your new Port type should have
	a specification for a name and for a color.  See
	SCIRun/src/Dataflow/Ports/MatrixPort.cc as an example.
      </para>
    </answer>
  </entry>

  <entry>
    <keywords>GUI, GuiInt, GuiDouble, GuiString</keywords>
    <question>
      <para>
	When I save my network, why don't the settings in my modules GUI get saved?
      </para>
    </question>
    <answer>
      <para>
	You need to use GuiVars.  these are how you share a variable between 
	C++ and tcl, and are also the only values that get saved to the tcl 
	scripts.

	Look and any module with a gui for an example, Look for GuiString or 
	GuiInt or GuiDouble, and in particular look at their constructor.   
	You need to synch with the tcl side by specifying the name of the var 
	on the tcl side.  That will be reffered to on the tcl side like so...

	C++ side:

	GuiInt myint_;

	-- initialization in constructor --
	myint_("myint", id, <whatever other args it takes...>)

	tcl side:

	set $this-myint 1
	(or whatever value you want)

	look at ShowField.cc and .tcl for examples..
      </para>
    </answer>
  </entry>
</faq>
