<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "../../../../../doc/ReferenceGuide/component.dtd">

<!--
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
-->


<component name="SetupFEMatrix" category="Forward">
  <overview>
    <authors>
      <author>Alexei Samsonov</author>
      <author>Ruth Nicholson Klepfer</author>
    </authors>
    
    <summary>The module sets up mesh with conductivity tensors and
      Dirichlet boundary conditions specifically for bioelectric field
      probles
    </summary>
    
    <description>
      <p>Version Date: March 2001</p><p>Version: 1.0</p>
      <p>The module provides basic means for construction FE matrix
      with linear elements for bioelectric field problem
      (discretization of Poisson equation for volume conductor
      problem). Input field is  supposed to have properties with lookup
      naming correspondent to bioelectric field problem. Below are the
      conventions for the module:</p>
      
      <orderedlist>
	<listitem>
	  <p>Field containing mesh should be of type TetVol(char),
	  containing indices to the property 'table', that contains
	  actual values of the conductivity tensors. In this way the
	  storage is optimized</p>
	</listitem>
	<listitem>
	  <p>Property of the conductivity mesh name 'table' should
	  have assosiated data object of type Array1(Tensor). Any
	  lookup into the table is done by dereferencing indices of
	  conductivity mesh</p>
	</listitem>
	<listitem>
	  <p>Dirichlet boundary conditions , if any, should be
	  represented as property with name "dirichlet" and be of type
	  vector(pair(int, double)), where "int" field corresponds to
	  node index, and "double" field is the value of potential at
	  the node</p>
	</listitem>
      </orderedlist>
      
      <note>
	<p>The actual computation of the matrix is done by the
	BioPSE::Algorithm::BuildFEMatrix::build_FEMatrix(). Other
	modules or any other code could use the algorithm for other
	kinds of problems involving discretization of Poisson equation
	in 3D by linear finite elements</p>
      </note>
      
      <developer>
	<p>The discretization of the Poisson equation on the supplied
	mesh is done by linear finite elements using Galerkin approach</p>
      </developer>
    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <!-- one of (device port file) -->
      <port>
	<name>Mesh</name>
	<description>
	  <p>Takes a handle to Field object containing properties
	  described in overview section</p>
	</description>
	<datatype>Core::Datatype::Fieldx</datatype>
      </port>
    </inputs>
    <outputs>
      <!-- one of (device port file) -->
      <port>
	<name>FEM Matrix</name>
	<description>
	  <p>Sends a handle to the sparse matrix obtained from
	  discretization of the problem by finite elements</p>
	  <note>
	    <p>The handle is to base class of SparseRowMatrix, namely,
	    Matrix</p>
	  </note>
	</description>
	<datatype>Core::Datatype::SparseRowMatrix</datatype>
      </port>
      <port>
	<name>RHS</name>
	<description>
	  <p>Sends a handle to the column matrix represention
	  right-hand side of the discretization problem. It contains
	  adjustments obtained from Dirichlet boundary conditions. Any
	  addition of sources to the RHS is done in
	  Forward::ApplyCurrentSource module</p>
	  <note>
	    <p>The handle is to base class of SparseRowMatrix, namely,
	    Matrix</p>
	  </note>
	</description>
	<datatype>Core::Datatype::ColumnMatrix</datatype>
      </port>
    </outputs>
  </io>
  <gui>
    <description>
      <p></p>
    </description>
    <parameter>
      <widget></widget>
      <datatype></datatype>
      <label></label>
      <description>
	<p></p>
      </description>
    </parameter>
    <img></img>
  </gui>
  <testing>
  </testing>
</component>
