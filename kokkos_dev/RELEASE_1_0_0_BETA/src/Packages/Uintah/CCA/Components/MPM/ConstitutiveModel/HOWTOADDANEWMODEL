I've tried to make a set of steps that anyone who adds a new constitutive
model to the standalone mpm code should follow in order to make it work
from start to finish.  If I've left something out, please let me know.

There are more steps than we'd like, and I hope to streamline a few
things so that there are fewer file to be modified, etc.  If you have
any suggestions, let me know.

Jim

1. Look at the existing models, and choose one that bears some
similarity to your new one.  Copy the .cc and .h files of that
model into YourModel.cc and YourModel.h.  It is possible to start
from scratch, but I think this is easier, so that you will be
certain to excercise all of the needed virtual functions that
exist in ConstitutiveModel.h from which all other models are
inherited.

2.  While some of the specific functionality may be different,
you MUST fill in appropriate functionality for any of the virtual
functions in ConstitutiveModel.h, (it won't compile if you don't
anyway).  These functions include:

void computeStressTensor(double time_step)
	This is the generic function that is called for each
	particle in order to compute a stress.

BoundedArray<double> getMechProps()
	This function allows the material properties needed for
	your model to be accessed, for such things as restart
	files, etc.  Make sure this function is up to date.

void setVelocityGradient(Matrix3 vg)
Matrix3 getStressTensor()
void setStressTensor(Matrix3 st)
void setDeformationMeasure(Matrix3 dg)
Matrix3 getDeformationMeasure()
	These functions probably won't need changed much,
	but make sure that they are consistent with your model.

double getMu()
double getLambda()
	These functions are used in the timestep calculation.
	If it is not possible to have them return accurate values,
	they should at least return something to keep TimeStep
	happy for the meantime.  We may need to revisit how
	this is done.


static void readParameters(ifstream& in, double *p_array);
static void writeParameters(ofstream& out, double *p_array);
static ConstitutiveModel* readParametersAndCreate(ifstream& in);
virtual void writeRestartParameters(ofstream& out) const = 0;
static ConstitutiveModel* readRestartParametersAndCreate(ifstream& in);
       These functions deal with reading/writing startup files.
       Read the comments in ConstitutiveModel.h near them.

virtual int getType() const;
virtual string getName() const;
virtual int getNumParameters() const;
virtual void printParameterNames(ofstream& out) const;
	These functions help create the materials.dat file

	
3.  There are several other files which must be modified so that
the mpm code can take advantage of the new model.  These include:

src/mpm/Makefile
	Look and see what is there for any other constitutive model
	and then copy, paste and modify.

src/constitutive_model/ConstitutiveModelFactory.h
	Add #include "YourModel.h"
	Add CM_YOUR_MODEL to the enum.

src/constitutive_model/ConstitutiveModelFactory.cc
  static void readParameters(ifstream& in, int mat_type, double *p_array);
  static void writeParameters(ofstream& out, int mat_type, double *p_array);
  static ConstitutiveModel* readParametersAndCreate(ifstream& in, int mat_type);
  static ConstitutiveModel* readRestartParametersAndCreate(ifstream& in, int mat_type);
	In each of these functions add a `case CM_YOUR_MODEL:'.

src/constitutive_model/materials_dat.cc
	Add your model to this file, and then `make' in 
	src/constitutive_model.  This creates the materials.dat file
	needed for preMPM to recognize your model.
	
	Two lines added should be:
	1- before comment: // add new Model's variable initalization here
	ConstitutiveModel *yourmodel = new YourModel;
	2- before commen:  // insert new Model's variable here
	yourmodel,

4.  In constitutive_model/Makefile add YourModel.cc at the end of
	LOCALCXX_LIBSRC

5.  Test it!  Do your best to make sure that nothing you've done broke
the old code.  It shouldn't have, but you never know.

6.  Check it in.

7.  Send a message to cd-devel@cs.utah.edu to let others know what you've
done.  You should do this whenever you make a change to the code.
