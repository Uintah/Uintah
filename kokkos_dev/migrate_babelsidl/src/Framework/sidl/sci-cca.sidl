/*
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2007 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/

package sci {
  package cca version 0.2.1 {

    interface AbstractFramework extends gov.cca.AbstractFramework {
      //non-spec interface
      /**
       * Registers the slave framework with the master framework. Intended to be called
       * only by the representative slave framework process.
       * @param size Total number of parallel slave frameworks.
       * @param slaveURLs Urls of the slave framework.
       * @param slaveName Name of the slave resource.
       * @return A positive number or zero if framework was registered
       *   successfully, negative number on error.
       */
      int registerLoader(in string slaveName, in array<string,1> slaveURLs);
      int unregisterLoader(in string slaveName);

      /** start to share the CCA components with other CCA frameworks by
          1. broadcasting its own framework URL
          2. listening to other frameworks' broadcasting
          3. query the CCA components set available in other frameworks.
      */
      //void share(in gov.cca.Services svc);
      /** This one is in test for distributed computing

      */
      //string createComponent(in string name, in string type);
    }

    interface ComponentClassDescription extends gov.cca.ComponentClassDescription {
      string getComponentModelName() throws gov.cca.CCAException;
      string getLoaderName() throws gov.cca.CCAException;
    }


    //EVENT SPEC:
    /** Exception used by EventService, Topic and Subscription methods. */
    interface EventServiceException extends gov.cca.CCAException {}

    /** Payload of an event. The event's header is created
        by the framework and may contain a timestamp or information
        about the publisher etc. The body of the event is created
        by the publisher using the Topic interface.*/
    interface Event extends sidl.io.Serializable {

      /** Return the event's header. The header is usually generated
          by the framework and holds bookkeeping information

      */
      gov.cca.TypeMap getHeader();

      /** Returs the event's body. The body is the information the
          publisher is sending to the subscribers
      */
      gov.cca.TypeMap getBody();
    }

    /** Interface implemented by components interested in events. */
    interface EventListener {

      /** This is where event processing by a listener takes place. This
          is a call-back method that a topic subscriber implements and
          gets called for each new event.

          @topicName - The topic for which the Event was created and sent.
          @theEvent - The payload.
      */
      void processEvent(in string topicName, copy in Event theEvent);
    }

    /** Interface through which events are sent by publishers. */
    interface Topic {

      /** Returns the topic name associated with this object */
      string getTopicName();

      /** Publish an event.
	
          @eventName - The name of this event. It is perhaps not a crucial
                       piece of information. Can be inserted into the
                       header or the body of the event by the event
                       service.
          @eventBody - A typemap containing all the information to be
                       sent out.
      */
      void sendEvent(in string eventName, in gov.cca.TypeMap eventBody)
	    throws EventServiceException;
    }

    /** Mechanism for keeping track of a subscription of one or more
        topics. A subscription corresponds to one or more publishing
        topics.*/
    interface Subscription {

      /** Adds a listener to the collection of listeners for this Subscription.

          @listenerKey - It is used as an index to the collection (STL
                         map) and the parameter \em theListener is a
                         pointer to the /em Listener class.
          @theListener - A pointer to the object that will listen for events.
      */
      void registerEventListener(in string listenerKey, in EventListener theListener) 	
        throws EventServiceException;

      /**
         Removes a listener from the collection of listeners for this Topic.

         @listenerKey - It is used as an index to remove this listener.
      */
      void unregisterEventListener(in string listenerKey);

      /** Returns the name for this Subscription object */
      string getSubscriptionName();
    }
    //End of EVENT SPEC

    package ports {

      interface BuilderService extends gov.cca.ports.BuilderService {
        /** Get available ports in c2 that can be connected to port1 of c1. */
        array<string> getCompatiblePortList(in gov.cca.ComponentID c1, in string port1, in gov.cca.ComponentID c2);

        //Bridge methods:
        /**
          * TODO: document getBridgeablePortList
          * @param cid1
          * @param port1
          * @param  cid2
          */
        array<string> getBridgeablePortList(in gov.cca.ComponentID cid1,
                                                                 in string port1,
                                                                 in gov.cca.ComponentID cid2);

        string generateBridge(in gov.cca.ComponentID user,
                                           in string usingPortName,
                                           in gov.cca.ComponentID provider,
                                           in string providingPortName);
      }

      interface ComponentRepository extends gov.cca.ports.ComponentRepository {
        /**
          * Add a component class to the framework at runtime.
          * @param componentClassName The name of a component.
          * @throws CCAException in the event of error.
          */
          void addComponentClass(in string componentClassName) throws gov.cca.CCAException;
      }
  
      interface ApplicationLoaderService extends gov.cca.Port { 
        string getFileName();
        void setFileName(in string filename);
 
        void loadFile(out array<gov.cca.ComponentID,1> cidList, out array<gov.cca.ConnectionID,1> connList);
        void loadFile[As](in string filename, out array<gov.cca.ComponentID,1> cidList, out array<gov.cca.ConnectionID,1> connList);
 
        void saveFile();
        void saveFile[As](in string filename);
      }

      //EVENT SPEC:
      /** Interface to Event Service for a event publisher. A publisher can
          send events by acquiring a specific topic on which to publish. */
      interface PublisherEventService extends gov.cca.Port {

        /** Get a Topic by passing a name that has the form X.Y.Z. The
            method creates a topic of topicName it if it doesn't exist.

	        @topicName - A dot delimited, hierarchical name of the topic
                         on which to publish. Wildcard characters are not
                         allowed for a topicName.
        */
        sci.cca.Topic getTopic(in string topicName)
          throws sci.cca.EventServiceException;

        /** Returns true if topic already exists, false otherwise */
        bool existsTopic(in string topicName);
      }

      /** Interface to Event Service for a event subscriber. In order to get
          events delivered to us we use this service to get a Subscription
          and register a listener to this Subscription. In order to force
          the event service to process the events in the queue, a subscriber
          may call processEvents() */
      interface SubscriberEventService extends gov.cca.Port {

        /** Subscribe to one or more topics.

            @subscriptionName - A dot delimited hierarchical name selecting
                                the list of topics to get events from. Wildcard
                                characters (*,?)  are allowed for a subscriptionName
                                to denote more than one topic.
        */
        sci.cca.Subscription getSubscription(in string subscriptionName)
	      throws sci.cca.EventServiceException;

        /** Process published events. When the subscriber calls this method,
            this thread or some other one delivers each event by calling
            processEvent(...) on each listener belonging to each specific
            Subscription */
        void processEvents() throws EventServiceException;
      }
      //End of EVENT SPEC

    } // package ports

    package ui {
      interface Builder extends gov.cca.Component {
        string getFrameworkURL();
        string getConfigDir();

        // wrapper for ComponentRepository
        void getComponentClassDescriptions(out array<sci.cca.ComponentClassDescription> descArray);

        // wrappers for BuilderService mostly
        void getPortInfo(in gov.cca.ComponentID cid, in string portName, out string model, out string type);

        // manage component creation/destruction
        gov.cca.ComponentID createInstance(in sci.cca.ComponentClassDescription classDesc);
        void destroyInstance(in gov.cca.ComponentID cid, in float timeout);
        int destroyInstances(in array<gov.cca.ComponentID> cidArray, in float timeout);

        gov.cca.ComponentID generateBridge(in gov.cca.ComponentID user,
                                                                    in string usesPortName,
                                                                    in gov.cca.ComponentID provider,
                                                                    in string providesPortName,
                                                                    out gov.cca.ConnectionID connID1,
                                                                    out gov.cca.ConnectionID connID2);

        void getUsedPortNames(in gov.cca.ComponentID cid, out array<string> nameArray);
        void getProvidedPortNames(in gov.cca.ComponentID cid, out array<string> nameArray);

        void getCompatiblePortList(in gov.cca.ComponentID c1,
                                                    in string port1,
                                                    in gov.cca.ComponentID c2,
                                                    out array<string> portArray);

        void getBridgeablePortList(in gov.cca.ComponentID c1,
                                                  in string port1,
                                                  in gov.cca.ComponentID c2,
                                                  out array<string> portArray);

        // manage connections
        gov.cca.ConnectionID connect(in gov.cca.ComponentID usesCID,
                                                         in string usesPortName,
                                                         in gov.cca.ComponentID providesCID,
                                                         in string providesPortName);
        void disconnect(in gov.cca.ConnectionID connID, in float timeout); // note: don't support timeout yet
        // void disconnectAll(); note: not implemented in BuilderService yet

        void addComponentFromXML(in string filePath, in string componentModel);

        void addFrameworkProxy(in string loaderName,
                                                in string user,
                                                in string domain,
                                                in string loaderPath);
        void removeFrameworkProxy(in string name);

        // manage go ports for the UI
        bool connectGoPort(in string usesName,
                                        in string providesPortName,
                                        in gov.cca.ComponentID cid,
                                        out string usesPortName);
        void disconnectGoPort(in string goPortName);
        int go(in string goPortName);

        bool applicationFileExists();
        void loadApplication(in string fileName,
                                         out array<gov.cca.ComponentID> cidList,
                                         out array<gov.cca.ConnectionID> connList);
        void saveApplication();
        void saveApplication[As](in string fileName);
      }
    } // package ui

    package core {
      // (from the Plume framework)
      enum PortType {
        ProvidesPort = 0,
        UsesPort     = 1,
      }

      /**
       * Exception is thrown when an implementation class member is nil
       * and the failure needs to be communicated up the call stack.
       */
      class NotInitializedException extends sidl.SIDLException implements sidl.RuntimeException {}

      interface FrameworkService {
        //static gov.cca.Port create(in sci.cca.AbstractFramework framework);
        static FrameworkService create(in sci.cca.AbstractFramework framework);
      }

      // (from the Plume framework)
      // TODO: check to see what methods should throw an exception
      interface ConnectionInfo extends gov.cca.ConnectionID {
        gov.cca.TypeMap getProperties();
        void setProperties( in gov.cca.TypeMap properties);

      // make connection invalid
        void invalidate();
      }

      // (from the Plume framework)
      // TODO: check to see what methods should throw an exception
      interface PortInfo {
        bool connect(in PortInfo to);
        bool disconnect(in PortInfo peer);
        bool available();
        bool canConnectTo(in PortInfo toPortInfo);
        bool isConnected();
        bool inUse();
        int  numOfConnections();

        gov.cca.TypeMap getProperties();
        void setProperties( in gov.cca.TypeMap properties);

        gov.cca.Port getPort() throws NotInitializedException;
        PortInfo getPeer() throws gov.cca.CCAException;
        PortType getPortType();
        string getName();
        string getClass();

        void incrementUseCount();
        bool decrementUseCount();

      // make port invalid
        void invalidate();
      }

      // framework services (based on the Plume framework)
      interface FrameworkServiceFactory {
        //PortInfo getService(in string serviceName, in ComponentInfo requester);

        PortInfo getService(in string serviceName);
        void releaseService(in string portName);
      }

      // TODO: check to see what methods should throw an exception
      interface ServiceInfo {
        string getServiceName();
        string getServicePortName();
        PortInfo getServicePort() throws NotInitializedException;

        string getRequesterPortName();
        //ComponentInfo getRequester();
        PortInfo getRequesterPort() throws NotInitializedException;
      }

      // TODO: check to see what methods should throw an exception
      interface ComponentInfo extends gov.cca.ComponentID {
        AbstractFramework getFramework();
        gov.cca.Component getComponent();
        gov.cca.Services getServices();

        array<PortInfo,1> getPorts();
        PortInfo getPortInfo( in string portName );

        string getClassName();
        gov.cca.TypeMap getProperties();
        void setProperties( in gov.cca.TypeMap properties);

        bool callReleaseCallback();

       // make component invalid
        void invalidate();
      }
    } // package core
  } // package cca
} // package sci
