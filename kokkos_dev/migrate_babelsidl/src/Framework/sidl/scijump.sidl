/*
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2007 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/

require gov.cca version 0.8.1;
require sci.cca version 0.2.1;

package scijump version 0.2.1 {
  package core {
    class FrameworkServiceFactory implements-all sci.cca.core.FrameworkServiceFactory {
      void initialize(in opaque internalFactoryImpl);

      // initializes all framework services
      // this is the place to add new framework services
      //static void initializeServices(in scijump.SCIJumpFramework framework);

      string getName();
    }

    // (from the Plume framework)
    class ServiceInfo implements-all sci.cca.core.ServiceInfo {
      void initialize(in string serviceName, in sci.cca.core.PortInfo servicePort, in sci.cca.core.PortInfo requesterPort);
    }
  } // package core

  class CCAException extends sidl.SIDLException implements-all gov.cca.CCAException {
    // could add note and a line to initialize...
    void initialize(in gov.cca.CCAExceptionType type);
  }

  class TypeMismatchException extends sidl.SIDLException implements-all gov.cca.TypeMismatchException {
    void initialize(in gov.cca.Type requestedType, in gov.cca.Type actualType);
    void initialize[Full](in gov.cca.CCAExceptionType type, in gov.cca.Type requestedType, in gov.cca.Type actualType);
  }

  class TypeMap implements-all gov.cca.TypeMap {}

  class ServiceProvider implements-all gov.cca.ports.ServiceProvider {}  

  class ServiceRegistry implements-all gov.cca.ports.ServiceRegistry,
                                       sci.cca.core.FrameworkService {

    static sci.cca.core.FrameworkService create(in sci.cca.AbstractFramework framework);
    void initialize(in sci.cca.AbstractFramework framework);
    core.ServiceInfo getService(in string serviceName, in sci.cca.core.PortInfo requesterPort);
  }

  class SCIJumpFramework implements-all sci.cca.AbstractFramework {
      // from Plume framework
      bool isFrameworkService(in string name);
      core.ServiceInfo getFrameworkService(in string serviceName, in sci.cca.core.PortInfo requesterPort, in bool connect);
      void releaseFrameworkService(in sci.cca.core.ServiceInfo info);

      /** Eliminates the component instance ``cid'' from the scope of the
      	  framework.  The ``timeout'' parameter specifies the maximum allowable
      	  wait time for this operation.  A timeout of 0 leaves the wait time up to
      	  the framework.  If the destroy operation is not completed in the maximum
      	  allowed number of seconds, or the referenced component does not exist,
      	  then a CCAException is thrown.

      	  Like createComponentInstance, this method is only intended to be called
      	  by the BuilderService class.  It searches the list of registered
      	  components (compIDs) for the matching component ID, unregisters it, finds
      	  the correct ComponentModel for the type, then calls
      	  ComponentModel::destroyInstance to properly destroy the component. */
        void destroyComponentInstance(in gov.cca.ComponentID cid, in float timeout);

       /** Creates an instance of the component defined by the string ``type'',
       	   which must uniquely define the type of the component.  The component
      	   instance is given the name ``name''.   If the instance name is not
      	   specified (i.e. the method is passed an empty string), then the component
     	    will be assigned a unique name automatically.

      	    This method is ``semi-private'' and intended to be called only by the
      	    BuilderService class.  It works by searching the list of ComponentModels
      	    (the ivar \em models) for a matching registered type, and then calling
      	    the createInstance method on the appropriate ComponentModel object. */
      gov.cca.ComponentID createComponentInstance(in string name, in string className, in gov.cca.TypeMap tm);

      gov.cca.ComponentID getComponentInstance(in string name) throws gov.cca.CCAException ;
	    array<gov.cca.ComponentID> getComponentInstances() throws gov.cca.CCAException; 

      // doc.
      gov.cca.ConnectionID createConnectionInstance(in sci.cca.core.ComponentInfo user, in sci.cca.core.ComponentInfo provider, in string userPortName, in string providerPortName, in gov.cca.TypeMap tm);

      // doc.
      void destroyConnectionInstance(in gov.cca.ConnectionID connID);

      array<gov.cca.ConnectionID> getConnectionInstances(in array<gov.cca.ComponentID> componentList) throws gov.cca.CCAException; 

      /** Adds a description of a component instance (class ComponentInstance) to
          the list of active components.  The component instance description
          includes the component type name, the instance name, and the pointer to
     	  the allocated component.  When a \em name conflicts with an existing
      	  registered component instance name, this method will automatically append
      	  an integer to create a new, unique instance name.*/
      //gov.cca.ComponentID registerComponent(in ComponentInstance ci, in string name);

      string getUniqueName(in string name);

      /** Removes a component instance description from the list of active
      	  framework components.  Returns the pointer to the component description
      	  that was successfully unregistered. */
      //ComponentInstance unregisterComponent(in string instanceName);

  }

  class ComponentClassDescription implements-all sci.cca.ComponentClassDescription {}

  class BuilderService implements-all sci.cca.ports.BuilderService,
                                                           sci.cca.core.FrameworkService,
                                                           sci.cca.EventListener {
    static sci.cca.core.FrameworkService create(in sci.cca.AbstractFramework framework);

    void initialize(in sci.cca.AbstractFramework framework);
  }

  // Should part of an extended builder service.
  class ApplicationLoaderService implements-all sci.cca.ports.ApplicationLoaderService, 
                                                sci.cca.core.FrameworkService {
    static sci.cca.core.FrameworkService create(in sci.cca.AbstractFramework framework);
    void initialize(in sci.cca.AbstractFramework framework);
  }

  // EventService classes
  class EventServiceException extends sidl.SIDLException implements-all sci.cca.EventServiceException {
    void initialize(in gov.cca.CCAExceptionType type);
  }

  class Topic implements-all sci.cca.Topic {
    void initialize(in string topicName, in sci.cca.AbstractFramework framework);
    void addSubscription(in string topicName, in Subscription theSubscription);
    void removeSubscription(in string topicName);
    void processEvents();
  }

  class Subscription implements-all sci.cca.Subscription {
    void initialize(in string subscriptionName, in sci.cca.AbstractFramework framework);
    void processEvents(in array<sci.cca.Event,1> eventList);
  }

  class Event implements-all sci.cca.Event {
    void setHeader(in gov.cca.TypeMap h);
    void setBody(in gov.cca.TypeMap b);
  }

  class EventService implements-all sci.cca.ports.PublisherEventService,
                                                         sci.cca.ports.SubscriberEventService,
                                                         sci.cca.core.FrameworkService {
    static sci.cca.core.FrameworkService create(in sci.cca.AbstractFramework framework);
    void initialize(in sci.cca.AbstractFramework framework);
  }
  // EventService classes

  // Babel Component model classes
  // Babel component model classes (BabelServices, BabelPortInfo) are used by Framework services.

  class BabelConnectionInfo implements-all sci.cca.core.ConnectionInfo {
    void initialize(in sci.cca.core.ComponentInfo user, in sci.cca.core.ComponentInfo provider, in string userPortName, in string providerPortName, in gov.cca.TypeMap properties);
  }

  // (from the Plume framework)
  class BabelPortInfo implements-all sci.cca.core.PortInfo {
    void initialize(in gov.cca.Port port, in string name, in string className, in sci.cca.core.PortType portType, in gov.cca.TypeMap properties);
    void initialize[Uses](in string name, in string className, in sci.cca.core.PortType portType, in gov.cca.TypeMap properties);
  }

  class BabelServices implements-all gov.cca.Services {
    void initialize(in scijump.SCIJumpFramework framework, in string selfInstanceName, in string selfClassName, in gov.cca.TypeMap selfProperties);

    // ComponentInfo acts as public interface for these methods
    sci.cca.core.PortInfo getPortInfo(in string name);
    array<sci.cca.core.PortInfo,1> getPorts();
    bool callReleaseCallback();
  }

  class BabelComponentInfo implements-all sci.cca.core.ComponentInfo {
    void initialize(in string instanceName, in string className, in sci.cca.AbstractFramework framework, in gov.cca.Component component, in scijump.BabelServices services, in gov.cca.TypeMap properties);
    void initialize[Full](in string instanceName, in string className, in sci.cca.AbstractFramework framework, in gov.cca.Component component, in scijump.BabelServices services, in gov.cca.TypeMap properties, in string serialization);
    void initialize[ComponentImage](in string instanceName, in string className, in sci.cca.AbstractFramework framework, in scijump.BabelServices services, in gov.cca.TypeMap properties);

    void setSerialization(in string serialization);
  }
  // Babel Component model classes



  package ui {
    class GUIBuilder implements-all sci.cca.ui.Builder, sci.cca.EventListener {
      // manage UI ports for the GUI
      // note: no UI handling for TxtBuilder
      bool connectUIPort(in string usesName,
                                     in string providesPortName,
                                     in gov.cca.ComponentID cid,
                                     out string usesPortName);
      void disconnectUIPort(in string uiPortName);
      int ui(in string uiPortName);

      void updateProgress(in gov.cca.ComponentID cid, in int progressPercent);
      void updateComponentModels();

      /*  manage Progress ports for the GUI */
      //   bool connectProgress(in string providesName, in string usesPortName, in gov.cca.ComponentID cid, out string providesPortName);
      //   void disconnectProgress(in string progressPortName);

      // manage ComponentIcon ports for the GUI
      bool connectComponentIconUI(in string usesName,
                                                        in string providesPortName,
                                                        in gov.cca.ComponentID cid,
                                                        out string usesPortName);
      void disconnectComponentIconUI(in string ciPortName);

      bool setPortColor(in string portName, in string colorName);
      // see Bugzilla bug #2834:
      //bool setPortColor(in string portName, in opaque color);
      // opaque type is wxColor*
      opaque getPortColor(in string portName);
    }
  } // package ui
} // package scijump
