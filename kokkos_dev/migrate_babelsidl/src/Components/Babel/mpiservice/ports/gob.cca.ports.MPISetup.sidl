
// DO-NOT-DELETE bocca.splicer.begin(gob.comment)
// DO-NOT-DELETE bocca.splicer.end(gob.comment)
package gob version 0.0 {

    // DO-NOT-DELETE bocca.splicer.begin(gob.cca.comment)
    // DO-NOT-DELETE bocca.splicer.end(gob.cca.comment)
    package cca version 0.8.5 {

        // DO-NOT-DELETE bocca.splicer.begin(gob.cca.ports.comment)
        // DO-NOT-DELETE bocca.splicer.end(gob.cca.ports.comment)
        package ports {

            // DO-NOT-DELETE bocca.splicer.begin(gob.cca.ports.MPISetup.comment)
            // DO-NOT-DELETE bocca.splicer.end(gob.cca.ports.MPISetup.comment)
            interface MPISetup extends gov.cca.Port
            {
                // DO-NOT-DELETE bocca.splicer.begin(gob.cca.ports.MPISetup.methods)
        /** Check instance status. Only one init* call per instance is allowed.
        @return true if initAsService or initComponent already done.
         */
        bool isInitialized();

        /**
        *
        * This method is for treating an instance from an external driver
        * to set up a general service instance global to a frame.
        * Useful in at least the static linking case.
        *
         * Create and add to the framework MPIService
         * support. This will appear in the frame as an
         * MPICommSource component instance without necessarily existing
         * in the BuilderService accessible class list. 
         * MPI_Init must have been called before this is called.
         * This entry point should work for any cca framework bootstrapping
         * in commworld or otherwise scoped communicator via the standard
         * ServiceRegistry interface. This will not automatically
         * cause the component class providing this interface to appear in the
         * list of classes the user may instantiate.
         * In the MPI sense, this call must be collective on the scope of
         * dupComm.
         *
         * @param dupComm  the (valid) communicator (in fortran form) to duplicate
         *   for those using MPIService.
         * @param af The frame into which the server will add itself.
         * In principle, the caller should be able to forget about the class object
         * they are holding to make this call.
         */
        void initAsInstance(in long dupComm, inout gov.cca.AbstractFramework af) throws gov.cca.CCAException;

        /** Set the communicators on an uninitialized mpi support component
         * instance created like any other and register the component through
         * the ServiceRegistry.
         * 
         * In the MPI sense, this call must be collective on the scope of 
         * dupComm.
         * 
         * @param dupComm  the (valid) communicator (in fortran form) to duplicate
         *   for those using MPIService.
         * @param af The frame into which the server will add itself.
         * In principle, the caller should be able to forget about the class object
         * they are holding to make this call.
         */
        void initAsService(in long dupComm);

        /** Set the communicators on an uninitialized mpi support component
         * instance created like any other.
         * This does NOT cause the component being initialized to register itself
         * as a service for all comers.
         * This method is for treating an instance from inside a frame or
         * subframe as a peer component that may serve only certain other
         * components in the frame, e.g after a comm split.
         *
         * In the MPI sense, this call must be collective on the scope of
         * dupComm.
         *
         * @param dupComm  the (valid) communicator (in fortran form) to duplicate
         *   for those using MPIService.
         * @param af The frame into which the server will add itself.
         * In principle, the caller should be able to forget about the class object
         * they are holding to make this call.
         */
        void initComponent(in long dupComm);

        /**
         * Shutdown the previous mpi-related services.
         * @param reclaim if reclaim true, try to release communicator
         * resources allocated in MPIService support.
         * Otherwise, lose them.
         */
        void finalize(in bool reclaim) throws gov.cca.CCAException;

                // DO-NOT-DELETE bocca.splicer.end(gob.cca.ports.MPISetup.methods)
            }
        }
    }
}
