
// DO-NOT-DELETE bocca.splicer.begin(gob.comment)
// DO-NOT-DELETE bocca.splicer.end(gob.comment)
package gob version 0.0 {

    // DO-NOT-DELETE bocca.splicer.begin(gob.cca.comment)
    // DO-NOT-DELETE bocca.splicer.end(gob.cca.comment)
    package cca version 0.8.5 {

        // DO-NOT-DELETE bocca.splicer.begin(gob.cca.ports.comment)
        // DO-NOT-DELETE bocca.splicer.end(gob.cca.ports.comment)
        package ports {

            // DO-NOT-DELETE bocca.splicer.begin(gob.cca.ports.MPIService.comment)
            // DO-NOT-DELETE bocca.splicer.end(gob.cca.ports.MPIService.comment)
            interface MPIService extends gov.cca.Port
            {
                // DO-NOT-DELETE bocca.splicer.begin(gob.cca.ports.MPIService.methods)

      /** Get an mpi communicator with the same scope as the component instance.
       Won't be mpi_comm_null. The communicator returned will be
       private to the recipient, which implies an mpi_comm_dup by the provider.
       Call must be made collectively.
       @return The comm produced, in FORTRAN form. C callers use comm_f2c
               method defined by their mpi implementation, usually MPI_Comm_f2c,
               to convert result to MPI_Comm.
       @throw CCAException if the service cannot be implemented because MPI is
              not present.
       */
      long getComm() throws gov.cca.CCAException;

      /** Let go the communicator. previously fetched with getComm.
       * Call must be made collectively.
       *  @throw CCAException if an error is detected.
       */
      void releaseComm(in long comm) throws gov.cca.CCAException;

      /** Get the typically needed basic parallelism information for a component that
       *  requires no MPI communication and thus does not need an independent communicator.
       * Rationale: on very large machines, the cost of a Comm_dup should be avoided where possible;
       * The other calls on a MPI Comm object may affect its state, and thus should not
       * be proxied here.
       *  @throw CCAException if an error is detected.
       */
      void getSizeRank(out long commSize, out long commRank) throws gov.cca.CCAException;

	
                // DO-NOT-DELETE bocca.splicer.end(gob.cca.ports.MPIService.methods)
            }
        }
    }
}
