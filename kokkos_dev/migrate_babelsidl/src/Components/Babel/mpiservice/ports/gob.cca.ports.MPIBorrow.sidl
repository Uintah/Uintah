
// DO-NOT-DELETE bocca.splicer.begin(gob.comment)
/** GENERAL NOTES on MPI handles and SIDL:
*
* As MPI Forum explicitly DOES NOT define an interlanguage
* form for object (comm, group, etc) handles, we use the
* FORTRAN form which, being an integer of some size <= long
* in sidl, we will express in SIDL as a long.
*
* Implementations in C/C++/Python will have to use appropriate
* conversion operators, MPI_Comm_c2f/MPI_Comm_f2c, when
* passing/receiving object handles in long form.
*
* The MPI standard does not include an automatic reference counting
* model for its handles.
*/

// DO-NOT-DELETE bocca.splicer.end(gob.comment)
package gob version 0.0 {

    // DO-NOT-DELETE bocca.splicer.begin(gob.cca.comment)
    // DO-NOT-DELETE bocca.splicer.end(gob.cca.comment)
    package cca version 0.8.5 {

        // DO-NOT-DELETE bocca.splicer.begin(gob.cca.ports.comment)
        // DO-NOT-DELETE bocca.splicer.end(gob.cca.ports.comment)
        package ports {

            // DO-NOT-DELETE bocca.splicer.begin(gob.cca.ports.MPIBorrow.comment)
            // DO-NOT-DELETE bocca.splicer.end(gob.cca.ports.MPIBorrow.comment)
            interface MPIBorrow extends gov.cca.Port
            {
                // DO-NOT-DELETE bocca.splicer.begin(gob.cca.ports.MPIBorrow.methods)
      /** Get a communicator of the port provider (in FORTRAN form).
       * This communicator will be the same instance as the comm of the
       * port provider, with all the message collision potential that implies.
       * For all but perhaps debugging purposes, this call must be made
       * collectively.
       * The use of a tagList is optional (tagsRequested can be 0),
       * in which case no guarantees can be provided about tag conflicts.
       *
       * @param tagCount: The number of tags the borrower wishes to use
       *                all to itself.
       * @param tagList: Array to be filled with tags available. The
       *               array given as input must be at least tagCount long.
       *               The values of the tags returned are arbitrary, so if
       *               the user wishes the value of a tag to encode additional
       *               information, this port is not for that user.
       *
       * @param key: key to be returned when the tags and comm are done with.
       * @return The comm being borrowed, in FORTRAN form. C callers use comm_f2c
       *       method defined by their mpi implementation, usually MPI_Comm_f2c,
       *       to convert result to MPI_Comm.
       * @throw CCAException if the service cannot be implemented because MPI is
       *      not present.
       */
      long borrowComm(in int tagsRequested, inout array<int> tagList, inout int key) throws gov.cca.CCAException;

      /** Return a previously borrowed communicator and tag list.
       * For all but perhaps debugging purposes, this call must be made
       * collectively.
       *  @param tagCount: The length of tagList.
       *  @param tagList: The tags being returned, at least tagCount long.
       *  @param key: The key obtained with borrowComm. It is
       *         an error to attempt to return tags that you didn't receive.
       *  @throw CCAException if an error is detected.
       */
      void returnComm(in long comm, in int tagsRequested, inout array<int> tagList, in int key) throws gov.cca.CCAException;


                // DO-NOT-DELETE bocca.splicer.end(gob.cca.ports.MPIBorrow.methods)
            }
        }
    }
}
