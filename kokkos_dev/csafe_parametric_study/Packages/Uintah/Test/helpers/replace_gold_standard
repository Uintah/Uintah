#!/bin/sh

# echos are commented to not output so much

gold_standard_dir="$1"
replacement_dir="$2"
testname="$3"
force="$4" # if set to -f then it won't ask you yes/no questions
           # if set to -m then it won't ask, but will only replace memory stats

# Info for a log file, to keep track of who replaced gold standards
logfile="$gold_standard_dir/$testname/replace.log"
user=`whoami`
do_uda="false"
do_mem="false"
do_perf="false"
do_input="false"
do_checkpoint="false"

# prompt for and replace udas
if [ $# -ne 3 -a $# -ne 4 ]; then
  echo "usage: $0 <gold_standard_dir> <replacement_dir> <testname> [-f]"
  exit 1
fi
if [ ! -d $gold_standard_dir/$testname ]; then
  echo "$gold_standard_dir/$testname does not exist!"
  exit 1
fi
#__________________________________
# replace UDA
if [ ! -d $replacement_dir/$testname/*.uda -o "$force" = "-m" ]; then
  echo "No udas to replace, or not replacing them"
else

  if [ "$force" = "-f" ]; then
    yesno="yes"
  else
    echo "Replace the udas at $gold_standard_dir/$testname with $replacement_dir/$testname? (Enter 'yes' or 'y' to continue.) "
    read yesno
  fi
  
  # remove the udas, and copy the new ones
  if [ $yesno = "y" -o $yesno = "yes" ]; then
    do_uda="true"
    failcode="0"
    echo -n "Replacing $testname udas ... "
    rm -rf $gold_standard_dir/$testname/*.uda
    if [ $? != "0" ]; then
      failcode="1"
      echo "$testname replacement failed - could not remove old udas"
    fi

    #  echo "cp -r --dereference $replacement_dir/$testname/*.uda $gold_standard_dir/$testname/."
    # if it has a --dereference option, then use it
    cp -r --dereference $replacement_dir/$testname/*.uda $gold_standard_dir/$testname/. > /dev/null 2>&1

    # sometimes it doesn't work with --dereference...
    if [ $? != "0" ]; then
    # echo "Try without --dereference."
    # echo "cp -r $replacement_dir/$testname/*.uda $gold_standard_dir/$testname/."
      cp -r $replacement_dir/$testname/*.uda $gold_standard_dir/$testname/.
      if [ $? != "0" ]; then
        failcode="1"
	echo "$testname replacement failed - could not copy new udas"
      fi
    fi
    if [ "$failcode" = "0" ]; then
      echo "udas successfully replaced"
    fi
  else
    echo "udas not replaced"
  fi
fi
#__________________________________
# replace only the checkpoints
if [ ! -d $replacement_dir/$testname/*.uda/checkpoints -o "$force" = "-m" ]; then
  echo "No checkpoints to replace, or not replacing them"
else
  yesno="no"
  if [ "$do_uda" == "false" ]; then
      echo "Replace the checkpoints? (Enter 'yes' or 'y' to continue.) "
      read yesno
  fi
  
  # remove the udas, and copy the new ones
  if [ $yesno = "y" -o $yesno = "yes" ]; then
    do_checkpoint="true"
    failcode="0"
    echo -n "Replacing $testname udas ... "
    rm -rf $gold_standard_dir/$testname/*.uda/checkpoints
    if [ $? != "0" ]; then
      failcode="1"
      echo "$testname checkpoint replacement failed - could not remove old checkpoint directory"
    fi

    # if it has a --dereference option, then use it
    cp -r --dereference $replacement_dir/$testname/*.uda/checkpoints $gold_standard_dir/$testname/*.uda/. > /dev/null 2>&1

    # sometimes it doesn't work with --dereference...
    if [ $? != "0" ]; then
      cp -r $replacement_dir/$testname/*.uda/checkpoints $gold_standard_dir/$testname/*.uda/.
      if [ $? != "0" ]; then
        failcode="1"
	echo "$testname checkpoint replacement failed - could not copy the new checkpoint"
      fi
    fi
    if [ "$failcode" = "0" ]; then
      echo "checkpoint successfully replaced"
    fi
  fi
fi
#__________________________________
# replace memory usage stats
if [ ! -f $gold_standard_dir/$testname/malloc_stats ]; then
  echo "No memory stats to replace"
else
  
  # replace the memory usage (both normal and restart)

  if [ "$force" != "-f" ]; then
    echo "Replace $testname mem usage results? (Enter 'yes' or 'y' to continue.)"
    read yesno
  fi
  if [ $yesno = "y" -o $yesno = "yes" ]; then
    do_mem="true"
    echo "Replacing $testname memory results"
    rm $gold_standard_dir/$testname/*malloc* > /dev/null 2>&1
    cp $replacement_dir/$testname/malloc_stats $gold_standard_dir/$testname/. > /dev/null 2>&1
    if [ $? != "0" ]; then
      echo "No malloc_stats -- ok"
    fi
    cp $replacement_dir/$testname/restart/restart_malloc_stats $gold_standard_dir/$testname/. > /dev/null 2>&1
    if [ $? != "0" ]; then
      echo "No restart_malloc_stats -- ok"
    fi
  else
    echo "No memory usage results replaced"
  fi
fi
#__________________________________
# replace performance stats
if [ ! -f $replacement_dir/$testname/timestamp ]; then
  echo "No performance stats to replace"
else

  # replace the performance results (both normal and restart)
  if [ "$force" != "-f" ]; then
    echo "Replace $testname performance results? (Enter 'yes' or 'y' to continue.)"
    read yesno
  fi

  if [ $yesno = "y" -o $yesno = "yes" ]; then
    do_perf="true"
    echo "Replacing $testname performance results"
    rm $gold_standard_dir/$testname/*timestamp > /dev/null 2>&1
    cp $replacement_dir/$testname/timestamp $gold_standard_dir/$testname/. > /dev/null 2>&1
    if [ $? != "0" ]; then
      echo "Performance results not replaced"
    fi
    cp $replacement_dir/$testname/restart/restart_timestamp $gold_standard_dir/$testname/. > /dev/null 2>&1
    if [ $? != "0" ]; then
      echo "Restart performance results not replaced"
    fi
  else
    echo "No performance results replaced"
  fi
fi
#__________________________________
# replace input file
if [ "$force" != "-f" -a "$do_uda" = "false" ]; then
  echo "Replace $testname input file? (Enter 'yes' or 'y' to continue.)"
  read yesno
  
  if [ $yesno = "y" -o $yesno = "yes" ]; then
    do_input="true"
    echo "Replacing $testname input file"
    cp $replacement_dir/$testname/*.uda/input.xml $gold_standard_dir/$testname/*.uda/. > /dev/null 2>&1
  fi
fi



#__________________________________
# LOG FILE
if [ "$do_uda" = "true" -o "$do_mem" = "true" -o "$do_perf" = "true" -o "$do_input" = "true" -o "$do_checkpoint" = "true" ]; then
  # make a log
  if [ ! -f $logfile ]; then
    echo "Replacement log for $gold_standard_dir/$testname" >> $logfile
    echo "---------------------------------------------------------------------" >> $logfile
  fi

  echo -n "`date`: user $user " >> $logfile
  if [ "$do_uda" = "true" ]; then
    echo -n "replaced uda" >> $logfile
  fi
  if [ "$do_checkpoint" = "true" ]; then
    echo -n "replaced checkpoints" >> $logfile
  fi
  if [ "$do_mem" = "true" ]; then
    if [ "$do_uda" = "true" ]; then
      echo -n ", memory usage" >> $logfile
    else
      echo -n "replaced memory usage" >> $logfile
    fi
  fi
  if [ "$do_perf" = "true" ]; then
    if [ "$do_mem" = "true" -o "$do_uda" = "true" ]; then
      echo -n ", performance results" >> $logfile
    else
      echo -n "replaced performance results" >> $logfile
    fi
  fi
  if [ "$do_input" = "true" ]; then
    echo -n "replaced input file" >> $logfile
  fi  
  echo >> $logfile

# change groups and permissions so (hopefully) anybody can replace them later
#  find "$gold_standard_dir/$testname" -user `whoami` | /usr/bin/xargs chmod g+wrX
#  find "$gold_standard_dir/$testname" -user `whoami` | /usr/bin/xargs chmod o+rX  
#  find "$gold_standard_dir/$testname" -user `whoami` | /usr/bin/xargs chgrp csafe

  find "$gold_standard_dir/$testname" -user `whoami` -exec chmod g+wrX {} \;
  find "$gold_standard_dir/$testname" -user `whoami` -exec chmod o+rX {}  \; 
  find "$gold_standard_dir/$testname" -user `whoami` -exec chgrp csafe {} \;


fi

echo

