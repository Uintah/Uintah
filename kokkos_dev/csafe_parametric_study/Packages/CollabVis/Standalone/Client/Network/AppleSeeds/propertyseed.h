/* $Id$ */


/*
 * Copyright © 2000 The Regents of the University of California. 
 * All Rights Reserved. 
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for educational, research and non-profit purposes, without
 * fee, and without a written agreement is hereby granted, provided that the
 * above copyright notice, this paragraph and the following three paragraphs
 * appear in all copies. 
 *
 * Permission to incorporate this software into commercial products may be
 * obtained by contacting
 * Eric Lund
 * Technology Transfer Office 
 * 9500 Gilman Drive 
 * 411 University Center 
 * University of California 
 * La Jolla, CA 92093-0093
 * (858) 534-0175
 * ericlund@ucsd.edu
 *
 * This software program and documentation are copyrighted by The Regents of
 * the University of California. The software program and documentation are
 * supplied "as is", without any accompanying services from The Regents. The
 * Regents does not warrant that the operation of the program will be
 * uninterrupted or error-free. The end-user understands that the program was
 * developed for research purposes and is advised not to rely exclusively on
 * the program for any reason. 
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
 * EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED
 * HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO
 * OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
 * MODIFICATIONS. 
 */


#ifndef PROPERTYSEED_H
#define PROPERTYSEED_H


/*
 * This package provides facilities for manipulating property lists -- sets of
 * name/value pairs where both the name and value are strings.  Property lists
 * have the same format as the system environ variable (NULL-terminated arrays
 * of strings of the form name=value), but the functions below provide enough
 * abstraction that client code need not be aware of this.  However, this
 * correspondence does mean that the environ variable can be passed to the
 * functions below.
 *
 * In addition to basic functions for manipulating property lists, this package
 * provides means for replacing references in a string to a property with its
 * value (ASPROP_ResolveReferences) and for reading and writing property lists
 * from/to files (ASPROP_ReadPropertyList, ASPROP_WritePropertyList).  The
 * reference and file formats supported by these functions (see below) follow
 * Unix conventions, but other formats can easily be supported using the basic
 * manipulation functions.
 *
 * Property references in strings have the form $propertyName, $(propertyName),
 * or ${propertyName}.  In the former case, the name can contain letters,
 * numbers, '_', and '.'; in the latter two, any character other than the
 * closing delimiter.
 *
 * In text files, property name/value pairs have the format name=value, where
 * the value continues until the end of the line.  A line that contains
 * '#include' followed by a file path specifies another property file that will
 * be read into the property list.  Any other text following a '#' is ignored,
 * and whitespace is significant only within the value.  Multiple properties
 * can be listed on a line by separating them with semicolons.  The value can
 * be enclosed in double quotes; such quoted values can contain leading and/or
 * trailing whitespace, '#', ';', and C character escape sequences (e.g. '\b'
 * for backspace or '\"' for quote).  The values placed into the property list
 * are stripped of any quotes and have all escape sequences replaced by the
 * characters they represent.  The WritePropertyList function terminates the
 * list with an end-of-list marker (a closing brace), so that property lists
 * may be embedded in files that contain additional information.
 *
 * Values can appear in property files without a name or equals sign, in which
 * case the package uses the position of the property in its list as the name.
 * For example, the PropertyList generated by a file containing the lines:
 *
 *   abcdefg
 *   foo=hijklmn
 *   "foo=hijklmn"
 *   opq
 *
 * will contain properties named "0", "foo", "2" and "3" with the values
 * "abcdefg", "hijklmn", "foo=hijklmn", and "opq", respectively.
 *
 * A period (".") in a property name is treated specially.  The text before the
 * period is taken as the "scope" of the property and the text after as the
 * name.  This allows grouping of property values within a namespace.  For
 * example, the lines:
 *
 *   outer.inner.a = 55
 *   outer.inner.b = 66
 *   outer.inner.c = 77
 *
 * define the three properties "a", "b", and "c" within the scope "inner",
 * which is contained within the scope "outer".  The property file parser
 * allows a shorthand for sequential property definitions within the same scope
 * using the format "<scope> = { <property>; <property> ... }".  The three
 * properties above could alternately be set using:
 *
 *   outer.inner = {
 *     a = 55
 *     b = 66
 *     c = 77
 *   }
 *
 * or:
 *
 *   outer = {
 *     inner.a = 55
 *     inner = { b = 66; c = 77 }
 *   }
 *
 * The semantics of this feature are still being developed.  The package
 * presently provides no way to manipulate multiple properties defined within a
 * common scope, and the scope in which a property reference appears does not
 * affect which property is referenced.  For example, after resolving the
 * properties defined by:
 *
 *   property = outer
 *   scope = {
 *     property = inner
 *     ref1 = $property reference
 *     ref2 = $scope.property reference
 *   }
 *
 * The value of scope.ref1 is "outer reference", while the value of scope.ref2
 * is "inner reference".
 */


#include <sys/types.h> /* size_t */
#include <stdio.h>     /* FILE */


#ifdef __cplusplus
extern "C" {
#endif


/* Basic PropertyList manipulation. */


/* A single property in a property list. */
typedef char *ASPROP_Property;
/* An invalid property value. */
#define ASPROP_NO_PROPERTY ((ASPROP_Property)0)
/* A list of properties. */
typedef ASPROP_Property *ASPROP_PropertyList;
/* An invalid property list value. */
#define ASPROP_NO_PROPERTY_LIST ((ASPROP_PropertyList)0)


/*
 * Returns the property for #name# in #list#, or ASPROP_NO_PROPERTY if #list#
 * includes no value for #name#.
 */
const ASPROP_Property
ASPROP_FindPropertyByName(const ASPROP_PropertyList list,
                          const char *name);


/*
 * Returns the property for the #size#-long name #name# in #list#, or
 * ASPROP_NO_PROPERTY if #list# includes no value for #name#.
 */
const ASPROP_Property
ASPROP_FindPropertyByNameSized(const ASPROP_PropertyList list,
                               const char *name,
                               size_t size);


/* Shorthand for ASPROP_PropertyValue(ASPROP_FindPropertyByName(list, name)). */
#define ASPROP_FindPropertyValueByName(list,name) \
  ASPROP_PropertyValue(ASPROP_FindPropertyByName((list), (name)))


/*
 * Shorthand for ASPROP_PropertyValue(ASPROP_FindPropertyByNameSized(list,name))
 */
#define ASPROP_FindPropertyValueByNameSized(list,name,size) \
  ASPROP_PropertyValue(ASPROP_FindPropertyByNameSized((list), (name), (size)))


/* An iterator for property lists. */
#define ASPROP_ForEachProperty(list,propertyPtr) \
  for(propertyPtr = list; *propertyPtr != ASPROP_NO_PROPERTY; propertyPtr++)


/*
 * Frees the resources used by #list# and sets #list# to
 * ASPROP_NO_PROPERTY_LIST.
 */
void
ASPROP_FreePropertyList(ASPROP_PropertyList *list);


/* mallocs and returns an empty ASPROP_PropertyList. */
ASPROP_PropertyList
ASPROP_NewPropertyList(void);


/* Returns the number of properties in #list#. */
size_t
ASPROP_PropertyCount(const ASPROP_PropertyList list);


/* Returns the name associated with #property#. */
const char *
ASPROP_PropertyName(const ASPROP_Property property);


/* Returns the value associated with #property#. */
const char *
ASPROP_PropertyValue(const ASPROP_Property property);


/* Removes any association for #name# in #list#. */
void
ASPROP_RemoveProperty(ASPROP_PropertyList *list,
                      const char *name);


/*
 * Sets the value of #name# in #list# to #value#, either adding a new property
 * or overwriting an old one.
 */
void
ASPROP_SetProperty(ASPROP_PropertyList *list,
                   const char *name,
                   const char *value);


/* ASPROP_PropertyList manipulation. */


/*
 * Returns a new ASPROP_PropertyList that contains copies of all properties
 * from #list# that have a name that begins with #prefix#.
 */
ASPROP_PropertyList
ASPROP_PropertySublistByPrefix(const ASPROP_PropertyList list,
                               const char *prefix);


/*
 * Returns a string equivalent of #list# that has the elements terminated by
 * newlines and a backslash inserted before any backslashes or newlines in the
 * property values.  The returned value points to allocated memory, so the
 * caller should free it after use.
 */
char *
ASPROP_StringFromPropertyList(const ASPROP_PropertyList list);


/*
 * Returns an ASPROP_PropertyList equivalent of #s#, which must be in the
 * format produced by ASPROP_StringFromPropertyList.  The returned value should
 * be passed to ASPROP_FreePropertyList after use.
 */
ASPROP_PropertyList
ASPROP_StringToPropertyList(const char *s);


/* Property reference resolution. */


/*
 * Returns a copy of #text# with property references replaced by values.  If
 * #defaultValue# is not NULL, references with no corresponding property in
 * #list# are replaced by its value; otherwise, they are left unchanged.  The
 * value returned is volatile and will be overwritten by subsequent calls.
 */
const char *
ASPROP_ResolveReferences(ASPROP_PropertyList list,
                         const char *text,
                         const char *defaultValue);


/*
 * Replaces any references in the values of #list# with the property value from
 * #list#.  If #defaultValue# is not NULL, references with no corresponding
 * property in #list# are replaced by its value; otherwise, they are left
 * unchanged.
 */
void
ASPROP_ResolveReferencesInList(ASPROP_PropertyList *list,
                               const char *defaultValue);


/* Reading and writing property lists. */


/*
 * Creates a new property list from the contents of a text file.  Reads and
 * returns a property list from #fromWhere#.  The returned value is malloced
 * and should later be passed to ASPROP_FreePropertyList.
 */
ASPROP_PropertyList
ASPROP_ReadPropertyList(FILE *fromWhere);


/*
 * Writes a property list to a file in a format that can later be read by
 * ASPROP_ReadPropertyList.  Writes each element of #list# to #toWhere#.
 */
void
ASPROP_WritePropertyList(FILE *toWhere,
                         const ASPROP_PropertyList list);


#ifdef ASPROP_SHORT_NAMES

#define Property ASPROP_Property
#define NO_PROPERTY ASPROP_NO_PROPERTY
#define PropertyList ASPROP_PropertyList
#define NO_PROPERTY_LIST ASPROP_NO_PROPERTY_LIST

#define FindPropertyByName ASPROP_FindPropertyByName
#define FindPropertyByNameSized ASPROP_FindPropertyByNameSized
#define FindPropertyValueByName ASPROP_FindPropertyValueByName
#define FindPropertyValueByNameSized ASPROP_FindPropertyValueByNameSized
#define ForEachProperty ASPROP_ForEachProperty
#define FreePropertyList ASPROP_FreePropertyList
#define NewPropertyList ASPROP_NewPropertyList
#define PropertyCount ASPROP_PropertyCount
#define PropertyName ASPROP_PropertyName
#define PropertyValue ASPROP_PropertyValue
#define RemoveProperty ASPROP_RemoveProperty
#define SetProperty ASPROP_SetProperty
#define ResolveReferences ASPROP_ResolveReferences
#define ResolveReferencesInList ASPROP_ResolveReferencesInList
#define ReadPropertyList ASPROP_ReadPropertyList
#define PropertySublistByPrefix ASPROP_PropertySublistByPrefix
#define StringFromPropertyList ASPROP_StringFromPropertyList
#define StringToPropertyList ASPROP_StringToPropertyList
#define WritePropertyList ASPROP_WritePropertyList

#endif

#ifdef __cplusplus
}
#endif


#endif
