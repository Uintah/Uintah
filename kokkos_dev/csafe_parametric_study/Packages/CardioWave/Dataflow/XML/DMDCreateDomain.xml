<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE component SYSTEM "../../../../Dataflow/XML/component.dtd">
<component name="DMDCreateDomain" category="DiscreteMultiDomain" optional="false">
  <overview>
    <authors>
      <author>Jeroen Stinstra</author>
    </authors>
    <summary>
      This module creates the domain for the discrete multidomain computation.

    </summary>
    <description>
      <p>        
This module creates the domain for the discrete multidomain computation. The module needs
two input fields named Conductivity and ElementType. The field Conductivty describes the
conductivity throughout the domain and needs to have the mesh as ElementType which describes
the layout of the domains. ElementType contains integer values and each domain is defined as
the elements with the same the value in elementtype. Before one can use the field it is good
to split the the field into regions that connect elements of the same type, but do not connect
elements from different domains. Use the module SplitFieldByElementData to split the field
properly.  
      </p>
      <p>
All other inputs are optional: ConductivityTable specifies the conductivies in case the 
Conductivity field is indexed into a table. One can use the BioPSE definitions here as well
and hence this field is optional and not needed if the field already has a conductivity table.
GeomToComp and CompToGeom specify the geometrical mesh to comptutational grid mapping. In theory
only on of these needs to be computed as the other one will be automatically generated. However
if one has both tables it is more efficient to supply both. Note that the LinkFieldBoundary and
LinkFieldBoundaryByElement modules already assign these properties to the fields. Use these
inputs only if you want to do any manually collapsing of nodes into one computational node.
The last input MembraneLink is mapping matrix that contains information on whether Membranes need
to be linked over the boundary. This mapping matrix is automatically generated by LinkFieldBoundaryByElement.
      </p>

    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
        <name>Conductivity</name>
        <datatype>SCIRun::Field</datatype>
      </port>
      <port>
        <name>ElementType</name>
        <datatype>SCIRun::Field</datatype>
      </port>
      <port>
        <name>ConductivityTable</name>
        <datatype>SCIRun::Matrix</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
        <name>DomainBundle</name>
        <datatype>SCIRun::Bundle</datatype>
      </port>
    </outputs>
  </io>
</component>
