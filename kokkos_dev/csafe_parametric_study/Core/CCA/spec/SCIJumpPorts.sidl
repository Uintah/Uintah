/*
  For more information, please see: http://software.sci.utah.edu

  The MIT License

  Copyright (c) 2004 Scientific Computing and Imaging Institute,
  University of Utah.

  License for the specific language governing rights and limitations under
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
*/

distribution array DMatrix <double,2>;


/** Port to Framework properties. */
interface FrameworkProperties extends sci.cca.Port
{
  TypeMap getProperties();
  void setProperties(in TypeMap properties);
}

interface FrameworkProxyService extends sci.cca.Port
{
  int addLoader(in string loaderName, in string login, in string domain, in string path);
  int removeLoader(in string name);

  //void registerFramework(in string frameworkURL);
  //void registerServices(in sci.cca.Services svc);
}

interface GUIService extends sci.cca.Port
{
  // get first available builder?
  // get builder by name
  // connect to a GUIBuilder if available: assume or enforce in the same address space?
  // unique builder name? throw CCAException?
  void addBuilder(in string builderName, in sci.cca.GUIBuilder builder);
  void removeBuilder(in string builderName);
  void updateProgress(in cca.ComponentID cid, in int progressPercent);
  void updateComponentModels();
}

// Should part of an extended builder service.
interface ApplicationLoaderService extends sci.cca.Port {
  string getFileName();
  void setFileName(in string filename);

  void loadFile(out array<sci.cca.ComponentID> cidList, out array<sci.cca.ConnectionID> connList);
  void loadFile[As](in string filename, out array<sci.cca.ComponentID> cidList, out array<sci.cca.ConnectionID> connList);

  void saveFile();
  void saveFile[As](in string filename);
}

//Temp test (Bridge)
interface IDPort extends sci.cca.Port
{
  collective string get_id();
}

interface BridgeTestPort extends sci.cca.Port
{
  //int m1(in int i);
  void m2(in array<int, 1> a);
}


/** Port to SCIRun(1) scheduler interface. */
interface DataflowScheduler extends sci.cca.Port
{
  bool toggleOnOffScheduling();
  void do_scheduling();
}

//abstract interface
interface StringPort extends sci.cca.Port
{
  collective string getString();
}

/**
 * Component representation in UI:
 *  use to set properties in UI classes.
 */
interface ComponentIconUI extends sci.cca.Port {
  collective string getDisplayName();
  collective string getDescription();
}

/**
 * Provide a user interface for a component - a UI button
 * will be added to the components iconic representation in the GUI...
 *
 */
//abstract interface
interface UIPort extends sci.cca.Port
{
  /**
   * Component user interface...
   * @return 0 for success, -1 for fatal error, other non-zero
   *  values for others errors.
   */
  collective int ui();
}

// unused for now -> should test with ploader
//abstract interface
//interface BuilderPort extends sci.cca.Port
//{
/** The builder port is designed for the Builder only
 *  There is only one port for convenience.
 *  All final modification should be done through
 *  the BuilderService and the BuilderService will tranverse
 *  each Builder
 */
//    void buildRemotePackageMenus(in sci.cca.ports.ComponentRepository reg, in string frameworkURL);
//}


//abstract interface
interface ZListPort extends sci.cca.Port
{
  array<double> getList();
}
/* $Source: /usr/sci/projects/cvsrepository/SCIRun/src/Core/CCA/spec/SCIRun2Ports.sidl,v $ */



//abstract interface
interface LinSolverPort extends sci.cca.Port
{
  //provides a interface to
  collective
  int jacobi(in DMatrix A, in array<double> b, out array<double> x);
}

//abstract interface
interface PDEdescriptionPort extends sci.cca.Port
{
  //provides a interface to
  int getPDEdescription(out array<double> nodes, out array<int> boundaries,
                        out array<int> dirichletNodes, out array<double> dirichletValues);
}

//abstract interface
interface MeshPort extends sci.cca.Port
{
  //provides a interface to
  int triangulate(in array<double> nodes, in array<int> boundaries, out array<int> triangles);
}

//abstract interface
interface ViewPort extends sci.cca.Port
{
  //provides a interface to
  int view2dPDE(in array<double> nodes, in array<int> triangles, in array<double> solution);
}

//abstract interface
interface FEMmatrixPort extends sci.cca.Port
{
  //provides a interface to
  int makeFEMmatrices(in array<int> mesh, in array<double> nodes,
                      in array<int> dirichletNodes, in array<double> dirichletValues,
                      out array<double,2> Ag, out array<double> fg, out int size);
}

// BEGIN proposed sparker
// Builder events
// Component created
// Component destroyed
// Component moved
// Connection created
// Connection destroyed
// Connection moved
enum ComponentEventType {
  AllComponentEvents = 0,
  InstantiatePending=1,
  ComponentInstantiated=2,
  DestroyPending=3,
  ComponentDestroyed=4,
  ComponentMoved=5,
}

interface ComponentEventListener {
  void componentActivity(in ComponentEvent evt);
}

interface ComponentEvent {
  ComponentEventType getEventType() ;

  /** Get the ComponentID of the affected Component. */
  ComponentID getComponentID();

  /** Get the Properties of the affected Component. */
  TypeMap getComponentProperties() ;
}

interface ComponentEventService extends Port {
  /** Sign up to be told about component activity.
      @param ComponentEventType must be one of the integer values
      ALL, ConnectPending, Connected, DisconnectPending, Disconnected
      as defined in @see ContainerEventType.
      ALL means listening to all of the other four listed here.
      @param l, an object (this component or its delegate) that listens
      by implementing the ConnectionEventListener callback.
      @param playInitialEvents, send events for components that have
      already been instantiated
  */
  void addComponentEventListener(in ComponentEventType type, in ComponentEventListener l, in bool playInitialEvents);

  /** Ignore future ComponentEvents of the given type.
      Removing a non-added listener is not an error.
      @param ComponentEventType must be one of the integer values defined in
      addConnectionEventListener.
      @param l, a previously added listener interface.
  */
  void removeComponentEventListener(in ComponentEventType type, in ComponentEventListener l) ;

  void moveComponent(in ComponentID component, in int x, in int y);
}
// END proposed - sparker

//***********************************************************************************

/**
 * The proposed event service is based on a publish-subscribe model:
 * events are organized into a namespace of topics.
 * This service is responsible for organizing the namespace of topics,
 * setting and enforcing event policies,
 * and maintaining the resources needed for event distribution.
 */
interface EventService extends cca.Port {

  /**
   * @return the Topic if it already exists,
   * @exception EventServiceException if creating Topic fails
   */
  cca.Topic createTopic(in string topicName) throws EventServiceException;

  /**
   * Get a Topic by name.
   * @return Topic,
   * @exception EventServiceException if topicName is empty or if not found
   */
  cca.Topic getTopic(in string topicName) throws EventServiceException;

  /**
   * @return the Subscription if it already exists,
   * @exception EventServiceException if creating Subscription fails
   */
  cca.Subscription subscribeToEvents(in string topicName) throws EventServiceException;

  /**
   * Notifies the EventService that this Topic is no longer used.
   * @exception EventServiceException if topicName is empty or if not found
   */
  void releaseTopic(in string topicName) throws EventServiceException;

  /**
   * Notifies the EventService that this Subscription is no longer used.
   * @exception EventServiceException if topicName is empty or if not found
   */
  void releaseSubscription(in cca.Subscription subscription) throws EventServiceException;

  /** Process published events. */
  void processEvents();

}

//***********************************************************************************

  //From Ben Allan (CCAFFEINE) -- a draft of MPIService

    /** "ccafe.ports.MPIBorrow" :
     * UNADOPTED-standard service for getting a shared communicator.
     *
     * As MPI Forum explicitly DOES NOT define an interlanguage
     * form for object (comm, group, etc) handles, we use the
     * FORTRAN form which, being an integer of some size <= long
     * in sidl, we will express in SIDL as a long.
     * Implementations in C/C++/Python will have to use appropriate
     * conversion operators, MPI_Comm_c2f/MPI_Comm_f2c, when
     * passing/receiving object handles in long form.
     */
    interface MPIBorrow extends cca.Port
    {

      /** Get a communicator of the port provider (in FORTRAN form).
       This communicator will be the same instance as the comm of the
       port provider, with all the message collision potential that implies.
       Instances which have a comm covering only a subset of themselves
       will return FORTRAN MPI_COMM_NULL on their "un-covered" processes.

       @param tagCount: The number of tags the borrower wishes to use
                    all to itself.
       @param tagList: Array to be filled with tags available. The
                   array given as input is at least tagCount long and
                   indexes from 0.
       @param key: key to be returned when the tags and comm are done with.
       @return The comm being borrowed, in FORTRAN form. C callers use comm_f2c
           method defined by their mpi implementation, usually MPI_Comm_f2c,
           to convert result to MPI_Comm.
       @throw CCAException if the service cannot be implemented because MPI is
          not present.
      */
      long borrowComm(in int tagsRequested, inout array<int> tagList, inout int key) throws cca.CCAException;

      /** Return a previously borrowed communicator and tag list.
       *  @param tagCount: The length of tagList.
       *  @param tagList: The tags being returned, at least tagCount long.
       *  @param key: The key obtained with borrowComm. It is
       *         an error to attempt to return tags that you didn't receive.
       *  @throw CCAException if an error is detected.
       */
      void returnComm(in long comm, in int tagsRequested, inout array<int> tagList, in int key) throws cca.CCAException;
    };


    /**
     * "ccafe.ports.MPIService":
     * UNADOPTED-standard service for getting a private mpi comm.
     *
     * As MPI Forum explicitly DOES NOT define an interlanguage
     * form for object (comm, group, etc) handles, we use the
     * FORTRAN form which, being an integer of some size <= long
     * in SIDL, we will express in SIDL as a long.
     * Implementations in C/C++/Python will have to use appropriate
     * conversion operators, MPI_Comm_c2f/MPI_Comm_f2c etc, when
     * passing/receiving object handles in long form.
     */
    interface MPIService extends cca.Port {

      /** Get an mpi communicator with the same scope as the component instance.
       Won't be mpi_comm_null. The communicator returned will be
       private to the recipient, which implies an mpicommdup.
       @return The comm produced, in FORTRAN form. C callers use comm_f2c
           method defined by their mpi implementation, usually MPI_Comm_f2c,
           to convert result to MPI_Comm.
       @throw CCAException if the service cannot be implemented because MPI is
          not present.
       */
      long getComm() throws cca.CCAException;

      /** Let go the communicator. previously fetched with getComm.
       *  @throw CCAException if an error is detected.
       */
      void releaseComm(in long comm) throws cca.CCAException;

    }

