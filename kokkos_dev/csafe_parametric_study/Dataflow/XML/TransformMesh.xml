<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "component.dtd">
<?xml-stylesheet href="component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
-->



<component name="TransformMesh" category="FieldsGeometry">
  <overview>
    <authors>
      <author>Michael Callahan</author>
    </authors>
    <summary>Perform a specified functional transform on all of the
points in a field.</summary>
    <description>
      <p>Compute the specified function on each point in the input
field.</p>

      <p>The mesh transform is specified in the GUI as the body of a
C++ function.  The input values to the function is 'p'.  No value is
returned, rather set the 'result' variable to the return point.  For
example, "result = Point(p.x() + 5, p.y(), p.z());" would return a new
field translated by 5 in the X direction.</p>

      <p>This module does not work on the mesh types that do not
contain any implicit points.  This includes LatVolMesh, ImageMesh, and
ScanlineMesh.  The function will not compile but give an error about
set_point being undefined.</p>
    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
        <name>Input Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
        <name>Output Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
    </outputs>
  </io>
  <nets>
    <net id="TransformMesh-cylinder">
      <title>TransformMesh-cylinder Regression Test</title>

      <p>Create and draw a StructHexVolField using the TransformMesh
module to do a nonlinear deformation of the mesh. The default
StructHexVolField created by the module is visually indistinguishable
from the lattice created by <modref package="SCIRun"
name="SampleLattice"/>, so this network shows off the capabilities of
the StructHexVolField by using the <modref package="SCIRun"
name="TransformMesh"/> module to transform the points into a
low-distortion cylinder.</p>

      <p>This network can be found at
src/nets/Modules/FieldsGeometry/TransformMesh-cylinder.net.</p>
    </net>
  </nets>
</component>
