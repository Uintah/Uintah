<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "../../../../Dataflow/XML/component.dtd">
<?xml-stylesheet href="../../../../Dataflow/XML/component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
-->



<component name="ApplyFEMElectrodeSource" category="Forward">
  <overview>
    <authors>
      <author>David Weinstein</author>
    </authors>
    <summary>Due to course current dipoles, the ApplyFEMElectrodeSource module changes and recreates the right-hand side (RHS) for the Finite
    Elements discretization approach.</summary>
    <description>
      <p>Version Date: March 2001</p><p>Version: 1.0</p>
      <orderedlist>
	<listitem>
	  <p>The ApplyFEMElectrodeSource module creates and fills a new ColumnMatrix,
	  according to mesh and dipole parameters in situations where it does not locate a ColumnMatrix on its input
	  that contains an RHS to modify, or when the module finds a ColumnMatrix of a 
	  different size than the number of nodes in the mesh.</p>
	</listitem>
	<listitem>
	  <p>We assume the mesh to be a TetVolField(int) type,
	  containing indices to the conductivity tensor lookup table.
	  The documentation for the <modref package="BioPSE" name="SetupFEMatrix"/> module provides further documentation about this mesh.</p>
	</listitem>
	<listitem>
	  <p>Dipoles are represented as nodes in TetVolMesh. The
	  corresponding value are vectors representing dipole
	  moments. Thus, the module expects dipoles as TetVolField(Vector) field</p>
	</listitem>
      </orderedlist>
    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <!-- one of (device port file) -->
      <port>
	<name>Mesh</name>
	<description>
	  <p>Takes handle to the field containing condictivity mesh</p>
	</description>
	<datatype>SCIRun::Field</datatype>
	<componentname>FieldReader</componentname>
      </port>
      <port>
	<name>Dipole Sources</name>
	<description>
	  <p>Takes handle to the field containing dipole positions and
	  their moment values</p>
	</description>
	<datatype>SCIRun::Field</datatype>
	<componentname>FieldReader</componentname>
      </port>
      <port>
	<name>Mapping</name>
	<description>
	  <p>Maps electrode indices to mesh indices</p>
	</description>
	<datatype>SCIRun::Matrix</datatype>
	<componentname>MatrixReader</componentname>
      </port>
      <port>
	<name>Input RHS</name>
	<description>
	  <p>Takes handle to the matrix containing RHS for FE
	  discretization obtained from SetupFEMatrix</p>
	</description>
	<datatype>SCIRun::Matrix</datatype>
	<componentname>SetupFEMatrix</componentname>
	<componentname>MatrixReader</componentname>
      </port>
      <port>
	<name>Current Pattern</name>
	<description>
	  <p>Takes handle to the matrix containing current pattern
	  to apply when using the electrode set option</p>
	</description>
	<datatype>SCIRun::Matrix</datatype>
	<componentname>MatrixReader</componentname>
      </port>
      <port>
        <name>CurrentPatternIndex</name>
        <datatype>SCIRun::Matrix</datatype>
      </port>
      <port>
	<name>Electrode Parameters</name>
	<description>
	  <p>Takes handle to the matrix containing electrode parameters
	  for use with the electrode set option</p>
	</description>
	<datatype>SCIRun::Matrix</datatype>
	<componentname>MatrixReader</componentname>
      </port>
      <port>
	<name>Boundary</name>
	<description>
	  <p>Takes handle to the boundary field</p>
	</description>
	<datatype>SCIRun::Field</datatype>
	<componentname>FieldReader</componentname>
      </port>
      <port>
	<name>Boundary Transfer Matrix</name>
	<description>
	  <p>Takes a handle to a SparseRowMatrix relating boundary nodes to mesh nodes</p>
	</description>
	<datatype>SCIRun::Matrix</datatype>
	<componentname>MatrixReader</componentname>
      </port>
    </inputs>

    <outputs>
      <!-- one of (device port file) -->
      <port>
	<name>Output RHS</name>
	<description>
	  <p>Sends handle to Matrix containing dipole terms to downstream modules</p>
	</description>
	<datatype>SCIRun::Matrix</datatype>
	<componentname>SolveMatrix</componentname>
	<componentname>MatrixWriter</componentname>
      </port>
      <port>
        <name>Mesh to Electrode Map</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
    </outputs>
  </io>
  
  <testing>
  </testing>
</component>
