Index: avtOpenGLMoleculeRenderer.h
===================================================================
--- avtOpenGLMoleculeRenderer.h	(revision 9839)
+++ avtOpenGLMoleculeRenderer.h	(working copy)
@@ -132,6 +132,8 @@
                    const MoleculeAttributes&);
 
     void *tex;
+
+    class ParticleInstancingRenderer *instancing_renderer;
 };
 
 
Index: Molecule.xml
===================================================================
--- Molecule.xml	(revision 9839)
+++ Molecule.xml	(working copy)
@@ -5,6 +5,7 @@
     </CXXFLAGS>
     <Files components="V">
       avtMoleculeRenderer.C
+      ParticleInstancingRenderer.C	
       avtOpenGLMoleculeRenderer.C
       avtMesaMoleculeRenderer.C
       avtOpenGLAtomTexturer.C
@@ -17,6 +18,7 @@
     </LIBS>
     <Files components="E">
       avtMoleculeRenderer.C
+      ParticleInstancingRenderer.C	
       avtOpenGLMoleculeRenderer.C
       avtMesaMoleculeRenderer.C
       avtOpenGLAtomTexturer.C
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 9839)
+++ CMakeLists.txt	(working copy)
@@ -25,6 +25,7 @@
 MoleculeViewerPluginInfo.C
 avtMoleculePlot.C
 avtMoleculeRenderer.C
+ParticleInstancingRenderer.C
 avtOpenGLMoleculeRenderer.C
 avtMesaMoleculeRenderer.C
 avtOpenGLAtomTexturer.C
@@ -37,6 +38,7 @@
 MoleculeEnginePluginInfo.C
 avtMoleculePlot.C
 avtMoleculeRenderer.C
+ParticleInstancingRenderer.C
 avtOpenGLMoleculeRenderer.C
 avtMesaMoleculeRenderer.C
 avtOpenGLAtomTexturer.C
@@ -138,5 +140,5 @@
 ENDIF(VISIT_PARALLEL)
 
 VISIT_INSTALL_PLOT_PLUGINS(${INSTALLTARGETS})
+VISIT_PLUGIN_TARGET_PREFIX(${INSTALLTARGETS})
 
-VISIT_PLUGIN_TARGET_PREFIX(${INSTALLTARGETS})
Index: avtOpenGLMoleculeRenderer.C
===================================================================
--- avtOpenGLMoleculeRenderer.C	(revision 9839)
+++ avtOpenGLMoleculeRenderer.C	(working copy)
@@ -69,6 +69,7 @@
 
 #include <avtLookupTable.h>
 #include "avtOpenGLAtomTexturer.h"
+#include "ParticleInstancingRenderer.h"
 
 #include <DebugStream.h>
 #include "matrix.c"
@@ -135,6 +136,8 @@
     cylinders_calculated = false;
 
     tex = (void *)new avtOpenGLAtomTexturer;
+
+    instancing_renderer=new ParticleInstancingRenderer();
 }
 
 
@@ -162,6 +165,8 @@
     }
 
     delete ((avtOpenGLAtomTexturer *)tex);
+
+    delete instancing_renderer;
 }
 
 
@@ -387,7 +392,21 @@
         }
     }
 
-    glBegin(GL_QUADS);
+
+    // If we're not doing imposter rendering, but we support instancing,
+    // use the tbo instancing renderer.
+    bool instancing = (vmode==0 && instancing_renderer->IsSupported());
+    if (instancing)
+    {
+        vmode = 3;
+        instancing_renderer->ClearParticles();
+        instancing_renderer->SetQualityLevel(atts.GetAtomSphereQuality());
+    }
+
+    // if not instancing
+    if (!instancing)
+        glBegin(GL_QUADS);
+
     vtkIdType *vertptr = data->GetVerts()->GetPointer();
     for (int ix=0; ix<numverts; ix++, vertptr += (1+*vertptr))
     {
@@ -413,24 +432,23 @@
             radius = radiusvar[atom] * radiusscale;
 
         // Determine color
+        const unsigned char *color;
         if (color_by_element)
         {
             int level = element_number % numcolors;
-            SetColor3ubv(&colors[4*level]);
+            color = &colors[4*level];
         }
         else if (color_by_levels)
         {
             int level = int(scalar[atom]) - (primary_is_resseq ? 1 : 0);
             if(levelsLUT != 0)
             {
-                const unsigned char *rgb = 
-                    levelsLUT->GetLookupTable()->MapValue(level);
-                SetColor3ubv(rgb);
+                color = levelsLUT->GetLookupTable()->MapValue(level);
             }
             else
             {
                 level = level % numcolors;
-                SetColor3ubv(&colors[4*level]);
+                color = &colors[4*level];
             }
         }
         else
@@ -441,28 +459,30 @@
             else
                 alpha = (scalar[atom] - varmin) / (varmax - varmin);
             
-            int color = int((float(numcolors)-.01) * alpha);
-            if (color < 0)
-                color = 0;
-            if (color > numcolors-1)
-                color = numcolors-1;
-            SetColor3ubv(&colors[4*color]);
+            int icolor = int((float(numcolors)-.01) * alpha);
+            if (icolor < 0)
+                icolor = 0;
+            if (icolor > numcolors-1)
+                icolor = numcolors-1;
+            color = &colors[4*icolor];
         }
 
         if(vmode == 2)
         {
             // Plot squares. Use the same point for each of the vertices;
             // a vertex program will figure out the real coordinates.
+            SetColor3ubv(color);
             glNormal3f(radius, radius, radius);
             for(int j = 0; j < 4; ++j)
             {
+                glTexCoord2fv(texCoords[j]);
                 glVertex3dv(points->GetPoint(atom));
-                glTexCoord2fv(texCoords[j]);
             }
         }
         else if(vmode == 1)
         {
             // Plot squares
+            SetColor3ubv(color);
             for(int j = 0; j < 4; ++j)
             {
                 double *pt = points->GetPoint(atom);
@@ -470,13 +490,14 @@
                 vert[0] = pt[0] + ptOffsets[j][0] * radius;
                 vert[1] = pt[1] + ptOffsets[j][1] * radius;
                 vert[2] = pt[2] + ptOffsets[j][2] * radius;
+                glTexCoord2fv(texCoords[j]);
                 glVertex3fv(vert);
-                glTexCoord2fv(texCoords[j]);
             }
         }
-        else
+        else if (vmode == 0)
         {
             // Plot spheres
+            SetColor3ubv(color);
             double *pt = points->GetPoint(atom);
             DrawSphereAsQuads(pt[0],
                               pt[1],
@@ -484,9 +505,21 @@
                               radius,
                               atts.GetAtomSphereQuality());
         }
+
+        else if (vmode == 3)
+        {
+            // Add instance
+            double *pt = points->GetPoint(atom);
+            instancing_renderer->AddParticle(pt, radius, color);
+        }
+
     }
-    glEnd();
 
+    if (!instancing)
+        glEnd();
+    else
+        instancing_renderer->Render();
+
     // If we're imposter rendering then enable lighting once more and turn
     // off sphere texturing.
     if(imposter)
