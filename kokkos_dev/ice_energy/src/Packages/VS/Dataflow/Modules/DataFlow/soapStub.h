/* soapStub.h
   Generated by gSOAP 2.6.2 from OQAFMA/OQAFMAClient.h
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under the gSOAP public license and GPL.
   See README.txt for further details.
*/
#ifndef soapStub_H
#define soapStub_H
#include <deque>
#include <list>
#include <vector>
#include <set>
#include "stdsoap2.h"

SOAP_BEGIN_NAMESPACE(soap)

/* Enumerations */

/* Classes and Structs */

#if 0 /* volatile */

#endif

/* ns1:processStruQLResponse: */
struct ns1__processStruQLResponse
{
	std::string _processStruQLReturn;	/* return */
};

/* ns1:processStruQL: */
struct ns1__processStruQL
{
	std::string _query;
};

/* ns1:getClosureResponse: */
struct ns1__getClosureResponse
{
	std::string _getClosureReturn;	/* return */
};

/* ns1:getClosure: */
struct ns1__getClosure
{
	std::string _root;
	std::string _relationship;
};

/* SOAP Header: */
struct SOAP_ENV__Header
{
	void *dummy;	/* transient */
};

/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
	char *SOAP_ENV__Value;
	char *SOAP_ENV__Node;
	char *SOAP_ENV__Role;
};

/* SOAP-ENV:Detail: */
struct SOAP_ENV__Detail
{
	int __type;	/* any type of element <value> */
	void *value;	/* transient */
	char *__any;
};

/* SOAP Fault: */
struct SOAP_ENV__Fault
{
	char *faultcode;
	char *faultstring;
	char *faultactor;
	struct SOAP_ENV__Detail *detail;
	struct SOAP_ENV__Code *SOAP_ENV__Code;
	char *SOAP_ENV__Reason;
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;
};

/* Types With Custom (De)serializers: */

/* Typedefs */
typedef char *_XML;
typedef char *_QName;

/* Extern */

/* Remote Methods */

SOAP_FMAC5 int SOAP_FMAC6 ns1__processStruQL(struct soap*, std::string, struct ns1__processStruQLResponse &);

SOAP_FMAC5 int SOAP_FMAC6 ns1__getClosure(struct soap*, std::string, std::string, struct ns1__getClosureResponse &);

/* Stubs */

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__processStruQL(struct soap*, const char*, const char*, std::string, struct ns1__processStruQLResponse &);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getClosure(struct soap*, const char*, const char*, std::string, std::string, struct ns1__getClosureResponse &);

/* Skeletons */

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__processStruQL(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__getClosure(struct soap*);

SOAP_END_NAMESPACE(soap)

#endif

/* end of soapStub.h */
