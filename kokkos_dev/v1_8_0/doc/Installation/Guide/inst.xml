<!--
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
-->

<chapter id="ch.inst">
<title>&sr; Installation Instructions</title>

<section>
<title>Introduction</title>
<para>This chapter provides instructions for installing
&sr;.</para>

<para>
&sr; is officially compatible with two platforms: SGI and Linux.
<xref linkend="tbl.min_sys_rec"/> lists the recommened system requirements.
</para>
 
<para>&recommendations;</para>

<para>
<xref linkend="tbl.req_os_bld_tools"/> describes the minimum software
requirements for building &sr;.
</para>

<para>&requirements;</para>

<para>
On Linux systems (Mandrake 9 and Red Hat 8), &sr; binaries may be
<link linkend="sec.rpminst">installed via RPM</link> (Red Hat Package
Manager).  Alternatively, &sr; binaries may be built and <link
linkend="sec.tarball_inst">installed
from source code tarballs</link>.
</para>

<para>
On SGI systems &sr; binaries must be built and <link
linkend="sec.tarball_inst">installed from source code tarballs</link>.
</para>

<para>
Be sure to read section&nbsp;<citetitle pubwork="section"><xref
endterm="title.prepare" linkend="sec.prepare"/></citetitle> after
installing but before starting &sr;.
</para>

</section>

<section id="sec.rpminst">
<title>RPM Installation (Linux only)</title>

<section>
<title>Introduction</title>

<para>
You must have root privilages to install &sr;.  Ask your system
administrator to install &sr; if you don't have root privilages.
</para>

<para>
The following procedure installs &sr; in
<filename>/usr/local/SCIRun/bin.</filename>
</para>

<para>
RPM installation consists of the following steps:
<orderedlist>
<listitem>
<para>Downloading the &sr; RPM distribution and &sr;'s sample data
sets.</para>
</listitem>
<listitem>
<para>Installing &sr; using the <command>rpm</command> command.</para>
</listitem>
<listitem>
<para>Installing &sr;'s sample data sets.</para>
</listitem>
</orderedlist>
</para>

</section>

<section>
<title>Downloading</title>
<para>
Obtain the appropriate &sr; rpm, either
<filename>SCIRun-<replaceable>x.x.x</replaceable>-mdk9.0.i586.rpm</filename>
for Mandrake 9 systems or
<filename>SCIRun-<replaceable>x.x.x</replaceable>-rh8.0.i386.rpm</filename>
for Redhad 8 systems.  Be sure to get
<filename>DataSets.<replaceable>x.x.x</replaceable>.tar.gz</filename>
too.  These files can be downloaded from SCI's <ulink
url="http://software.sci.utah.edu/archive_entry.html">software
archive</ulink> page.
</para>
</section>

<section>
<title>Installing</title>

<para>
Open a shell terminal (e.g. xterm) and enter the command
<command>su</command> to become the root user (superuser).  The
<command>su</command> command will prompt you for root's password.  If
you do not have root access then ask your system administrator to
install the RPM for you.
</para>

<para>
Now <command>cd</command> to the directory where &sr; was downloaded
and type:
<literallayout class="monospaced">
rpm -ivh SCIRun-<replaceable>x.x.x</replaceable>-mdk9.0.i586.rpm
</literallayout>
for Mandrake 9 systems and
<literallayout class="monospaced">
rpm -ivh SCIRun-<replaceable>x.x.x</replaceable>-rh8.0.i386.rpm
</literallayout>
for Red Hat 8 systems.  The RPM should take approximately one minute
to install.
</para>
<para>
Type <command>exit</command> to leave the root account.
</para>
<para>
<xref linkend="fig.rpm_cmd"/> shows this process.
</para>
<para>
You may remove &sr; using the <command>rpm</command> command:
<literallayout class="monospaced">
rpm -e &sr;
</literallayout>
<para>
Be sure to read section&nbsp;<citetitle pubwork="section"><xref
endterm="title.prepare" linkend="sec.prepare"/></citetitle> before
<link linkend="sec.starting">starting</link> &sr;.
</para>

</para>
<figure id="fig.rpm_cmd">
<title>RPM installation process</title>
<mediaobject>
<imageobject>
<imagedata fileref="rpm_cmd.gif" format="GIF"/>
</imageobject>
<caption>
<para>
RPM installation process.  Assumes RPM file was downloaded to
<filename>/tmp</filename>.
</para>
</caption>
</mediaobject>
</figure>

</section>

<section>
<title>Installing &sr;'s Sample Data Sets</title>
<para>
You may want to install the sample data sets in a location accessible
by all &sr; users.  The following procedure assumes you will install
the sample data sets in the directory
<filename>/usr/local/SCIRun</filename>.  It also assumes you can
become the root user.
</para>
<para>
Use the <command>su</command> command to become the root user.  Then
<command>Cd</command> to the directory containing the compressed data
sets tarball and type:
<literallayout class="monospaced">
gunzip -c DataSets.<replaceable>x.x.x</replaceable>.tar.gz | \
  (cd /usr/local/SCIRun &amp;&amp; tar xf -)
</literallayout>
This will create <filename>/usr/local/&sr;/&sr;Data</filename>, the
sample data sets directory.  Type <command>exit</command> to exit the
root account.
</para>
</section>

</section>

<section id="sec.tarball_inst">
<title>Tarball Installation (Linux and SGI)</title>
<section>
<title>Introduction</title>

<para>
<ulink url="http://www.python.org">Python</ulink> (version 1.5.2 or
later) and <ulink url="http://www.gnu.org/directory/make.html">GNU
make</ulink> (version 3.79 or later) must be present before proceeding
with the tarball installation.
</para>

<para>
Installation from tarballs consists of these steps:
<orderedlist>
<listitem>
<para>Downloading (compressed) tarballs containing &sr; sources, packages,
third party software, and sample data sets.</para>
</listitem>
<listitem>
<para>Unpacking the tarballs.</para>
</listitem>
<listitem>
<para>Building and installing third party software.</para>
</listitem>
<listitem>
<para>Building &sr;</para>
</listitem>
</orderedlist>
</para> 

</section>

<section>
<title>Downloading and Unpacking Sources</title>

<orderedlist>

<listitem>

<para>
Obtain the source code for SCIRun and any desired packages.  Be sure
to get the <filename>Thirdparty_install.<replaceable>x.x.x</replaceable>.tar.gz</filename> and
<filename>DataSets.<replaceable>x.x.x</replaceable>.tar.gz</filename> files too.  The compressed
tarballs for these sources can be downloaded from SCI's <ulink
url="http://software.sci.utah.edu/archive_entry.html">software
archive</ulink> page.
</para>

</listitem>

<listitem>
<para>
Unpack the &sr; tarball in a directory of your choice:
<literallayout class="monospaced">
gunzip -c &sr;.<replaceable>x.x.x</replaceable>.tar.gz | tar xf -
</literallayout>
This will create a directory called <filename>&sr;</filename>. Below
we use the term <quote>&sr;</quote> when referring to this
directory (ignoring its full pathname).
</para>
</listitem>

<listitem>
<para>
Unpack the compressed package tarballs into
<filename>&sr;/src/Packages</filename>, for example:
<literallayout class="monospaced">
gunzip -c BioPSE.PKG.<replaceable>x.x.x</replaceable>.tar.gz | (cd &sr;/src/Packages &amp;&amp; tar xf -)
</literallayout>
to unpack the BioPSE package.
</para>
<note>
<title>Note</title>
<para><xref linkend="ap.lsrcvs"/> discusses a method for putting the
downloaded &sr; sources under control of the CVS version control
system.  This is useful if you will be writing modules or other &sr;
code.  This is <emphasis>not</emphasis> a requirement for installing
&sr; though!</para>
</note>
</listitem>

<listitem>
<para>
Unpack the tarball containing sample datasets:
<literallayout class="monospaced">
gunzip -c DataSets.<replaceable>x.x.x</replaceable>.tar.gz | tar xf -
</literallayout>
This will create the directory <filename>SCIRunData</filename>.  You
may want to move this directory to a location accessible to all &sr;
users. 
</para>
</listitem>

<listitem>
<para>
Unpack the third party tarball:
<literallayout class="monospaced">
gunzip -c Thirdparty_install.<replaceable>x.x.x</replaceable>.tar.gz | tar xf -
</literallayout>
This will create the directory
<filename>Thirdparty_install.<replaceable>x.x.x</replaceable></filename>. 
</para>
</listitem>

</orderedlist>

</section>

<section>
<title>Building Third Party Software</title>

<para>Third party software must be built before building &sr;.  Follow
these steps:</para>

<para>

<orderedlist>

<listitem>
<para>
<command>cd</command> to the third party software directory:
<literallayout class="monospaced">
cd Thirdparty_install.<replaceable>x.x.x</replaceable>
</literallayout>
</para>
</listitem>

<listitem>
<para>
Run the third party installation script:
<literallayout class="monospaced">
python install <replaceable>dir</replaceable> <replaceable>32|64</replaceable> <replaceable>jobs</replaceable>
</literallayout>
where <replaceable>dir</replaceable> is the directory in which the
third-party software will be installed (although it is actually
installed in a sub-directory of the specified one),
<replaceable>32|64</replaceable> specifies
one of 32 bit or 64 bit binaries, and <replaceable>jobs</replaceable>
is the number of jobs that make will create when building the
software.  For example:
<literallayout class="monospaced">
python install /usr/local/&sr;_Third_Party 64 2
</literallayout>
or
<literallayout class="monospaced">
python install /usr/local/&sr;_Third_Party 32 1
</literallayout>
When finished, the installation script will display the complete name
of the third-party software installation directory&mdash;make note of
this value.  
</para>
<note>
The name of the third-party installation directory
reflects the parameters given to the install script.  This allows you
to maintain multiple third-party installations for different operating
systems and machine architectures.
</note>
<para>You may reinstall part or all of the third-party software by
repeating the previous command.  You will be asked to replace all or
part of the installation. Just answer <userinput>y</userinput> or
<userinput>n</userinput> to the script until you have selected the
exact reinstallation you wish.</para>

</listitem>

</orderedlist>

</para>

</section>

<section>
<title>Building &sr;</title>

<orderedlist>

<listitem>

<para>
Run &sr;'s configure script.  This can be done from the
<filename>&sr;/src</filename> directory:
<literallayout class="monospaced">
cd &sr;/src
./configure --with-thirdparty=<replaceable>third-party-dir</replaceable> \
--enable-package="<replaceable>package-name1 package-name2 &hellip;</replaceable>"
</literallayout>
or from another directory, for example a sub-directory of &sr;:
<literallayout class="monospaced">
mkdir &sr;/<replaceable>dir</replaceable>
cd &sr;/<replaceable>dir</replaceable>
../src/configure --with-thirdparty=<replaceable>third-party-dir</replaceable> \ 
--enable-package="<replaceable>package-name1 package-name2 &hellip;</replaceable>"
</literallayout>
in which case &sr; will be built in the directory
<filename>&sr;/<replaceable>dir</replaceable></filename> (where
<replaceable>dir</replaceable> is a directory name).
Above,
<replaceable>third-party-dir</replaceable> is replaced by the name of
the third party software installation directory and
"<replaceable>package-name1 package-name2 &hellip;</replaceable>" is
replaced by a list of (previously downloaded and unpacked) package
names , e.g. "BioPSE MatlabInterface".  For example:
<literallayout class="monospaced">
../src/configure --with-thirdparty=/usr/local/&sr;_Third_Party/1.4.2/Irix/CC-32bit \
                 --enable-package="BioPSE"
</literallayout>
</para>

<para>
It is useful to run the configure script from directories other than
<filename>&sr;/src</filename> so that you can build multiple
versions of &sr; from a single source directory.  For example, you may
wish to build a Linux version and 32 bit and 64 bit Irix versions.
Assuming <filename>&sr;</filename> resides on a volume shared by
all machines you may do this:
<literallayout class="monospaced">
mkdir &sr;/linux
mkdir &sr;/sgi32
mkdir &sr;/sgi64
</literallayout>
Then, after logging onto the Linux machine:
<literallayout class="monospaced">
cd &sr;/linux
../src/configure <replaceable>options</replaceable>
</literallayout>
Then from the Irix machine(s):
<literallayout class="monospaced">
cd &sr;/sgi32
../src/configure <replaceable>options</replaceable>
cd &sr;/sgi64
../src/configure --enable-64bit <replaceable>options</replaceable>
</literallayout>
</para>

<para>
There are many options to the configure command in addition to the
<option>--with-thirdparty</option> and
<option>--enable-package</option> options you have already seen.
<xref linkend="appendix"/> lists many of them.
</para>

</listitem>

<listitem>
<para>
Run (GNU) make from the directory used previously when running
configure (e.g. &sr;/linux, &sr;/sgi32, or &sr;/sgi64). Note
that the <quote>configure</quote> directory will be called
<replaceable>build_dir</replaceable> from now on.
<literallayout class="monospaced">
cd <replaceable>build_dir</replaceable>
make
</literallayout>
Be sure that <command>make</command> invokes GNU make.  GNU make may
be named <command>gmake</command> or <command>gnumake</command> on
your system.
</para>

<para>
For a multiprocessor system you can use GNU make's <option>-j</option>
option to reduce the build time:
<literallayout class="monospaced">
make -j <replaceable>N</replaceable>
</literallayout>
where <replaceable>N</replaceable> is the number of processors
available for use by make.  Using this option on a multiprocessor
machine will often significantly reduce the time to build &sr;.
</para>
<para>
Be sure to read section&nbsp;<citetitle pubwork="section"><xref
endterm="title.prepare" linkend="sec.prepare"/></citetitle> before
<link linkend="sec.starting">starting</link> &sr;.
</para>
</listitem>
</orderedlist>

<para>
After a successful build, <replaceable>build_dir</replaceable>
will contain the <filename>scirun</filename> executable.
</para>

</section>

</section>

<section id="sec.prepare">
<title id="title.prepare">Preparing &sr;</title>

<para>
Before starting &sr; you should initialize the environment variables
<envar>SCIRUN_ON_THE_FLY_LIBS_DIR</envar> and
<envar>SCIRUN_DATA</envar>.  The following sections describe the
purpose of the variables and how to initalize them.
</para>

<section id="sec.dyncomp">
<title id="title.dyncomp">Dynamic
Compilation (and <envar>SCIRUN_ON_THE_FLY_LIBS_DIR</envar>)</title>

<para>Before starting &sr; you
should be aware of a feature called <firstterm>Dynamic
Compilation</firstterm>.</para> 

<para>Dynamic compilition is a technique used by &sr; that discovers
and generates code for the data types and algorithms used by modules
in your networks.  This is done at runtime and is done once for each
new data type and algorithm encountered.  This technique provides a
number of benefits (not discussed here).</para>

<para>By default, code generated by dynamic compilation is stored in
the directory
<filename><replaceable>build_dir</replaceable>/on-the-fly-libs</filename>
for tarball installations and
<filename>/usr/local/SCIRun/bin/on-the-fly-libs</filename> for rpm
installations.  The location of dynamically generated code can be
changed by setting the value of the environment variable
<envar>SCIRUN_ON_THE_FLY_LIBS_DIR</envar> to the desired directory,
for example, in a shell terminal type:
<literallayout class="monospaced">
mkdir ~/&sr;_otf
</literallayout>
and then
<literallayout class="monospaced">
SCIRUN_ON_THE_FLY_LIBS_DIR=~/&sr;_otf
export SCIRUN_ON_THE_FLY_LIBS_DIR
</literallayout>
for Bourne-like shells (ksh, bash, etc.) or
<literallayout class="monospaced">
setenv SCIRUN_ON_THE_FLY_LIBS_DIR ~/&sr;_otf
</literallayout>
for csh-like shells. Changing the location of the
<quote>on-the-fly</quote> library directory provides a number of
benefits <link linkend="para.otfl_benefits">described later</link>.
</para>

<para>
The location of the <quote>on-the-fly</quote> directory can also be
changed by setting the value of
<envar>SCIRUN_ON_THE_FLY_LIBS_DIR</envar> in your
<filename>.scirunrc</filename> file which is read by &sr; at startup. Your
<filename>.scirunrc</filename> file would contain, for example:
<literallayout class="monospaced">
SCIRUN_ON_THE_FLY_LIBS_DIR=$(HOME)/&sr;_otf
</literallayout>
See the <ulink
url="../../User/Guide/usersguide/srug3.html#SECTION00045000000000000000">&sr;
Users Guide</ulink> for more information on the use of
<filename>.scirunrc</filename>.
</para>

<note>
<para>It is recommended that each &sr; user create an
<quote>on-the-fly</quote> library directory in their home directory
and set the value of <envar>SCIRUN_ON_THE_FLY_LIBS_DIR</envar> to
point to this directory.
</para>
</note>

<para id="para.otfl_benefits">Customizing the value of this variable
for each &sr; user has the following benefits:
<itemizedlist>
<listitem>
<para>It allows multiple users to run the same instance of &sr; (at
the same time) without worrying about dynamic compilation conflicts.
For example, by specifying an <filename>on-the-fly-libs</filename>
directory in their home directory, a user can run the same shared
&sr; installed in <filename>/usr/local</filename> that another user
is already running.</para>
</listitem>
<listitem>
<para>It allows a <filename>/usr/local</filename> installation of &sr;
to be secure by not requiring that
<filename>/usr/local/&hellip;/on-the-fly-libs</filename> be writable by
all (which is considered a potential security risk).</para>
</listitem>
<listitem>
<para>It allows greater debugging and multiple build support by
allowing the user to change dynamically compiled code locations
between instances of &sr;.</para>
</listitem>
</itemizedlist>
</para>
</section>

<section>
<title>Accessing Data Sets (and <envar>SCIRUN_DATA</envar>)</title>

<para>
<envar>SCIRUN_DATA</envar> specifies the default data directory of
&sr; data sets. If you will be working through &sr;'s <ulink
url="../../User/Tutorial/index.html">tutorial</ulink> then you will
want to set the value of <envar>SCIRUN_DATA</envar> to point to the
sample data sets directory, <filename>SCIRunData</filename>:
<literallayout class="monospaced">
export SCIRUN_DATA=<replaceable>/path/to/</replaceable>SCIRunData
</literallayout>
or
<literallayout class="monospaced">
setenv SCIRUN_DATA <replaceable>/path/to/</replaceable>SCIRunData
</literallayout>
</para>
</section>

</section>


<section id="sec.starting">
<title>Starting &sr;</title>

<para>
If you installed &sr; from it's rpm you can test it's installation by
typing <command>/usr/local/SCIRun/bin/scirun</command> (you may want
to add <filename>/usr/local/SCIRun/bin</filename> to your
<envar>PATH</envar> variable).
</para>

<para>
If you built &sr; from it's source code tarballs then you can test
it's installation by <command>cd</command>ing to it's build directory
and typing <command>./scirun</command>.
</para>

<para>
After starting &sr; you should see &sr;'s network editor window and
the &sr; shell prompt.
</para>

<para>If the window does not appear note any errors displayed in the
&sr; console and see <xref endterm="title.help"
linkend="sec.help"/>.</para>

<para>Now see &sr;'s <ulink
url="../../User/Tutorial/index.html"><citetitle>&sr;
Tutorial</citetitle></ulink> for an introduction to the use of
&sr;.  The tutorial uses the sample data sets previously downloaded.</para>

<para>See the <ulink
url="../../User/Guide/usersguide/index.html"><citetitle>&sr; Users
Guide</citetitle></ulink> for particulars on the use of &sr;.</para>
</section>

<section id="sec.help">
<title id="title.help">Getting Help</title>

<para>
Subscribe to the &sr; users list.  Use it to get answers to your
installation and use questions.  To subscribe send email to:
<email>majordomo@sci.utah.edu</email> with the following in the body
of the message (no subject):
<literallayout class="monospaced">
subscribe scirun-users
</literallayout>
</para>

<para> To ask a question send email to:
<email>scirun-users@sci.utah.edu</email></para>

<para>
Be sure to include a verbatim (cut and paste) copy of any errors
displayed.  Also include a short description of what you we're doing
(running a network, building the tree, etc.) and which version of &sr;
you have.
</para>

<para>See also the <ulink
url="../../FAQBook/index.html">FAQs</ulink></para>

</section>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-default-dtd-file:"../../Utilities/XML/docbook.ced"
sgml-omittag:nil
sgml-shorttag:nil
End:
-->
