<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "../../../../../doc/Utilities/XML/component.dtd">
<?xml-stylesheet href="../../../../../doc/package-component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<component name="ShowLeads" category="Visualization">
  <overview>
    <authors>
      <author>Martin Cole</author>
    </authors>
    <summary>The ShowLeads module graphs a Matrix that has rows of potentials.</summary>
    <description>
      <p>The input matrix must be a DenseMatrix, which has unlimited rows. Each
row can have an unlimited number of time instances. The scalar value
at each (row,column) is a potential measurement, and the graph is a
series of graphs. For each row in the matrix ShowLeads displays a line
graph of the potentials over regular time intervals, and time progresses
along the x-axis.</p>
      <p>Time units are displayed along the x-axis, where they are
taken as a string from the properties in the Matrix. </p>
      <p>The ShowLeads module properties are: time-units, time-start,
and time-end time-units; a string that displays along the
x-axis. The start and end time determine the values for time.</p>
      <p>The sliders at the top of the dialog zoom the display, showing 
desired leads only. Changing the Vertical Scale simply
applies a multiplier to the scalar values before display.</p>
      <p>Dragging the yellow vertical bars in the graph window updates
the value at each lead on the left side of the graph, allowing for
closer data inspection.</p>
      <p>Data is arranged as follows: Each row in the matrix is a
lead; each column is a time instance.  Thus, time (row, column) is a potential (scalar) at each lead.</p>
    </description>
  </overview>
  <implementation>
  </implementation>
  <io>
    <inputs lastportdynamic="no">
      <!-- one of (device port file) -->
      <port>
	<name>Potentials</name>
	<description>
	  <p></p>
	</description>
	<datatype>SCIRun::Matrix</datatype>
	<componentname></componentname>
      </port>
    </inputs>
    <outputs>
    </outputs>
  </io>
  <gui>
    <parameter>
      <widget>Label</widget>
      <label>Autogenerated GUI explanation</label>
    </parameter>
  </gui>
  <testing>
  </testing>
</component>

