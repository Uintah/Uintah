/*
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
*/



AVLTree is a parameterized type (template class) that implements a
Key/Data interface to an AVL tree (a dynamically balancing binary
tree).  The type used for Key must have the <, > and == operators
implemented.

The AVL tree is accessed through the following methods:

// Inserts the key/data pair into the tree
void insert(const Key& key, const Data& data);

// Looks up key in the tee.  Returns 0 if not found.
// Returns 1, and places the data item in data if it is found.
// If more than one of "key" exist, it is undefined which it
// will return.
int lookup(const Key& key, Data& data);

// Removes all items with key "key" from the tree
void remove(const Key& key);

// Removes all items with key "key" and data "data" from the tree.
void remove(const Key& key, const Data& data);

// Remove the item pointer to by the iterator
void remove(const AVLTreeIter<Key, Data>&);

// Empties the tree
void remove_all();

// Returns how many items are stored in the tree
int size() const;

// For the current implementation, items are not actually deleted,
// but are marked for deletion.  When there are too many deleted
// nodes, the tree will be cleaned up, and the marked nodes actually
// deleted.  This function will force a clean up of the tree.
void cleanup()

// Return the data item from the first member of the tree, and delete
// it.  This is used for implementing a priority queue.
Data pop();

In addition, the tree may be walked through using the
AVLTreeIter class.  The items will be accessed in ascending order.  If
two items have the same key, then they may appear in random order.
Removing and adding items while iterating through the tree may produce
unpredictable results.

// Build a AVL tree iterator for a specific AVL tree
AVLTreeIter(AVLTree<Key, Data>*);

// Reset the iterator to the first item
void first();

// Does the iterator point to a valid item?
int ok();

// Advance to the next item
void operator++();

// Get the key from the current item
Key& get_key();

// Get the data from the current item
Data& get_data();
