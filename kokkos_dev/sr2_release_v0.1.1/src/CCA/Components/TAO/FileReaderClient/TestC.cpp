// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:338


#include "TestC.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/Typecode.h"
#include "tao/Any_Impl_T.h"
#include "tao/Any_Dual_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "TestC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:62

// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:265

#if !defined (_TEST_FILEREADER_DOUBLE_ARRAY__ARG_TRAITS_CS_)
#define _TEST_FILEREADER_DOUBLE_ARRAY__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class  Arg_Traits<Test::FileReader::double_array>
    : public
        Var_Size_Arg_Traits_T<
            Test::FileReader::double_array,
            Test::FileReader::double_array_var,
            Test::FileReader::double_array_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:265

#if !defined (_TEST_FILEREADER_LONG_ARRAY__ARG_TRAITS_CS_)
#define _TEST_FILEREADER_LONG_ARRAY__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class  Arg_Traits<Test::FileReader::long_array>
    : public
        Var_Size_Arg_Traits_T<
            Test::FileReader::long_array,
            Test::FileReader::long_array_var,
            Test::FileReader::long_array_out
          >
  {
  };

#endif /* end #if !defined */
}


// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for Test::FileReader.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
Test::FileReader_ptr
TAO::Objref_Traits<Test::FileReader>::tao_duplicate (
    Test::FileReader_ptr p
  )
{
  return Test::FileReader::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<Test::FileReader>::tao_release (
    Test::FileReader_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
Test::FileReader_ptr
TAO::Objref_Traits<Test::FileReader>::tao_nil (void)
{
  return Test::FileReader::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<Test::FileReader>::tao_marshal (
    Test::FileReader_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*Test__TAO_FileReader_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_TEST_FILEREADER_DOUBLE_ARRAY_CS_)
#define _TEST_FILEREADER_DOUBLE_ARRAY_CS_

Test::FileReader::double_array::double_array (void)
{}

Test::FileReader::double_array::double_array (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::Double
      >
    (max)
{}

Test::FileReader::double_array::double_array (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Double * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::Double
      >
    (max, length, buffer, release)
{}

Test::FileReader::double_array::double_array (
    const double_array &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::Double
      >
    (seq)
{}

Test::FileReader::double_array::~double_array (void)
{}

void Test::FileReader::double_array::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  double_array * _tao_tmp_pointer =
    ACE_static_cast (double_array *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Test_FileReader_double_array[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x54657374), 
  ACE_NTOHL (0x2f46696c), 
  ACE_NTOHL (0x65526561), 
  ACE_NTOHL (0x6465722f), 
  ACE_NTOHL (0x646f7562), 
  ACE_NTOHL (0x6c655f61), 
  ACE_NTOHL (0x72726179), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:Test/FileReader/double_array:1.0
    13,
  ACE_NTOHL (0x646f7562), 
  ACE_NTOHL (0x6c655f61), 
  ACE_NTOHL (0x72726179), 
  ACE_NTOHL (0x0),  // name = double_array
    CORBA::tk_sequence, // typecode kind
  12, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_double,

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_Test_FileReader_double_array (
    CORBA::tk_alias,
    sizeof (_oc_Test_FileReader_double_array),
    (char *) &_oc_Test_FileReader_double_array,
    0,
    sizeof (Test::FileReader::double_array)
  );

::CORBA::TypeCode_ptr Test::FileReader::_tc_double_array =
  &_tc_TAO_tc_Test_FileReader_double_array;

// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_TEST_FILEREADER_LONG_ARRAY_CS_)
#define _TEST_FILEREADER_LONG_ARRAY_CS_

Test::FileReader::long_array::long_array (void)
{}

Test::FileReader::long_array::long_array (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::Long
      >
    (max)
{}

Test::FileReader::long_array::long_array (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Long * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::Long
      >
    (max, length, buffer, release)
{}

Test::FileReader::long_array::long_array (
    const long_array &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::Long
      >
    (seq)
{}

Test::FileReader::long_array::~long_array (void)
{}

void Test::FileReader::long_array::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  long_array * _tao_tmp_pointer =
    ACE_static_cast (long_array *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Test_FileReader_long_array[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x54657374), 
  ACE_NTOHL (0x2f46696c), 
  ACE_NTOHL (0x65526561), 
  ACE_NTOHL (0x6465722f), 
  ACE_NTOHL (0x6c6f6e67), 
  ACE_NTOHL (0x5f617272), 
  ACE_NTOHL (0x61793a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:Test/FileReader/long_array:1.0
    11,
  ACE_NTOHL (0x6c6f6e67), 
  ACE_NTOHL (0x5f617272), 
  ACE_NTOHL (0x61790000),  // name = long_array
    CORBA::tk_sequence, // typecode kind
  12, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_long,

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_Test_FileReader_long_array (
    CORBA::tk_alias,
    sizeof (_oc_Test_FileReader_long_array),
    (char *) &_oc_Test_FileReader_long_array,
    0,
    sizeof (Test::FileReader::long_array)
  );

::CORBA::TypeCode_ptr Test::FileReader::_tc_long_array =
  &_tc_TAO_tc_Test_FileReader_long_array;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

CORBA::Long Test::FileReader::getPDEdescription (
    Test::FileReader::double_array_out nodes,
    Test::FileReader::long_array_out boundaries,
    Test::FileReader::long_array_out dirichletNodes,
    Test::FileReader::double_array_out dirichletValues
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_FileReader_Proxy_Broker_ == 0)
    {
      Test_FileReader_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits<Test::FileReader::double_array>::out_arg_val _tao_nodes (nodes);
  TAO::Arg_Traits<Test::FileReader::long_array>::out_arg_val _tao_boundaries (boundaries);
  TAO::Arg_Traits<Test::FileReader::long_array>::out_arg_val _tao_dirichletNodes (dirichletNodes);
  TAO::Arg_Traits<Test::FileReader::double_array>::out_arg_val _tao_dirichletValues (dirichletValues);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_nodes,
      &_tao_boundaries,
      &_tao_dirichletNodes,
      &_tao_dirichletValues
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      5,
      "getPDEdescription",
      17,
      this->the_TAO_FileReader_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

Test::FileReader::FileReader (int collocated)
 : the_TAO_FileReader_Proxy_Broker_ (0)
{
  this->Test_FileReader_setup_collocation (collocated);
}

void
Test::FileReader::Test_FileReader_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_FileReader_Proxy_Broker_ =
        ::Test__TAO_FileReader_Proxy_Broker_Factory_function_pointer (this);
    }
}

Test::FileReader::~FileReader (void)
{}

void 
Test::FileReader::_tao_any_destructor (void *_tao_void_pointer)
{
  FileReader *_tao_tmp_pointer =
    ACE_static_cast (FileReader *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

Test::FileReader_ptr
Test::FileReader::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<FileReader>::narrow (
        _tao_objref,
        "IDL:Test/FileReader:1.0",
        Test__TAO_FileReader_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

Test::FileReader_ptr
Test::FileReader::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<FileReader>::unchecked_narrow (
        _tao_objref,
        "IDL:Test/FileReader:1.0",
        Test__TAO_FileReader_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

Test::FileReader_ptr
Test::FileReader::_duplicate (FileReader_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
Test::FileReader::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:Test/FileReader:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* Test::FileReader::_interface_repository_id (void) const
{
  return "IDL:Test/FileReader:1.0";
}

CORBA::Boolean
Test::FileReader::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Test_FileReader[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  24,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x54657374), 
  ACE_NTOHL (0x2f46696c), 
  ACE_NTOHL (0x65526561), 
  ACE_NTOHL (0x6465723a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:Test/FileReader:1.0
    11,
  ACE_NTOHL (0x46696c65), 
  ACE_NTOHL (0x52656164), 
  ACE_NTOHL (0x65720000),  // name = FileReader
  };

static CORBA::TypeCode _tc_TAO_tc_Test_FileReader (
    CORBA::tk_objref,
    sizeof (_oc_Test_FileReader),
    (char *) &_oc_Test_FileReader,
    0,
    sizeof (Test::FileReader)
  );

namespace Test
{
  ::CORBA::TypeCode_ptr _tc_FileReader =
    &_tc_TAO_tc_Test_FileReader;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<Test::FileReader>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    Test::FileReader_ptr _tao_elem
  )
{
  Test::FileReader_ptr _tao_objptr =
    Test::FileReader::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    Test::FileReader_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<Test::FileReader>::insert (
      _tao_any,
      Test::FileReader::_tao_any_destructor,
      Test::_tc_FileReader,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Test::FileReader_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<Test::FileReader>::extract (
        _tao_any,
        Test::FileReader::_tao_any_destructor,
        Test::_tc_FileReader,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be/be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Test::FileReader::double_array &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::FileReader::double_array>::insert_copy (
      _tao_any,
      Test::FileReader::double_array::_tao_any_destructor,
      Test::FileReader::_tc_double_array,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Test::FileReader::double_array *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::FileReader::double_array>::insert (
      _tao_any,
      Test::FileReader::double_array::_tao_any_destructor,
      Test::FileReader::_tc_double_array,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    Test::FileReader::double_array *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const Test::FileReader::double_array *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Test::FileReader::double_array *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Test::FileReader::double_array>::extract (
        _tao_any,
        Test::FileReader::double_array::_tao_any_destructor,
        Test::FileReader::_tc_double_array,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be/be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Test::FileReader::long_array &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::FileReader::long_array>::insert_copy (
      _tao_any,
      Test::FileReader::long_array::_tao_any_destructor,
      Test::FileReader::_tc_long_array,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Test::FileReader::long_array *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::FileReader::long_array>::insert (
      _tao_any,
      Test::FileReader::long_array::_tao_any_destructor,
      Test::FileReader::_tc_long_array,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    Test::FileReader::long_array *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const Test::FileReader::long_array *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Test::FileReader::long_array *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Test::FileReader::long_array>::extract (
        _tao_any,
        Test::FileReader::long_array::_tao_any_destructor,
        Test::FileReader::_tc_long_array,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_Test_FileReader_double_array_CPP_
#define _TAO_CDR_OP_Test_FileReader_double_array_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::FileReader::double_array &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      return strm.write_double_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::FileReader::double_array &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      return strm.read_double_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_Test_FileReader_double_array_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_Test_FileReader_long_array_CPP_
#define _TAO_CDR_OP_Test_FileReader_long_array_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::FileReader::long_array &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      return strm.write_long_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::FileReader::long_array &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      return strm.read_long_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_Test_FileReader_long_array_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::FileReader_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::FileReader_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::Test::FileReader RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        Test__TAO_FileReader_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

