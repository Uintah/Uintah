#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Ray Marching Algorithm 
\end_layout

\begin_layout Subsection*
Cubic Cells
\end_layout

\begin_layout Standard
This section demonstrates the procedure of the ray marching algorithm in
 determining the piecewise path taken by a ray as it moves through the computati
onal domain.
 For simplicity, this description will be carried out in two dimensions,
 although the same principles are applied in the three dimensional cases.
 
\end_layout

\begin_layout Standard
Let us begin with a small computational domain with two rows of cells, and
 six columns of cells, indexed as (i,j), where i represents the row number
 starting from the bottom of the domain, and j represents the column number
 starting from the left of the domain.
 Let the vertical lines represent x planes, and the horizontal lines represent
 y planes.
 We wish to trace a ray within cell (1,1) from the ray origin indicated
 by the blue circle in the below figure.
 Assume that a ray direction has already been determined, and will be represente
d by the long dashed line below.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted2.pdf
	scale 150

\end_inset


\end_layout

\begin_layout Standard
We must first determine the length of the ray segment from the origin to
 the first cell wall that is breached by the ray.
 But at this time, we do not know if it will be an x plane or a y plane
 that will first be breached by the ray.
 To determine which plane will be breached (and subsequently determine the
 next cell that the ray will enter) we compare the distance from the origin
 to the first x plane, TmaxX (green), to the distance from the origin to
 the first y plane, TmaxY (red) in the direction of the ray.
 In two dimensions, this is accomplished by a simple 
\begin_inset Quotes eld
\end_inset

if/else
\begin_inset Quotes erd
\end_inset

 statement (additional comparisons are necessary in three dimensions).
 
\end_layout

\begin_layout Standard
Once the shortest of the two distances is determined, the current cell is
 updated by use of the step variable.
 In this case, the shortest direction is TmaxX, so we step in the x direction.
 The distance traveled (in this case the green line above) is stored as
 disMin, and will be used later in an algorithm that determines ray attenuation.
 Because the x component of the direction vector is positive, the cell index
 is incremented by 1 in the x direction, and the current cell becomes (1,2).
 The ray has progressed, and the scenario is now represented by the following
 figure.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted3.pdf
	scale 150

\end_inset


\end_layout

\begin_layout Standard
Note that the first segment of the dashed ray has now become solid.
 The distance from the origin to the first y plane has not changed, so the
 red line representing TmaxY, remains unchanged.
 However, the distance from the current location to the next x plane has
 changed, and its length has been increased by the distance TDeltaX.
 TDeltaX represents the distance required to traverse one cell length in
 the x direction.
 With our updated value for TmaxX, we again compare the green line to the
 red line.
 Because TmaxX is still shorter than TmaxY, we again step in the x direction,
 incrementing i.
 The current cell then becomes (1,3), and after storing the TDeltaX as disMin
 for later use, we advance to the following figure.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted4.pdf
	scale 150

\end_inset


\end_layout

\begin_layout Standard
Now, the second segment of the dashed ray has become solid, and we have
 a new value for TmaxX, which was increased by TDeltaX.
 Note that for a given ray in a uniform mesh, TDeltaX and TDeltaY do not
 change, as the distance required to traverse a cell in the x or y direction
 is independent of the current cell.
 We again compare TDeltaX to TDeltaY.
 The green line is still shorter than the red, so we again step in the positive
 x direction, store TDeltaX as disMin, and reach cell (1,4) as shown below.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted5.pdf
	scale 150

\end_inset


\end_layout

\begin_layout Standard
The third segment of the ray has now become solid.
 We increase the value of TmaxX by TDeltaX, and for the first time in this
 example, reach the scenario where TmaxX exceeds the length of TmaxY.
 We therefore step in the y direction and store TDeltaY as disMin.
 Because the y component of the direction vector is positive, we increment
 j and enter into cell (2,4) as shown below.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted6.pdf
	scale 150

\end_inset


\end_layout

\begin_layout Standard
The fourth segment of the ray is shown as solid, and TmaxY has been increased
 by the distance TDeltaY.
 It is visually apparent that TmaxX is much shorter than TmaxY, and therefore
 the comparison in the algorithm would lead to a subsequent step in the
 x direction into cell (2,5) as shown below.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted7.pdf
	scale 150

\end_inset


\end_layout

\begin_layout Standard
The fifth segment has become solid, and TmaxX has been increased by TDeltaX.
 At this time, the reader should be familiar enough with the algorithm to
 predict that the next two steps will be in the positive x direction, at
 which point the ray would either terminate if the wall is black, or reflect
 based on the reflection algorithm which will be discussed in later sections.
 Also in later sections, the reader will find a discussion of the attenuation
 of radiation from each of the cells along the ray path back to the origin,
 and the importance of disMin will become apparent.
 
\end_layout

\begin_layout Subsection*
Non-cubic Cells
\end_layout

\begin_layout Standard
For domains which contain cells that have non-unity aspect ratios, additional
 considerations become necessary in the ray marching algorithm.
 Throughout the above described algorithm, distances are handled in units
 of cell width, which can then be converted to physical units simply by
 multiplying by the cell size of Dx.
 However, when Dx is not equal to Dy or Dz, this conversion becomes non-trivial,
 and requires additional computations.
 By normalizing the lengths of Dy and Dz by Dx, we are able to minimize
 the number of additional computations, such that only 6 lines of code require
 modification.
 Explanation of this procedure is as follows.
\end_layout

\begin_layout Standard
Take the distance Dx to be of unit length.
 Then Dy and Dz have normalized lengths of 
\begin_inset Formula $\frac{Dy}{Dx}$
\end_inset

 and 
\begin_inset Formula $\frac{Dz}{Dx}$
\end_inset

, respectively.
 The first section of the algorithm that requires modification is then the
 determination of ray origins.
 Previously, for cubic cells, we assumed that the origin is located at 
\begin_inset Formula $(i+rand(),\ j+rand(),\ k+rand())$
\end_inset

 where 
\begin_inset Formula $rand()$
\end_inset

 represents a function call to the random number generator which returns
 a random number distributed between 0 and 1.
 For non-cubic cells, we must scale the random numbers for the y and z direction
s by 
\begin_inset Formula $\frac{Dy}{Dx}$
\end_inset

 and 
\begin_inset Formula $\frac{Dz}{Dx}$
\end_inset

, such that the origin of a ray becomes 
\begin_inset Formula $(i+rand(),\ j+\frac{Dy}{Dx}rand(),\ k+\frac{Dz}{Dx},rand())$
\end_inset

.
 In this manner, we ensure that the origins are randomly distributed throughout
 the cell, and not simply throughout a cube.
\end_layout

\begin_layout Standard
The second portion of the algorithm in need of modification is the determination
 of the original TMax values.
 Recall that the initial TMax values represent the distance from the origin
 to each of the respective x,y, and z planes.
 For example, recall that for cubic cells, TMaxY is calculated as follows
\begin_inset Formula 
\begin{equation}
TMaxY=(j+sign[1]-rayLocation[1])*invDirVector[1]\label{eq:tmaxy}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $sign[1]$
\end_inset

 is a boolean with a value of 1 if the y component of the direction vector
 is positive, and zero otherwise.
 
\begin_inset Formula $invDirVector[1]$
\end_inset

 represents one divided by the y component of the direction vector.
 For instance, in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cubic tmax"

\end_inset

, the origin is located at 17.343, 8.617.
 The direction vector has components of 0.7071, and 0.7071, such that the
 sum of their squares is equal to 1.
 Because the sign of the y component of the direction vector is positive,
 we add one to 17 to represent the location of a y breach, and subtract
 that value from the y value of the origin, then multiply by the inverse
 of the y direction vector.
 Implementing equation (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:tmaxy"

\end_inset

) we find TMaxY as follows
\begin_inset Formula 
\[
TmaxY=(8+1-8.617)*\text{\ensuremath{\frac{1}{.7071}=0.5416}}
\]

\end_inset

 This value is smaller than that of TmaxX which is calculated as follows
\begin_inset Formula 
\[
TmaxX=(17+1-17.343)*\frac{1}{.7071}=0.9291
\]

\end_inset

 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename cell origin.pdf
	lyxscale 50
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cubic tmax"

\end_inset

 First step in a cubic cell
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

For non-cubic cells, however, when a given component of the direction vector
 is positive, we need to subtract the origin value not from 1 + j, but from
 
\begin_inset Formula $1*\frac{Dy}{Dx}$
\end_inset

 +j.
 When the component of the direction vectore is negative, this multiplication
 of 
\begin_inset Formula $\text{}$
\end_inset


\begin_inset Formula $\frac{Dy}{Dx}$
\end_inset

 becomes unnecessary.
 This is because the negative face value (8 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cubic tmax"

\end_inset

) is independent of the skewness ratio.
 To elegantly handle the condition of multiplying by the ratio 
\begin_inset Formula $\frac{Dy}{Dx}$
\end_inset

 the following formulation is used for the more general case of non-cubic
 cells.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
TMaxY=(j+sign[1]*\frac{Dy}{Dx}-rayLocation[1])*invDirVector[1]
\]

\end_inset


\end_layout

\begin_layout Standard
To illustrate, see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cubic tmax-1"

\end_inset

 where a cell with 
\begin_inset Formula $\frac{Dy}{Dx}=2$
\end_inset

 is superimposed onto the same setup as illistrated in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cubic tmax"

\end_inset

.
 Here, TMaxX is still equal to 0.9291, but TMaxY is solved as follows
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
TMaxY=(8+sign[1]*\frac{2}{1}-8.617)*\frac{1}{.7071}=1.959.
\]

\end_inset


\end_layout

\begin_layout Standard
Therefore, the ray will not breach the y face during the first step, but
 will instead breach the x face and enter into the cell to the right.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename cell origin2.pdf
	lyxscale 50
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cubic tmax-1"

\end_inset

First step in a non-cubic cell with 
\begin_inset Formula $\frac{Dy}{Dx}=2$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

TDeltaY and TDeltaZ are solved in a similar manner, such that for non-cubic
 cells, the following formula holds.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
TDeltaY=invDirVector[1]*\frac{Dy}{Dx}.
\]

\end_inset


\end_layout

\end_body
\end_document
