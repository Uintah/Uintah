<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "component.dtd">
<?xml-stylesheet href="component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
-->


<component name="ClipByFunction" category="FieldsCreate">
  <overview>
    <authors>
      <author>Michael Callahan</author>
    </authors>
    <summary>Select a subset of a field.</summary>
    <description>
      <p>
        This module clips out a subset of a field.  The new field
        contains just the selected portion of the input field.
      </p>
      <p>
        The type of the field is preserved in the clip, as well as the
        data values if possible.  Some field types are structured and
        thus not clippable.  This includes the LatVolField, ImageField,
        and Scanline field types.  There is an Unstructure module that
        can be used to convert these fields to appropriately
        unstructured versions before clipping.
      </p>
      <p>
        The function should be a valid C++ expression.  It will be
	dynamically compiled into a function of the form "bool
        inside_p(double x, double y, double z, TYPE v) { return EXPR; }"
        where TYPE is the data type contained in the field, and EXPR is the
        function typed into the GUI.
      </p>
      <p>
        The data location of the test can be specified in addition to
        the function.  The test can be valid if it works at cell
        centers, at one node, or at all of the nodes in a mesh
        element.  If the data location of the clip is different that
        the location of the data in the field, 'v' will always be 0
        for that test.
      </p>
      <p>
        For example, "x gt 0" would clip the field to only those
	elements with positions greater than 0.  "y lt 3 || z gt 2.5" would
	preserve just the elements with y position less than 3 or z
	position greater than 2.5.  "v == 4" would preserve all of the
	elements that contained a data value of 4.  *Note that current
	simple HTML parser cannot handle greater than or less than
        symbols, abbreviated them to 'gt' and 'lt'.
      </p>
    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
	<name>Input Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
	<name>Output Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
      <port>
	<name>Interpolant</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
    </outputs>
  </io>
  <testing>
  </testing>
</component>
