<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "component.dtd">
<?xml-stylesheet href="component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
-->


<component name="IsoClip" category="FieldsCreate">
  <overview>
    <authors>
      <author>Michael Callahan</author>
    </authors>
    <summary>Clip a scalar field to a specified isovalue.</summary>
    <description>

    <p>The IsoClip module is used to clip a TetVol or TriSurf field
    along a particular isovalue.  The isovalue is specified by the
    entry in the GUI.  The new field can contain either the values
    less than or greater than the isovalue, as selected by the user. </p>

    <p> In order to compute where the cuts
    are to be made, the input field must contain scalar values at the
    nodes.  If the input field contains element centered data then either
    just use ClipByFunction to determine which elements to keep or
    interpolate the elements onto a node-centered field. </p>

    <p> Only TetVol and TriSurf fields are supported by this general
    clipping.  Other fields should be converted into these types if
    they are to be clipped.  See HexToTet, QuadToTri, and Unstructure
    for an idea of how to do this conversion. </p>

    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
	<name>Input Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
      <port>
	<name>Optional Isovalue</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
	<name>Output Field</name>
	<datatype>SCIRun::Field</datatype>
      </port>
      <port>
	<name>Interpolant</name>
	<datatype>SCIRun::Matrix</datatype>
      </port>
    </outputs>
  </io>
  <testing>
  </testing>
</component>
