/*
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
*/


/*
 *  SIDL to SCIRun(1) datatype interface 
 *
 *  Written by:
 *   Kostadin Damevski
 *   School of Computing
 *   University of Utah 
 *   November, 2003
 *
 *  Copyright (C) 2003 SCI Group
 */


package SSIDL {

interface Matrix
{
  bool is_dense();
  bool is_sparse();
  bool is_column();

  Matrix transpose();
  double get_val();
  int get_row();
  int get_col();

  double get(in int a, in int b);
  void put(in int r, in int c, in double val);

  string type_name();

  void zero();
  int nrows();
  int ncols();

  void mult(inout ColumnMatrix x, inout ColumnMatrix b,
            inout int flops, inout int memrefs,
            in int beg, in int end, in int spVec);

  /* TODO LATER
  void getRowNonzeros(in int r, inout array<int,1> idx, inout array<double,1> v);
  */

  int cg_solve(inout ColumnMatrix rhs, inout ColumnMatrix lhs,
	       inout double err, inout int niter,
	       inout int flops, inout int memrefs, 
	       in double max_error, in int toomany);
  int cg_solve(inout ColumnMatrix rhs, inout ColumnMatrix lhs);

  int bicg_solve(inout ColumnMatrix rhs, inout ColumnMatrix lhs,
		 inout double err, inout int niter,
		 inout int flops, inout int memrefs, 
		 in double max_error, in int toomany);
  int bicg_solve(inout ColumnMatrix rhs, inout ColumnMatrix lhs);

  void mult_transpose(inout ColumnMatrix x, inout ColumnMatrix b,
		      inout int flops, inout int memrefs,
		      in int beg, in int end, in int spVec);
  void print();

  void scalar_multiply(in double s);

  // Separate raw files.
  void set_raw(in bool v);
  bool get_raw();
  void set_raw_filename( inout string f );
  string get_raw_filename();

  opaque get_d_object();
};


//<<<<<<<<<<<<<<<<<<<<<<<<<
#include "ColumnMatrix.sidl"
#include "SparseRowMatrix.sidl"
#include "DenseMatrix.sidl"
//>>>>>>>>>>>>>>>>>>>>>>>>>

}; //End of Namespace SSIDL

package MatrixPorts {
  interface MatrixPort extends sci.cca.Port
  {	
    void inMatrix(in SSIDL.Matrix omx);
  };
}; //End of Namespace MatrixPorts

