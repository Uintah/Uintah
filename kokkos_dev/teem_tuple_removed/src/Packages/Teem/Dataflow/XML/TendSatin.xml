<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "../../../../Dataflow/XML/component.dtd">

<!--
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
-->

<component name="TendSatin" category="Tend">
  <overview>
    <author>Darby Van Uitert
    </author>
    <summary>Generate a pretty synthetic DT volume. The surface of a sphere or
tous is covered with either linear or planar anisotropic tensors, or somewhere
in between.
    </summary>
    <description>
    <p>Generate Torus Dataset : generate a torus dataset if checked, otherwise generate a sphere dataset.</p>
    <p>Anisotropy Parameter : anisotropy parameter. 0.0 for one direction of 
    linear (along the equator for spheres, or along the larger
    circumference for toruses), 1.0 for planar, 2.0 for the
    other direction of linear (from pole to pole for spheres, or
    along the smaller circumference for toruses) (float)</p>
    <p>Max Anisotropy : maximum anisotropy in dataset, according to 
    the ca1 anisotropy metric. A value of 1.0 means completely linear or
    completely planar anisotropy (float)</p>
    <p>Min Anisotropy : minimum anisotropy in the dataset (float).</p>
    <p>Boundary : parameter governing how fuzzy the boundary between high and
    low anisotropy is. Use 0.0 for no fuzziness (float)</p>
    <p>Thickness : parameter governing how thick region of high anisotropy is (float)</p>
    <p>Size : dimensions of output volume. For size N, the output is
    N x N x N for spheres, and 2N x 2N x N for toruses (int)</p>
    </description>
  </overview>
  <implementation>
  </implementation>
  <io>
    <inputs lastportdynamic="no">
    </inputs>
    <outputs>
      <port>
        <name>OutputNrrd</name>
        <datatype>Teem::Nrrd</datatype>
      </port>
    </outputs>
  </io>
  <gui>
    <parameter>
      <widget>Label</widget>
      <label>Autogenerated GUI explanation</label>
    </parameter>
  </gui>
  <testing>
  </testing>
</component>
