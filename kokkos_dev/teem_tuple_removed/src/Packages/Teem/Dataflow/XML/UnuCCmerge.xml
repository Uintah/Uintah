<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "../../../../Dataflow/XML/component.dtd">

<!--
  The contents of this file are subject to the University of Utah Public
  License (the "License"); you may not use this file except in compliance
  with the License.
  
  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.
  
  The Original Source Code is SCIRun, released March 12, 2001.
  
  The Original Source Code was developed by the University of Utah.
  Portions created by UNIVERSITY are Copyright (C) 2001, 1994 
  University of Utah. All Rights Reserved.
-->

<component name="UnuCCmerge" category="Unu">
  <overview>
    <author>Darby Van Uitert
    </author>
    <summary>Merge CCs with their neighbors, under various contraints. This
operates on the output of "ccfind". Merging of a CC is always done into its
largest neighbor. Whether or not to merge can be constrained by one or more
of: CC size (-s), original CC value being brighter or darker (-d), and
number of neighbors (-n). 
    </summary>
    <description>
    <p>Value Driven Merging : do value-driven merging. Using 1 says that
    dark islands get merged with bright surrounds, while -1
    says the opposite. A value of 0 indicates merging can go either way.</p>
    <p>Max Size : a cap on the CC size that will be absorbed into its
    surround. CCs larger than this are deemed too significant
    to mess with. Or, a value of 0 removes any such restriction
    on merging.</p>
    <p>Max Neighbors : a cap on the number of neighbors that a CC may have 
    if it is to be be merged. A value of 1 allows only islands to be merged,
    a value of 2 does merging with bigger of two neighbors, etc, while
    a value of 0 says that number of neighbors is no constraint.</p>
    <p>Connectivity : what kind of connectivity to use: the number of
    coordinates that vary in order to traverse the
    neighborhood of a given sample. In 2D: 1 : 4-connected,
    2 : 8-connected</p>
    </description>
  </overview>
  <implementation>
  </implementation>
  <io>
    <inputs lastportdynamic="no">
      <port>
        <name>InputNrrd</name>
        <datatype>Teem::Nrrd</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
        <name>OutputNrrd</name>
        <datatype>Teem::Nrrd</datatype>
      </port>
    </outputs>
  </io>
  <gui>
    <parameter>
      <widget>Label</widget>
      <label>Autogenerated GUI explanation</label>
    </parameter>
  </gui>
  <testing>
  </testing>
</component>

