/*
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/


/*
 *  BuilderServiceBase.code: Implementation of CCA BuilderService for SCIRun
 *
 *  Written by:
 *   Steven G. Parker
 *   Department of Computer Science
 *   University of Utah
 *   October 2001
 *
 */

#ifndef SCIRun_BuilderServiceBase_code
#define SCIRun_BuilderServiceBase_code


#include <Core/CCA/PIDL/PIDL.h>

#include <SCIRun/Core/CCAException.h>

#include <SCIRun/Core/PortInfoImpl.h>
#include <SCIRun/Core/ComponentIDImpl.h>
#include <SCIRun/Core/ComponentInfoImpl.h>

#include <SCIRun/Core/ConnectionIDImpl.h>
#include <SCIRun/Core/ConnectionInfoImpl.h>

#include <iostream>
#include <string>

using namespace std;

namespace SCIRun {
   
  using namespace sci::cca;
  using namespace sci::cca::core;

  template<class Interface>
  BuilderServiceBase<Interface>::BuilderServiceBase(const CoreFramework::pointer &framework)
    : framework(framework)
  {
  }
  
  template<class Interface>
  BuilderServiceBase<Interface>::~BuilderServiceBase()
  {
    framework = 0;
    portInfo = 0;
  }
  
  template<class Interface>
  ComponentID::pointer
  BuilderServiceBase<Interface>::createInstance(const std::string& instanceName,
						const std::string& className,
						const TypeMap::pointer& properties)
  {
    return framework->createInstance(instanceName, className, properties);
  }
  
  template<class Interface>
  ConnectionID::pointer
  BuilderServiceBase<Interface>::connect(const ComponentID::pointer &usesID,
					 const std::string &usesPortName,
					 const ComponentID::pointer &providesID,
					 const ::std::string &providesPortName)
  {
    // sanity check
    if (usesID.isNull()) 
      throw CCAException::pointer(new CCAException("Cannot connect: invalid uses componentID"));
    
    if (providesID.isNull()) 
      throw CCAException::pointer(new CCAException("Cannot connect: invalid provides componentID"));
    
    ComponentInfo::pointer uses = pidl_cast<ComponentInfo::pointer>(usesID);
    ComponentInfo::pointer provides = pidl_cast<ComponentInfo::pointer>(providesID);
    
    // uses
    TypeMap::pointer uProps = uses->getProperties();
    PortInfo::pointer usesPort = uses->getPortInfo(usesPortName);
    if (usesPort.isNull()) 
      throw CCAException::pointer(new CCAException("Unknown port [" + usesPortName+"]", BadPortName));
    
    // provides
    TypeMap::pointer pProps = provides->getProperties();
    PortInfo::pointer providesPort = provides->getPortInfo(providesPortName);
    if (providesPort.isNull()) 
      throw CCAException::pointer(new CCAException("Unknown port [" + providesPortName+"]"));
    
    if ( !usesPort->connect(providesPort)) {
      std::cerr << "BuilderServiceBase::connect: attempt to connect port [" << usesPortName << "] with port [" << providesPortName << "] failed." << std::endl;
      throw CCAException::create("Cannot connect [" + usesPortName + "] with [" + providesPortName+"]");
    }
    
    TypeMap::pointer properties = framework->createTypeMap();
    properties->putString("user", uses->getInstanceName());
    properties->putString("provider", provides->getInstanceName());
    properties->putString("uses port", usesPortName);
    properties->putString("provides port", providesPortName);
    
    ConnectionID::pointer connection(new ConnectionInfoImpl(usesID, usesPortName, providesID, providesPortName));
    framework->addConnection(connection);
    
    return connection;
  }
  
  
  template<class Interface>
  SSIDL::array1<ComponentID::pointer>
  BuilderServiceBase<Interface>::getComponentIDs()
  {
    return framework->getComponentIDs();
  }
  
  template<class Interface>
  TypeMap::pointer
  BuilderServiceBase<Interface>::getComponentProperties(const ComponentID::pointer &id)
  {
    if (id.isNull()) 
      throw CCAException::create("Invalid ComponentID");
    
    ComponentInfo::pointer info = pidl_cast<ComponentInfo::pointer>(id);
    return info->getProperties();
  }

  template<class Interface>
  void
  BuilderServiceBase<Interface>::setComponentProperties(const ComponentID::pointer &id,
							const TypeMap::pointer &properties)
  {
    if (id.isNull()) 
      throw CCAException::create("Invalid ComponentID");

    ComponentInfo::pointer info = pidl_cast<ComponentInfo::pointer>(id);
    info->setProperties(properties);
  }
  
  template<class Interface>
  ComponentID::pointer
  BuilderServiceBase<Interface>::getDeserialization(const std::string& /*s*/)
  {
    // TODO: finish this!
    std::cerr << "BuilderService::getDeserialization not finished\n";
    return ComponentID::pointer(0);
  }
  
  template<class Interface>
  ComponentID::pointer
  BuilderServiceBase<Interface>::getComponentID(const std::string &name)
  {
    ComponentID::pointer id = framework->lookupComponentID(name);
    if (id.isNull()) 
      throw CCAException::create("ComponentID not found");
    
    return id;
  }
  
  template<class Interface>
  void
  BuilderServiceBase<Interface>::destroyInstance(const ComponentID::pointer &component, float /*timeout*/)
  {
    // TODO [yarden]: use timeout
    
    // inform framework there is no need for the component info anymore
    // the framework should then delete the component as well
    framework->destroyInstance(component);
  }
  
  template<class Interface>
  SSIDL::array1<std::string>
  BuilderServiceBase<Interface>::getProvidedPortNames(const ComponentID::pointer &id)
  {
    SSIDL::array1<std::string> result;
    ComponentInfo::pointer info = pidl_cast<ComponentInfo::pointer>(id);
    if (info.isNull()) 
      throw CCAException::create("Invalid component " + id->getInstanceName());
    
    SSIDL::array1<PortInfo::pointer> ports = info->getPorts();
    
    SSIDL::array1<PortInfo::pointer>::const_iterator port;
    for (port=ports.begin(); port != ports.end(); ++port ) {
      if ((*port)->getPortType() == ProvidePort) {
	result.push_back((*port)->getName());
      }
    }
    return result;
  }
  
  template<class Interface>
  SSIDL::array1<std::string>
  BuilderServiceBase<Interface>::getUsedPortNames(const ComponentID::pointer &id)
  {
    SSIDL::array1<std::string> result;
    ComponentInfo::pointer info = pidl_cast<ComponentInfo::pointer>(id);
    if (info.isNull()) 
      throw CCAException::create("Invalid component " + id->getInstanceName());

    SSIDL::array1<PortInfo::pointer> ports = info->getPorts();

    SSIDL::array1<PortInfo::pointer>::const_iterator port;
    for (port=ports.begin(); port != ports.end(); ++port ) {
      if ((*port)->getPortType() == UsePort) {
	result.push_back((*port)->getName());
      }
    }
    return result;
  }
  
  // TODO: make sure that port properties are actually created
  template<class Interface>
  TypeMap::pointer
  BuilderServiceBase<Interface>::getPortProperties(const ComponentID::pointer &id, const std::string &portname)
  {
    ComponentInfo::pointer info = pidl_cast<ComponentInfo::pointer>(id);
    return info.isNull() ? framework->createTypeMap() : info->getProperties();
  }
  
  template<class Interface>
  void BuilderServiceBase<Interface>::setPortProperties(const ComponentID::pointer& /*cid*/,
							const std::string& /*portname*/,
							const TypeMap::pointer& /*map*/)
  {
    throw CCAException::create("BuilderService::setPortProperties not finished");
  }
  
  template<class Interface>
  SSIDL::array1<ConnectionID::pointer>
  BuilderServiceBase<Interface>::getConnectionIDs(const SSIDL::array1<ComponentID::pointer> &componentList)
  {
    return framework->getConnectionIDs(componentList);
  }

  template<class Interface>
  TypeMap::pointer
  BuilderServiceBase<Interface>::getConnectionProperties(const ConnectionID::pointer& connection)
  {
    ConnectionInfo::pointer info = pidl_cast<ConnectionInfo::pointer>(connection);
    return info.isNull() ? TypeMap::pointer(0) : info->getProperties();
  }

  template<class Interface>
  void
  BuilderServiceBase<Interface>::setConnectionProperties(const ConnectionID::pointer &connection,
							 const TypeMap::pointer &properties)
  {
    ConnectionInfo::pointer info = pidl_cast<ConnectionInfo::pointer>(connection);
    if ( !info.isNull() )
      info->setProperties(properties);
  }

  // TODO: disconnect event
  // TODO: timeout never used
  template<class Interface>
  void
  BuilderServiceBase<Interface>::disconnect(const ConnectionID::pointer& connection, float timeout)
  {
    ComponentInfo::pointer user = pidl_cast<ComponentInfo::pointer>(connection->getUser());
    ComponentInfo::pointer provider = pidl_cast<ComponentInfo::pointer>(connection->getProvider());
    
    PortInfo::pointer userPort = user->getPortInfo(connection->getUserPortName());
    PortInfo::pointer providerPort = provider->getPortInfo(connection->getProviderPortName());
    
    // TODO [yarden]: need to add a timer on next command
    userPort->disconnect(providerPort);
    
    framework->disconnect(connection);
  }
  
  template<class Interface>
  void
  BuilderServiceBase<Interface>::disconnectAll(const ComponentID::pointer& /*id1*/,
					       const ComponentID::pointer& /*id2*/,
					       float /*timeout*/)
  {
    throw CCAException::create("BuilderService::disconnectAll not finished");
  }
  
} // end namespace SCIRun

#endif // SCIRun_BuilderServiceImpl_code
