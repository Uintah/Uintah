
<!--
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
-->


<chapter id="dev.exceptions">
  <title>SCIRun Exceptions</title>

  
    <para>
      This chapter explains SCIRun exceptions.  
    </para>
  

  <section>
    <title>Introduction</title>
    <para>
       The Exceptions directory contains common exceptions and the Exception
       base class.  Developers can create new exception classes, and these
       will need to be in other directories if they depend on other data
       structures outside of the Exception dir.
    </para>

    <para>
       All exceptions in SCIRun are derived from the SCIRun::Exception
       base class.  All derived classes implement a message method and a
       type method.   The type method just returns a string (const char*
       actually) that indicates the classname of the exception.  The message
       returns a human readable string that can be printed out when the
       exception is caught.
    </para>

    <para>
       This directory also contains some general exceptions used throughout 
       SCIRun. 
    <itemizedlist>
      <listitem><para>AssertionFailed - thrown when an assertion fails.</para></listitem>
      <listitem><para>ArrayIndexOutOfBounds - thrown to indicate a failed bounds check.</para></listitem>
      <listitem><para>DimensionMismatch - thrown to indicate dimensionality differences.</para></listitem>
      <listitem><para>FileNotFound - thrown when a file is not found.</para></listitem>
       <listitem><para>InternalError - thrown when an internal error occurs.</para></listitem>
    </itemizedlist>
    </para>

  </section>

  <section>
    <title>Programming with SCIRun Exceptions</title>

      <para>
        A developer is likely to use this code from within written modules 
        as well as within new datatypes. 
      </para>

      <para>
         A couple development specific hints follow. 
      </para> 
      <para>
         All exception classes must implement a copy constructor (for some
         compilers).
      </para>
      <para>
         On the SGI, the exception classes will give you a stacktrace when
         they are caught (uses -lexc).
      </para>

      <para>
        Exceptions in SCIRun, are only to be used for exceptional cases. 
        General error handling should use another mechanism. Exceptions are
        expensive, and as such should only be used in cases that warrant it.
        One of the most common uses in this directory are ASSERT, and 
        ASSERTFAIL.
      </para>

    <section>
      <title>ASSERT</title>
    <para>
       This is used to verify that some condition is true before continuing.
       if the expression geven evaluates to false, the exception is thrown, 
       which will eventually abort scirun.
    </para>
    <para>This macro expands to nothing in an optimized build.</para>
    <programlisting>
       myClass *p = get_my_class();
       ASSERT(p != 0);
       p->do_something();
    </programlisting>
    </section>
    
    <section>
      <title>ASSERTFAIL</title>
    <para>
       This is used to abort with a nice message when something is wrong.
    </para>
    <para>This macro expands to nothing in an optimized build.</para>
    <programlisting>
       switch(var) {
         case NICE:
         ...
         break;
        case EVEN_NICER:
         ...
         break;
        default:
         ASSERTFAIL("Unknown case, what happened?");
       }
    </programlisting>
    </section>
  </section>
</chapter>


<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-default-dtd-file:"../../../Utilities/XML/docbook.ced"
sgml-omittag:nil
sgml-shorttag:nil
End:
-->
