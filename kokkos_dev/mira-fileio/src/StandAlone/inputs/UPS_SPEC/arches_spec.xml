<?xml version='1.0' encoding='ISO-8859-1' ?>
<Uintah_Include>

  <Wasatch                             spec="OPTIONAL NO_DATA" >
    <include href="wasatch_spec.xml" section="Wasatch"/>
  </Wasatch>

  <CFD>

    <ARCHES                             spec="OPTIONAL NO_DATA" >

      <set_initial_vel_condition        spec="OPTIONAL NO_DATA"
                                        attribute1="inputfile REQUIRED STRING"/>
          
      <set_initial_condition             spec="OPTIONAL NO_DATA"
                                        attribute1="inputfile REQUIRED STRING"/>
      <new_BC_on_restart                spec="OPTIONAL NO_DATA" />
      <turnonMixedModel                 spec="OPTIONAL BOOLEAN" /> <!-- Move to Properties? not sure what this model is-->
      <recompileTaskgraph               spec="OPTIONAL BOOLEAN" />

      <VarID                            spec="OPTIONAL NO_DATA"> <!-- matches variables to specific CFD roles --> 
        <var                            spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="role REQUIRED STRING 'temperature, density, enthalpy, mixture_fraction, 
                                                                          co2, h2o, soot, specific_heat'"/>
      </VarID>

      <PropertyModels                   spec="OPTIONAL NO_DATA" >
        <model                          spec="MULTIPLE NO_DATA" 
                                        attribute1="label REQUIRED STRING"
                                        attribute2="type REQUIRED STRING 'cc_constant, fx_constant, 
                                                                          laminar_pr, 
                                                                          extent_rxn, tab_strip_factor, 
                                                                          particle_absorption_coefficient, 
                                                                          empirical_soot, 
                                                                          algebraic_scalar_diss,
                                                                          scalsim_variance, 
                                                                          heat_loss,
                                                                          norm_scalar_var,
                                                                          scalar_diss'">

          <initialization               spec="REQUIRED NO_DATA"
                                        attribute1="type REQUIRED STRING 'constant'">

            <constant                   spec="REQUIRED DOUBLE" need_applies_to="type constant"/>

          </initialization>


          <!-- constant property model and scalar dissipation rate model --> 
          <constant                     spec="OPTIONAL DOUBLE"
                                        need_applies_to="type cc_constant, scalar_diss"/>

          <!-- extent of reaction model --> 
          <scalar_label                 spec="OPTIONAL STRING"/>
          <fuel_mass_fraction           spec="OPTIONAL DOUBLE"/>

          <!-- scalar dissipation rate model --> 
          <constant_diss                spec="OPTIONAL NO_DATA"/>

          <!-- algebraic scalar dissipation rate model --> 
          <mixture_fraction_label       spec="REQUIRED STRING"
                                        need_applies_to="type algebraic_scalar_diss, norm_scalar_var"/>
          <turbulent_Sc                 spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type algebraic_scalar_diss"/>
          <D                            spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type algebraic_scalar_diss, scalar_diss"/>
          <!-- scalar dissipation model for 2-eqn -->   
          <!-- D                        spec above -->
          <grad_mixfrac2_label          spec="REQUIRED STRING"
                                        need_applies_to="type scalar_diss"/>
                                        

          <!-- laminar pr --> 
          <atm_pressure                 spec="OPTIONAL DOUBLE"/>
          <mix_frac_label               spec="OPTIONAL STRING"/>
          <D                            spec="OPTIONAL DOUBLE"/>

          <fuel                         spec="OPTIONAL NO_DATA">
            <!-- laminar pr --> 
            <molar_mass                 spec="OPTIONAL DOUBLE 'positive'"/>
            <critical_pressure          spec="OPTIONAL DOUBLE 'positive'"/>
            <critical_temperature       spec="OPTIONAL DOUBLE 'positive'"/>
            <dipole_moment              spec="OPTIONAL DOUBLE 'positive'"/>
            <viscosity                  spec="OPTIONAL DOUBLE 'positive'"/>
          </fuel>
          <oxidizer                     spec="OPTIONAL NO_DATA">
            <!-- laminar pr --> 
            <molar_mass                 spec="OPTIONAL DOUBLE 'positive'"/>
            <critical_temperature       spec="OPTIONAL DOUBLE 'positive'"/>
            <critical_pressure          spec="OPTIONAL DOUBLE 'positive'"/>
            <dipole_moment              spec="OPTIONAL DOUBLE 'positive'"/>
            <viscosity                  spec="OPTIONAL DOUBLE 'positive'"/>
          </oxidizer>

          <!-- Tabulated stripping factor --> 
          <X                            spec="OPTIONAL DOUBLE 'positive'"/>
          <Y                            spec="OPTIONAL DOUBLE 'positive'"/>
          <co2_label                    spec="OPTIONAL STRING 'co2IN, CO2'"/>
          <ch4_label                    spec="OPTIONAL STRING 'ch4IN, CH4'"/>
          <small                        spec="OPTIONAL DOUBLE 'positive'"/>

          <!-- Emperical soot --> 
          <carbon_content_fuel          spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- carbon content, mass of carbon atoms/mass of fuel --> 
          <carbon_content_ox            spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- carbon content, mass of carbon atoms/mass of oxidizer --> 
          <opl                          spec="OPTIONAL DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- this is optional because the radiation model may specify it --> 
          <C1                           spec="OPTIONAL DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- default of 0.1, valid values range between 0-0.2 (see Hottel & Sarofim, 1978) --> 
          <E_cr                         spec="OPTIONAL DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- Critical equivilence ratio, default 1.0 --> 
          <E_inf                        spec="OPTIONAL DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- Equivilence ratio at infinity, default = 2*E_cr --> 
          <E_st                         spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- Equivilence ratio at stoich --> 
          <soot_density                 spec="OPTIONAL DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- default of 1950.0 --> 
          <density_label                spec="OPTIONAL STRING"
                                        need_applies_to="type empirical_soot, scalsim_variance"/> <!-- default of "density" --> 
          <temperature_label            spec="OPTIONAL STRING"
                                        need_applies_to="type empirical_soot"/> <!-- default of "temperature" --> 
          <absorption_label             spec="OPTIONAL STRING"
                                        need_applies_to="type empirical_soot"/> <!-- default of "absorpIN" --> 
          <mixture_fraction_label       spec="OPTIONAL STRING"
                                        need_applies_to="type empirical_soot, scalsim_variance"/> <!-- default of "mixture_fraction" --> 

          <!-- Heat loss --> 
          <enthalpy_label               spec="REQUIRED STRING"
                                        need_applies_to="type heat_loss"/>  <!-- point to the enthalpy transport equation... optional because you can choose constant value--> 
          <adiabatic_enthalpy_label     spec="OPTIONAL STRING"
                                        need_applies_to="type heat_loss"/>  <!-- point to the tabulated adiabatic enthalpy, default = "adiabaticenthalpy" --> 
          <sensible_enthalpy_label      spec="OPTIONAL STRING"
                                        need_applies_to="type heat_loss"/>  <!-- point to the tabulated sensible enthalpy, default = "sensibleenthalpy" --> 
          <hl_bounds                    spec="OPTIONAL NO_DATA" 
                                        attribute1="low REQUIRED DOUBLE"
                                        attribute2="high REQUIRED DOUBLE"
                                        need_applies_to="type heat_loss"/>  <!-- bounds on heat loss.  default = [-1,1]. NOTE: when using ClassicTable, the bounds are 
                                                                                 automatically set from the table itself so there is no need to use this option unless
                                                                                 you are interested in overriding the table bounds. Note that the table doesn't do well 
                                                                                 when extrapolating outside the limits of any IV. --> 
          <noisy_hl_warning             spec="OPTIONAL NO_DATA"
                                        need_applies_to="type heat_loss"/>  <!-- warn when heat loss is exceeded --> 
          <constant_heat_loss           spec="OPTIONAL NO_DATA"
                                        need_applies_to="type heat_loss"/>  <!-- set heat loss to a static constant.  Uses the intialization value (or field).
                                                                                 Note that you can save the actual computed heat loss by saving out: "*_actual", where * = property label 
                                                                                 you assigned this model. This allows you to see the value of heat loss as computed from enthalpy without
                                                                                 actually using it. Note also that if you are after a constant heat loss and don't care to know the value 
                                                                                 as computed from enthalpy, then you are better off just using the cc_constant model. --> 
          <use_Ha_lookup                spec="OPTIONAL BOOLEAN" 
                                        need_applies_to="type heat_loss"/>  <!-- Rather than compute adiabatic enthalpy from the mixture fractions, lookup from the table the 
                                                                                 adiabatic enthalpy. Note this will be slower than the default --> 

          <!-- Scale Similarity Variance --> 
          <!-- mixture_fraction_label   spec above --> 
          <!-- density_label            spec above --> 
          <variance_coefficient         spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type scalsim_variance"/> <!-- Multiplier (Cf) on the variance, var = Cf * (filter(z^2)- filter(z)^2) --> 
                                        
          <!-- Normalized Scalar Variance for use with transport eqn models -->                              
          <!-- mixture_fraction_label    spec above -->
          <second_moment_label          spec="REQUIRED STRING"
                                        need_applies_to="type norm_scalar_var"/>
          <Clip spec="OPTIONAL BOOLEAN" need_applies_to="type norm_scalar_var"/>                              
                                                                                                    
                                          
        </model>
      </PropertyModels>

      <EfficiencyCalculator             spec="OPTIONAL NO_DATA">

        <calculator                     spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="type REQUIRED STRING 'combustion_efficiency, mass_balance'">

          <mixture_fraction             spec="REQUIRED NO_DATA"
                                        attribute1="mf_label_1 REQUIRED STRING"
                                        attribute2="mf_label_2 OPTIONAL STRING"
                                        attribute3="N          REQUIRED INTEGER 'positive'"
                                        need_applies_to="type combustion_efficiency"/>
          <phi_label                    spec="REQUIRED STRING"
                                        need_applies_to="type combustion_efficiency"/>
          <phi_at_feq1                  spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type combustion_efficiency"/>

          <scalar                       spec="OPTIONAL NO_DATA" 
                                        attribute1="label REQUIRED STRING"
                                        need_applies_to="type mass_balance"/>   <!-- computes the balance on eta.  If not used, it computes the total mass balance --> 
          <one_minus_scalar             spec="OPTIONAL NO_DATA"   
                                        need_applies_to="type mass_balance"/>   <!-- computes the balance on (1-eta) where eta is the scalar rather than on eta --> 
          <source                       spec="OPTIONAL NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        need_applies_to="type mass_balance"/>   <!-- consider a mass source term in the balance --> 

                                     

        </calculator>

      </EfficiencyCalculator>

      <Coal_Properties                  spec="OPTIONAL NO_DATA">
        <C                              spec="REQUIRED DOUBLE" />
        <H                              spec="REQUIRED DOUBLE" />
        <N                              spec="REQUIRED DOUBLE" />
        <O                              spec="REQUIRED DOUBLE" />
        <S                              spec="REQUIRED DOUBLE" />
        <initial_ash_mass               spec="REQUIRED MULTIPLE_DOUBLES" />
        <initial_rawcoal_mass           spec="OPTIONAL MULTIPLE_DOUBLES" />
        <initial_fixcarb_mass           spec="OPTIONAL MULTIPLE_DOUBLES" />
        <particle_density               spec="OPTIONAL DOUBLE" />
      </Coal_Properties>
      
      <Turbulence                       spec="OPTIONAL NO_DATA"
                                        attribute1="model REQUIRED STRING 'compdynamicprocedure, dynamicprocedure, 
                                                                           smagorinsky, none'" >

        <!--smagorinsky -->
        <cf                             spec="OPTIONAL DOUBLE 'positive'" />  
        <fac_mesh                       spec="OPTIONAL DOUBLE 'positive'" />
        <filterl                        spec="OPTIONAL DOUBLE 'positive'" />
        <!--dyn. smagorinsky -->
        <filter_cs_squared              spec="OPTIONAL BOOLEAN" />
        <!-- going to leave complocal out based on the 'this model is a mess' comment-->
        <use_new_filter                 spec="OPTIONAL NO_DATA"/> <!-- Don't adjust filter weights near boundaries --> 
      </Turbulence>

      <Properties                       spec="REQUIRED NO_DATA"
                                          children1="ONE_OF(CHILD TabProps, ClassicTable, ColdFlow, ConstantProps)" >

        <filter_drhodt                  spec="OPTIONAL BOOLEAN" />
        <first_order_drhodt             spec="OPTIONAL BOOLEAN" />
        <inverse_density_average        spec="OPTIONAL BOOLEAN" />

        <ColdFlow                       spec="OPTIONAL NO_DATA" >
          <ignore_iv_density_check      spec="OPTIONAL NO_DATA"/>  <!-- don't force an algorithmic change on the transported iv's to use density guess --> 
          <mixture_fraction_label       spec="REQUIRED STRING"/>
          <temperature_label_name       spec="OPTIONAL STRING"/>   <!-- The string label identifier from the table for temperature --> 
          <Stream_1                     spec="MULTIPLE NO_DATA">
            <density                    spec="REQUIRED DOUBLE 'positive'"/>
            <temperature                spec="REQUIRED DOUBLE 'positive'"/>
            <species                    spec="MULTIPLE NO_DATA" 
                                        attribute1="label REQUIRED STRING"
                                        attribute2="value REQUIRED DOUBLE 'positive'"/>
          </Stream_1>
          <Stream_2                     spec="MULTIPLE NO_DATA">
            <density                    spec="REQUIRED DOUBLE 'positive'"/>
            <temperature                spec="REQUIRED DOUBLE 'positive'"/>
            <species                    spec="MULTIPLE NO_DATA" 
                                        attribute1="label REQUIRED STRING"
                                        attribute2="value REQUIRED DOUBLE 'positive'"/>
          </Stream_2>
          <post_mix                     spec="OPTIONAL NO_DATA">
            <!-- Notes on post stream mixing: 
              1) Dependent variables that are not specified are assumed to be ZERO (even density)
              2) If specifying density, specify the INVERSE value 
              3) If specifying mixture molecular weight, specify the INVERSE value 
              4) Dont forget to set thermodynamic properties if you are computing heat loss. 
            --> 
            <stream                     spec="OPTIONAL NO_DATA"
                                        attribute1="transport_label REQUIRED STRING">
              <var                      spec="MULTIPLE NO_DATA"   
                                        attribute1="label REQUIRED STRING" 
                                        attribute2="value REQUIRED DOUBLE"/>
            </stream> 
          </post_mix>
        </ColdFlow>

        <TabProps                       spec="OPTIONAL NO_DATA" >
          <ignore_iv_density_check      spec="OPTIONAL NO_DATA"/>  <!-- don't force an algorithmic change on the transported iv's to use density guess --> 
          <inputfile                    spec="REQUIRED STRING" /> <!-- table to be opened --> 
          <cold_flow                    spec="OPTIONAL BOOLEAN"/> <!-- used for simple stream mixing (no rxn) --> 
          <hl_scalar_init               spec="OPTIONAL DOUBLE" /> <!-- initial heat loss value in the domain --> 
          <noisy_hl_warning             spec="OPTIONAL NO_DATA"/> <!-- warn when heat loss is clipped to bounds --> 
          <lower_hl_bound               spec="OPTIONAL DOUBLE"/> <!-- In the property table, the lower bound for heat loss.  default = -1 --> 
          <upper_hl_bound               spec="OPTIONAL DOUBLE"/> <!-- In the property table, the upper bound for heat loss.  default = +1 --> 
          <coal                         spec="OPTIONAL NO_DATA" 
                                        attribute1="fp_label REQUIRED STRING"     
                                        attribute2="eta_label REQUIRED STRING"/> <!-- Attributes must match the transported IVs specified in the TransportEqn node --> 
        </TabProps>

        <ClassicTable                   spec="OPTIONAL NO_DATA">
          <ignore_iv_density_check      spec="OPTIONAL NO_DATA"/>  <!-- don't force an algorithmic change on the transported iv's to use density guess --> 
          <inputfile                    spec="REQUIRED STRING" />  <!-- table to be opened --> 
          <cold_flow                    spec="OPTIONAL BOOLEAN"/>  <!-- force adiabatic condition --> 
          <noisy_hl_warning             spec="OPTIONAL NO_DATA"/>  <!-- warn when heat loss is clipped to bounds --> 
          <hl_scalar_init               spec="OPTIONAL DOUBLE" />  <!-- initial heat loss value in the domain --> 
          <mf_for_hl                    spec="OPTIONAL NO_DATA"/>  <!-- DEVELOPER SWITCH --> 
          <enthalpy_label               spec="OPTIONAL STRING" />  <!-- Pointer to the enthalpy equation.  default = enthalpySP -->
          <temperature_label_name       spec="OPTIONAL STRING"/>   <!-- The string label identifier from the table for temperature --> 

          <!-- IV specs for various table types --> 
          <!-- IV ordering for table write: (1) mixture fraction (2) scalar variance (3) heat loss --> 
          <standard_flamelet            spec="OPTIONAL NO_DATA"
                                        attribute1="f_label   REQUIRED STRING"
                                        attribute2="var_label REQUIRED STRING"
                                        attribute3="hl_label  REQUIRED STRING"/>
          <!-- IV ordering for table write: (1) mixture fraction (2) scalar variance (3) heat loss --> 
          <standard_equilibrium         spec="OPTIONAL NO_DATA"
                                        attribute1="f_label   REQUIRED STRING"
                                        attribute2="var_label REQUIRED STRING"
                                        attribute3="hl_label  REQUIRED STRING"/>
          <!-- IV ordering for table write: (1) eta (2) heat loss (3) f --> 
          <coal                         spec="OPTIONAL NO_DATA" 
                                        attribute1="fp_label REQUIRED STRING"     
                                        attribute2="eta_label REQUIRED STRING"
                                        attribute3="hl_label REQUIRED STRING"/> 
          <rcce                         spec="OPTIONAL NO_DATA"
                                        attribute1="fp_label REQUIRED STRING"
                                        attribute2="eta_label REQUIRED STRING"
                                        attribute3="hl_label REQUIRED STRING"/> 
          <rcce_fp                      spec="OPTIONAL NO_DATA"
                                        attribute1="xi_label REQUIRED STRING"
                                        attribute2="hl_label REQUIRED STRING"
                                        attribute3="fp_label REQUIRED STRING"/> 
          <rcce_eta                     spec="OPTIONAL NO_DATA"
                                        attribute1="xi_label REQUIRED STRING"
                                        attribute2="eta_label REQUIRED STRING"
                                        attribute3="hl_label REQUIRED STRING"/> 
          <inert_mixing                 spec="OPTIONAL NO_DATA"
                                        attribute1="fp_label REQUIRED STRING"
                                        attribute2="eta_label REQUIRED STRING"
                                        attribute3="inert_label REQUIRED STRING"
                                        attribute4="hl_label REQUIRED STRING"/> 
          <!-- IV ordering for table write: (1) mixture fraction (2) rxn extent --> 
          <acidbase                     spec="OPTIONAL NO_DATA" 
                                        attribute1="f_label REQUIRED STRING"     
                                        attribute2="extent_label REQUIRED STRING"/> 

          <post_mix                     spec="OPTIONAL NO_DATA">
            <!-- Notes on post stream mixing: 
              1) Dependent variables that are not specified are assumed to be ZERO (even density)
              2) If specifying density, specify the INVERSE value 
              3) If specifying mixture molecular weight, specify the INVERSE value 
              4) Dont forget to set thermodynamic properties if you are computing heat loss. 
            --> 
            <stream                     spec="OPTIONAL NO_DATA"
                                        attribute1="transport_label REQUIRED STRING">
              <var                      spec="MULTIPLE NO_DATA"   
                                        attribute1="label REQUIRED STRING" 
                                        attribute2="value REQUIRED DOUBLE"/>
            </stream> 
          </post_mix>
        </ClassicTable>

        <ConstantProps                spec="OPTIONAL NO_DATA">
          <density                    spec="REQUIRED DOUBLE 'positive'"/>
          <temperature                spec="REQUIRED DOUBLE 'positive'"/>
          <temperature_label_name     spec="OPTIONAL STRING"/> <!-- default = temperature -->
        </ConstantProps>

      </Properties>

      <BoundaryConditions               spec="OPTIONAL NO_DATA" > 

        <suppress_corner_recirculation  spec="OPTIONAL NO_DATA"/> <!-- This flag zeros out corner velocity cells to try 
                                                                       to discourage artificial recirculation caused by 
                                                                       pressure and outlet boundaries. Default = false. --> 

        <intrusions                 spec="OPTIONAL NO_DATA">
         <!-- NOTES: --> 
         <!-- velocity components are specified using simple [u,v,w] labels and NOT uVelocitySPBC, etc... --> 
         <!-- variable = mass_flow_rate is a specific variable that sets the velocity components based
         on a specified mass flow rate. -->   
         <!-- If multiple directions are entered, then the mass flow rate is divided across 
         all valid face directions with non-zero velocity normal to that face. --> 
         <!-- Enthalpy is computed based on independ. table variables, including heat loss --> 
         <intrusion                     spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING">       <!-- type = how bc is applied, 
                                                                                       label= unique name for this intrusion boundary --> 
           <geom_object/>                                                         <!-- geometry object associated with this intrusion --> 
           <flux_dir                    spec="MULTIPLE STRING 'x-,X-,x+,X+,
                                                               y-,Y-,y+,Y+,
                                                               z-,Z-,z+,Z+"/>     <!-- direction to apply type of BC, otherwise treated as wall --> 
           <!--variable                    spec="MULTIPLE NO_DATA"                     
                                        attribute1="label REQUIRED STRING"       
                                        attribute2="value REQUIRED DOUBLE"/-->      <!-- label= variable name, 
                                                                                       value= variable boundary value -->

           <velocity                    spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'flat, from_file, massflow'">

            <!-- flat velocity profile [m/s] -->                             
            <u                          spec="OPTIONAL DOUBLE" 
                                        need_applies_to="type flat"/>
            <v                          spec="OPTIONAL DOUBLE" 
                                        need_applies_to="type flat"/>
            <w                          spec="OPTIONAL DOUBLE" 
                                        need_applies_to="type flat"/>
            <!-- from input file --> 
            <input_file                 spec="REQUIRED STRING"
                                        need_applies_to="type from_file"/>

            <!-- mass flow [kg/sec]--> 
            <flow_rate                  spec="REQUIRED DOUBLE"
                                        need_applies_to="type massflow"/> 


           </velocity>
           <scalars                     spec="OPTIONAL NO_DATA">

            <scalar                     spec="MULTIPLE NO_DATA"
                                        attribute1="label OPTIONAL STRING"
                                        attribute2="type REQUIRED STRING 'flat, from_file, tabulated'">
              <input_file               spec="OPTIONAL STRING"
                                        need_applies_to="type from_file"/>
              <constant                 spec="OPTIONAL DOUBLE"
                                        need_applies_to="type flat"/>
              <depend_varname           spec="REQUIRED STRING"
                                        need_applies_to="type tabulated"/>
            </scalar>

           </scalars>
           <inverted                    spec="OPTIONAL NO_DATA"/>                 <!-- inverts the solid def. so that points inside the solid 
                                                                                       are actually outside the solid and vice versa --> 

           <constant_temperature        spec="OPTIONAL NO_DATA"
                                        attribute1="T REQUIRED DOUBLE 'positive'"/>       <!-- Set the intrusion to a constant temperature --> 
           <mpm_temperature             spec="OPTIONAL NO_DATA"/> <!-- This tag turns on two-way energy exchange between the solid and gas --> 
                                                                                                                                                             
           
         </intrusion>
        </intrusions>

        <wall_slip                      spec="OPTIONAL NO_DATA"/> <!-- Use a slip wall BC --> 
        <wall_csmag                     spec="OPTIONAL DOUBLE 'positive'"/> <!-- Constant coefficient for the wall closure model.  default = 0.17. Set to zero for laminar conditions. --> 
        
        <TurbulentInlet                 spec="OPTIONAL NO_DATA" >
          <cell_low                     spec="REQUIRED INTEGER"/>
          <cell_high                    spec="REQUIRED INTEGER"/>
          <Ntimestep                    spec="REQUIRED INTEGER"/>
          <turbulence_intensity         spec="REQUIRED DOUBLE"/>
        </TurbulentInlet>

      <WallHT                           spec="OPTIONAL NO_DATA">
        <temperature_label              spec="OPTIONAL STRING"/> <!-- tabluated name for temperature.  Default: temperature --> 
        <model                          spec="MULTIPLE NO_DATA"
                                        attribute1="type REQUIRED STRING 'simple_ht, region_ht'">
          <!-- simple heat transfer 
                  Solves for the gas side wall temperature by solving the discrete form of: 
                  q = - k dT/dy
                  for all domain solid walls everywhere. Excludes intrusions.  
          --> 
          <k                            spec="REQUIRED DOUBLE" need_applies_to="type simple_ht"/> <!-- thermal conductivity, [W/(m K)] --> 
          <wall_thickness               spec="REQUIRED DOUBLE 'positive'" need_applies_to="type simple_ht"/> <!-- thickness of the wall in meters, [meters] --> 
          <tube_side_T                  spec="REQUIRED DOUBLE 'positive'" need_applies_to="type simple_ht"/> <!-- temperature of the fluid on the tube side (constant), [K] --> 
          <T_wall_min                   spec="OPTIONAL DOUBLE 'positive'" need_applies_to="type simple_ht"/> <!-- minimum allowed wall temperature [K]. Default = 373 --> 
          <T_wall_max                   spec="OPTIONAL DOUBLE 'positive'" need_applies_to="type simple_ht"/> <!-- maximum allowed wall temperature [K]. Default = 373 --> 
          <relaxation_coef              spec="OPTIONAL DOUBLE 'positive'" need_applies_to="type simple_ht"/> <!-- relaxation to help with wildy varying wall temperatures 
                                                                                                                  because we have assumed (with this model) that the wall comes to 
                                                                                                                  instant equilibrium with the gas heat flux. Range 0 < relax < 1. Default = 1 (no relaxation).  --> 

          <!-- region ht 
                Like simple_ht model but only applies the model in the geometry region as specified by the geom_object. 
                May specify several different regions, each with a unique set of properties. 
                This includes all wall types (domain walls and intrusions). 
          --> 
          <max_it                       spec="OPTIONAL INTEGER 'positive'"/> <!-- max iterations allowed for temperature solve, default = 50 --> 
          <initial_tol                  spec="OPTIONAL DOUBLE 'positive'"/>  <!-- tolerance check on before starting the iteration loop, default = 1e-3 --> 
          <tol                          spec="OPTIONAL DOUBLE 'positive'"/>  <!-- iterator tolerance on temperature, default = 1e-5 --> 
          <region                       spec="MULTIPLE NO_DATA" need_applies_to="type region_ht">
            <k                          spec="REQUIRED DOUBLE"/>  <!-- thermal conductivity, [W/(m K)] -->
            <wall_thickness             spec="REQUIRED DOUBLE"/>  <!-- thickness of the wall in meters, [meters] --> 
            <wall_emissivity            spec="OPTIONAL DOUBLE 'positive'"/>  <!-- emissivity of the wall with default of 1.0 --> 
            <tube_side_T                spec="REQUIRED DOUBLE"/>  <!-- temperature of the fluid on the tube side (constant), [K] -->
            <max_TW                     spec="REQUIRED DOUBLE"/>  <!-- the upper limit of the wall temperature -->
            <min_TW                     spec="REQUIRED DOUBLE"/>  <!-- the lower limit of the wall temperature -->
            <relaxation_coef              spec="OPTIONAL DOUBLE 'positive'"/> <!-- relaxation to help with wildy varying wall temperatures 

                       because we have assumed (with this model) that the wall comes to 
                                                                                                                  instant equilibrium with the gas heat flux. Range 0 < relax < 1. Default = 1 no relaxation. for wall with large thermal resistance, recommend relaxation_coef=0.1, for small thermal resisitance, recommend relaxation_coef=1.0 --> 

            <geom_object/>
          </region> 

        </model>
      </WallHT>
      </BoundaryConditions> 

      <ExplicitSolver                   spec="REQUIRED NO_DATA" >

        <initial_dt                     spec="OPTIONAL DOUBLE 'positive'"/>  <!-- Sets the initial timestep of the simulation.  Note that this value will 
                                                                                  be superceded if the CFL condition determines a smaller timestep as determined
                                                                                  from the BC's and initial condition.  --> 
                                               

        <print_total_ke 								spec="OPTIONAL NO_DATA" />  <!-- prints the total kinetic energy to STDIO --> 
        <extraProjection                spec="OPTIONAL BOOLEAN" /> 
        <scalarUnderflowCheck           spec="OPTIONAL NO_DATA" />  <!-- Uses dt = 0.5*rho/div(rhoU)*dx for timestep. Note: only used positive (outbound) div -->  

        <kineticEnergy_fromFC           spec="OPTIONAL BOOLEAN" /> <!-- FIXME: what does this default to? -->

        <maxDensityLag                  spec="OPTIONAL DOUBLE" />

        <extra_table_lookup             spec="OPTIONAL NO_DATA"/> <!-- perform an extra table lookup at Stage 2 of the algorithm --> 

        <MomentumSolver                 spec="REQUIRED NO_DATA" >
          <use_wasatch_momentum_rhs spec="OPTIONAL NO_DATA" />
          <filter_divergence_constraint spec="OPTIONAL BOOLEAN" />
          <convection_scheme            spec="REQUIRED STRING 'central, upwind'" />
          <src                          spec="MULTIPLE NO_DATA" 
                                        attribute1="label REQUIRED STRING"/>

          <initialization               spec="OPTIONAL NO_DATA"           
                                        attribute1="type REQUIRED STRING 'constant, taylor-green, almgren, exponentialvortex, StABL'">

           <const_u                     spec="REQUIRED DOUBLE" need_applies_to="type constant"/>
           <const_v                     spec="REQUIRED DOUBLE" need_applies_to="type constant"/>
           <const_w                     spec="REQUIRED DOUBLE" need_applies_to="type constant"/>

           <c                           spec="REQUIRED DOUBLE" need_applies_to="type taylor-green"/> 

           <A                           spec="OPTIONAL DOUBLE" need_applies_to="type almgren"/> <!-- amplitude --> 
           <B                           spec="OPTIONAL DOUBLE" need_applies_to="type almgren"/> <!-- amplitude --> 
           <plane                       spec="OPTIONAL STRING 'x-y, y-z, z-x'" need_applies_to="type almgren, exponentialvortex"/>
           
           <x0                          spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>
           <y0                          spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>
           <z0                          spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>           
           <G                           spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>                      
           <R                           spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>
           <U                           spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>           
           <V                           spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>           

           <which_bc                    spec="REQUIRED STRING" need_applies_to="type StABL"/>
           
          </initialization>
        </MomentumSolver>

        <PressureSolver                 spec="REQUIRED NO_DATA" >
          <do_only_last_projection      spec="OPTIONAL BOOLEAN" />
          <normalize_pressure           spec="OPTIONAL BOOLEAN" /> 
          <src                          spec="MULTIPLE NO_DATA" 
                                        attribute1="label REQUIRED STRING"/>
          <use_ref_point                spec="OPTIONAL NO_DATA"
                                        attribute1="value REQUIRED DOUBLE"/> 
        <Parameters                     spec="OPTIONAL NO_DATA"
                                          attribute1="variable OPTIONAL STRING 'implicitPressure'" >
          <initial_tolerance            spec="OPTIONAL DOUBLE 'positive'"/>
          <criteria                     spec="OPTIONAL STRING 'Absolute relative'" />                     
          <jump                         spec="OPTIONAL INTEGER" />                                        
          <logging                      spec="OPTIONAL INTEGER 'positive'" />                             
          <maxiterations                spec="OPTIONAL INTEGER 'positive'" />                             
          <norm                         spec="OPTIONAL STRING 'LInfinity linfinity L1 l1 L2 l2'" />       
          <npost                        spec="OPTIONAL INTEGER" />                                        
          <npre                         spec="OPTIONAL INTEGER" />                                        
          <preconditioner               spec="OPTIONAL STRING 'none, pfmg, smg jacobi'" />                            
          <outputEquations              spec="OPTIONAL BOOLEAN" />                                        
          <skip                         spec="OPTIONAL INTEGER" />                                        
          <setupFrequency               spec="OPTIONAL INTEGER" />                                        
          <solver                       spec="REQUIRED STRING 'smg, SMG, PFMG, pfmg, SparseMSG, sparsemsg, CG, cg, Hybrid, hybrid, GMRES, gmres'" />                         
          <tolerance                    spec="REQUIRED DOUBLE 'positive'" /> 
          <relax_type                   spec="OPTIONAL INTEGER '0,3'"/> <!-- 0=jacobi,1=weighted jacobi,2=rb symmetric,3=rb non-symmetric --> 
        </Parameters>
        </PressureSolver>

        <restartOnNegativeDensityGuess  spec="OPTIONAL BOOLEAN" /> <!--default = false-->
        <NoisyDensityGuess              spec="OPTIONAL BOOLEAN" /> <!--default = false-->
        <turbModelCalcForAllRKSteps     spec="OPTIONAL BOOLEAN" />
        <turbModelCalcFreq              spec="OPTIONAL INTEGER" />
      </ExplicitSolver>

      <!-- This is new stuff -->
      <TimeIntegrator                   spec="REQUIRED NO_DATA" >
        <ExplicitIntegrator             spec="REQUIRED NO_DATA"
                                        attribute1="order REQUIRED STRING 'first, second, third'"/>
      </TimeIntegrator>  

      <TransportEqns                    spec="OPTIONAL NO_DATA" >

        <Eqn                            spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="type  REQUIRED STRING 'CCscalar'">
          <!--restart_from                 spec="OPTIONAL NO_DATA"
                                        attribute1="label REQUIRED STRING"/--> <!-- BEING TESTED: Allows this equation to restart from a predefined variable other than itself --> 
          <turbulentPrandtlNumber       spec="OPTIONAL DOUBLE" /> <!-- Turbulence closure (D_T = mu_t/(Sc_t or Pr_t)), default = 0.4 -->    
          <doDiff                       spec="OPTIONAL BOOLEAN"/> <!-- Turn diffusion on/off --> 
          <doConv                       spec="OPTIONAL BOOLEAN"/> <!-- Turn convection on/off --> 
          <conv_scheme                  spec="OPTIONAL STRING 'upwind, roe_minmod, super_bee, central, old_super_bee'"/> <!-- VAN LEER not working --> 
          <!--use_laminar_pr               spec="OPTIONAL NO_DATA"
                                        attribute1="label REQUIRED STRING"/-->
          <scaling_const                spec="OPTIONAL DOUBLE"/>  <!-- Not used at the moment -->                               
          <!-- Regarding the density guess (next two specs): If the equation is enthalpy or a table parameter, then density_guess=true is automatically set for you.
               You don't need to set it again if you don't want to. --> 
          <use_density_guess            spec="OPTIONAL NO_DATA"/> <!-- Uses a guessed density to get \phi^{n+1}, default=false -->
          <determines_properties        spec="OPTIONAL NO_DATA"/> <!-- Forces use_density_guess = true. Has the same effect as <use_density_guess> --> 
          <stage                        spec="OPTIONAL NO_DATA"
                                        attribute1="value REQUIRED INTEGER '0,2'"/> <!-- at which algorithmic stage should this be computed. 0=before table lookup, 
                                                                                           1=after table lookup, 2=after RK averaging (performs a separate RK averaging)--> 
          <!--                                                -->
          <src                          spec="MULTIPLE NO_DATA" 
                                        attribute1="label REQUIRED STRING"> <!-- Pointer to sources defined elsewhere --> 
            <weight                     spec="OPTIONAL DOUBLE"/>            <!-- Multiply by this weight when adding source to the RHS. Default is +1.0. --> 
          </src>
          <D_mol                        spec="OPTIONAL NO_DATA" 
                                        attribute1="label REQUIRED STRING"/> <!-- [m^2/s] --> <!-- label pointing the molecular diffusivity --> 
          <D_mol_constant               spec="OPTIONAL NO_DATA"
                                        attribute1="value REQUIRED DOUBLE"/> <!-- [m^2/s] --> <!-- for constant diffusivity --> 
          <initialization               spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'constant, step, geometry_fill, sine-x, sine-y, sine-z, gaussian, tabulated'">
            <!-- constant value initialization -->
            <constant                   spec="OPTIONAL DOUBLE"/>
            <!-- constant within a geometry piece (geometry_fill) -->
            <geom_object                spec="OPTIONAL"/>
            <constant_inside            spec="REQUIRED DOUBLE" need_applies_to="type geometry_fill"/> <!-- fills this value inside the geometry --> 
            <constant_outside           spec="OPTIONAL DOUBLE" need_applies_to="type geometry_fill"/> <!-- fills this value outside the geometry. default = 0.0 --> 

            <!-- step function initialization --> 
            <step_direction             spec="OPTIONAL STRING 'x,y,z'"/> <!-- direction in which the step occurs -->
            <step_value                 spec="OPTIONAL DOUBLE"/>         <!-- step from 0 to (value) - VALUE IS UNSCALED!!! -->
            <step_start                 spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should begin -->
            <step_end                   spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should end -->
            <step_cellstart             spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should begin -->
            <step_cellend               spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should end -->
            <!-- gaussian initialization --> 
            <!-- computes: y = a*exp( -1 * (x-b)^2/(2c^2) ) + shift --> 
            <!-- a = amplitude, b = center, c = std --> 
            <direction                  spec="REQUIRED STRING 'x,y,z,X,Y,Z'" need_applies_to="type gaussian"/> <!-- direction of the gaussian --> 
            <amplitude                  spec="REQUIRED DOUBLE" need_applies_to="type gaussian"/>               <!-- height of the gaussian --> 
            <center                     spec="REQUIRED DOUBLE" need_applies_to="type gaussian"/>               <!-- center of the gaussian --> 
            <std                        spec="REQUIRED DOUBLE" need_applies_to="type gaussian"/>               <!-- width of the gaussian --> 
            <shift                      spec="OPTIONAL DOUBLE" need_applies_to="type gaussian"/>               <!-- shift the gaussian by a constant --> 

            <!-- Initialize a variable using table lookup --> 
            <depend_varname             spec="REQUIRED STRING" need_applies_to="type tabulated"/> <!-- the name of the variable from the table --> 

          </initialization>                              

          <Clipping                     spec="OPTIONAL NO_DATA">
            <low                        spec="OPTIONAL DOUBLE"/> <!-- Low clipping value for SCALED value of DQMOM internal coordinate -->
            <high                       spec="OPTIONAL DOUBLE"/> <!-- High clipping value for SCALED value of DQMOM internal coordinate -->
            <tol                        spec="OPTIONAL DOUBLE"/> <!-- Tolerance on the clipping (low+tol, high-tol) --> 
          </Clipping>

        </Eqn>

        <Sources                        spec="OPTIONAL NO_DATA">
          <src                          spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="type REQUIRED STRING  'constant_src, 
                                                                           westbrook_dryer, 
                                                                           coal_gas_oxi,                                                         
                                                                           coal_gas_heat,                                                        
                                                                           coal_gas_devol,                                                       
                                                                           coal_gas_momentum,                                                    
                                                                           cc_inject_src,                                                        
                                                                           fx_inject_src,                                                        
                                                                           fy_inject_src,                                                          
                                                                           fz_inject_src,                                                          
                                                                           tab_rxn_rate,                                                           
                                                                           cc_intrusion_inlet,                                                     
                                                                           fx_intrusion_inlet,                                                     
                                                                           fy_intrusion_inlet,                                                     
                                                                           fz_intrusion_inlet,                                                     
                                                                           do_radiation,                                                           
                                                                           rmcrt_radiation, 
                                                                           bowman_nox,
                                                                           wasatch_expr,
                                                                           pc_transport,
                                                                           moment2_mixture_fraction_src,
                                                                           dissipation_src,
                                                                           manifold_rxn'">                                                           

            <!-- Specs for coal gas devol model -->
            <devol_model_name           spec="REQUIRED STRING" need_applies_to="type coal_gas_devol" />

            <!-- Spec for the heat transfer source --> 
            <heat_model_name            spec="REQUIRED STRING" need_applies_to="type coal_gas_heat"/>

            <!-- Tabulated reaction rate --> 
            <rxn_rate                   spec="REQUIRED STRING" need_applies_to="type tab_rxn_rate" />
            
            <!-- Wasatch expression as a source - needs ForceOnGraph in Wasatch block -->
            <expr                       spec="REQUIRED STRING" need_applies_to="type wasatch_expr" />

            <!-- Spec for constant and multi-point constant source term model -->
            <constant                   spec="OPTIONAL DOUBLE" need_applies_to="type constant_src, fx_inject_src, fy_inject_src, fz_inject_src, cc_inject_src" />

            <!-- Spec for the char oxidation source --> 
            <char_oxidation_model_name  spec="REQUIRED STRING" need_applies_to="type coal_gas_oxi" />

            <!-- Multi-point constant injection --> 
            <injector_region            spec="REQUIRED NO_DATA" need_applies_to="type fx_inject_src, fy_inject_src, fz_inject_src, cc_inject_src">
              <geom_object/>
            </injector_region>
            
            <!-- specs nneded for second moment of mixture fraction source-->
            <density_label              spec="REQUIRED STRING" need_applies_to="type moment2_mixture_fraction_src"/>
            <scalar_dissipation_label   spec="REQUIRED STRING" need_applies_to="type moment2_mixture_fraction_src"/> 
            
            <!-- specs needed for the dissipation term for 2eqn scalr var model -->
            <mixture_fraction_label     spec="REQUIRED STRING" need_applies_to="type dissipation_src"/>
            <gradmixfrac_label          spec="REQUIRED STRING" need_applies_to="type dissipation_src"/>
            <D                          spec="REQUIRED DOUBLE" need_applies_to="type dissipation_src"/>

            <!-- inject_type = constant : constant value in every cell that is contained within the geom object (use <constant> spec)--> 
            <!-- inject_type = fromfile : reads an input file and assigns value at each i,j,k matching the inputfile 
                                          within the geom_oject (use <inputfile> spec)--> 
            <inject_type                spec="REQUIRED STRING 'constant, fromfile'" need_applies_to="type fx_inject_src, fy_inject_src, fz_inject_src, cc_inject_src" />
            <inputfile                  spec="OPTIONAL STRING" need_applies_to="type fx_inject_src, fy_inject_src, fz_inject_src, cc_inject_src" />

            <!-- Radiation models --> 
            <calc_frequency             spec="OPTIONAL INTEGER" need_applies_to="type do_radiation rmcrt_radiation" /> <!-- calculate radiation every N steps, default = 3 --> 
            <abskp_label                spec="OPTIONAL STRING"  need_applies_to="type do_radiation rmcrt_radiation" />
            <calc_on_all_RKsteps        spec="OPTIONAL BOOLEAN" need_applies_to="type do_radiation rmcrt_radiation" /> <!-- calculate radiation every RK step, default = false --> 
            <co2_label                  spec="OPTIONAL STRING"  need_applies_to="type do_radiation" /> <!-- string label of CO2, default = CO2 --> 
            <h2o_label                  spec="OPTIONAL STRING"  need_applies_to="type do_radiation" /> <!-- string label of H2O, default = H2O --> 
            <T_label                    spec="OPTIONAL STRING"  need_applies_to="type do_radiation" /> <!-- string label of temperature, default = temperature -->  
            <soot_label                 spec="REQUIRED STRING"  need_applies_to="type do_radiation" /> <!-- string label of absorbtion coefficient, default = absorpIN (old Arches variable) --> 
            <psize_label                spec="OPTIONAL STRING"  need_applies_to="type do_radiation rmcrt_radiation" /> <!-- string label of the particle size --> 
            <ptemperature_label         spec="OPTIONAL STRING"  need_applies_to="type do_radiation rmcrt_radiation" /> <!-- string label of the particle size --> 
            <DORadiationModel           spec="OPTIONAL NO_DATA" need_applies_to="type do_radiation" >
              <opl                        spec="REQUIRED DOUBLE" />                                    <!-- optical path length --> 
              <ordinates                  spec="OPTIONAL INTEGER" />                                   <!-- number of ordinants, default = 2 --> 
              <property_model             spec="OPTIONAL STRING 'radcoef, patchmean, wsggm'" />        <!-- optical property model, default = radcoef --> 
              <LinearSolver               spec="OPTIONAL NO_DATA"                                      
                                          attribute1="type REQUIRED STRING 'hypre, petsc'">
                <res_tol                  spec="REQUIRED DOUBLE" />
                <ksptype                  spec="REQUIRED STRING 'gmres, cg'" />
                <pctype                   spec="REQUIRED STRING 'jacobi, blockjacobi'" />
                <max_iter                 spec="REQUIRED INTEGER" />
              </LinearSolver>
              <spherical_harmonics        spec="OPTIONAL BOOLEAN" />                                   <!-- Spherical harmonics, default = false (works?) --> 
              <property_calculator       spec="OPTIONAL NO_DATA" attribute="type REQUIRED STRING 'constant, burns_christon, radprops'">
                <min                     spec="OPTIONAL VECTOR 'positive'" need_applies_to="type burns_christon" />
                <max                     spec="OPTIONAL VECTOR 'positive'" need_applies_to="type burns_christon" />
                <abskg                   spec="REQUIRED DOUBLE" need_applies_to="type constant" />
                <grey_gas                spec="OPTIONAL NO_DATA" need_applies_to="type radprops">
                  <inputfile             spec="REQUIRED STRING"/> <!-- the input file as generated by RadProps -->   
                  <mix_mol_w_label       spec="OPTIONAL STRING"/> <!-- default is "mixture_molecular_weight" --> 
                </grey_gas>
                <particles               spec="OPTIONAL NO_DATA" need_applies_to="type radprops">
                  <model_type            spec="REQUIRED STRING 'planck, rossland'"/> <!-- Type of absorption coefficient --> 
                  <complex_ir_real       spec="REQUIRED DOUBLE 'positive'"/> <!-- Real part of the complex index of refraction --> 
                  <complex_ir_imag       spec="REQUIRED DOUBLE 'negative'"/> <!-- Imaginary part of the complex index of refraction --> 
                </particles>
              </property_calculator> 
            </DORadiationModel>

            <!-- pc transport --> 
            <pc_scal_file                spec="REQUIRED STRING" need_applies_to="type pc_transport"/> <!-- ..... --> 
            <pc_st_scal_file             spec="REQUIRED STRING" need_applies_to="type pc_transport"/>
            <svm_model_base_name         spec="REQUIRED STRING" need_applies_to="type pc_transport"/>
            <n_pcs                       spec="REQUIRED INTEGER" need_applies_to="type pc_transport"/>
            <n_sts                       spec="REQUIRED INTEGER" need_applies_to="type pc_transport"/>
            <n_ind                       spec="REQUIRED INTEGER" need_applies_to="type pc_transport"/>
            <n_tot                       spec="REQUIRED INTEGER" need_applies_to="type pc_transport"/>
            <pc                          spec="MULTIPLE NO_DATA" 
                                         attribute1="label REQUIRED STRING"
                                         attribute2="score_number REQUIRED INTEGER"
                                         need_applies_to="type pc_transport"/>

            
            <!-- RMCRT -->
            <RMCRT                       spec="OPTIONAL NO_DATA" need_applies_to="type rmcrt_radiation" >
              <!-- <include href="Models.xml" section="Models/RMCRT" />          Dav -->
              <randomSeed                spec="OPTIONAL BOOLEAN"/>
              <Temperature               spec="OPTIONAL DOUBLE  'positive'"/>      <!-- needed by RMCRT_test -->
              <abskg                     spec="OPTIONAL DOUBLE  'positive'"/>                   
              <sigmaScat                 spec="OPTIONAL DOUBLE  'positive'"/>
              <abskgBench4               spec="OPTIONAL DOUBLE  'positive'"/>
              <nDivQRays                 spec="OPTIONAL INTEGER 'positive'"/>        
              <Threshold                 spec="OPTIONAL DOUBLE  'positive'"/>        
              <Slice                     spec="OPTIONAL DOUBLE"/>                    
              <StefanBoltzmann           spec="OPTIONAL DOUBLE  'positive'"/>        
              <benchmark                 spec="OPTIONAL INTEGER 'positive'"/>                    
              <solveBoundaryFlux         spec="OPTIONAL BOOLEAN"/>                   
              <CCRays                    spec="OPTIONAL BOOLEAN"/>
              <VirtRadiometer            spec="OPTIONAL BOOLEAN"/>
              <VRViewAngle               spec="OPTIONAL DOUBLE 'positive'"/>
              <VROrientation             spec="OPTIONAL VECTOR"/>
              <VRLocationsMin            spec="OPTIONAL VECTOR 'positive'"/>
              <VRLocationsMax            spec="OPTIONAL VECTOR 'positive'"/>
              <nRadRays                  spec="OPTIONAL INTEGER 'positive'"/>        
              <nFluxRays                 spec="OPTIONAL INTEGER 'positive'"/>        
              <halo                      spec="OPTIONAL VECTOR 'positive'"/>
              <allowReflect              spec="OPTIONAL BOOLEAN"/>
              <solveDivQ                 spec="OPTIONAL BOOLEAN"/>
              <applyFilter               spec="OPTIONAL BOOLEAN"/>
              <ignore_BC_bulletproofing  spec="OPTIONAL BOOLEAN"/>
 
 
              <property_calculator       spec="OPTIONAL NO_DATA" attribute="type REQUIRED STRING 'constant, burns_christon, radprops, hottel_sarofim'">
                <min                     spec="OPTIONAL VECTOR 'positive'" need_applies_to="type burns_christon" />
                <max                     spec="OPTIONAL VECTOR 'positive'" need_applies_to="type burns_christon" />
                <abskg                   spec="REQUIRED DOUBLE" need_applies_to="type constant" />
                <grey_gas                spec="OPTIONAL NO_DATA" need_applies_to="type radprops">
                  <inputfile             spec="REQUIRED STRING"/> <!-- the input file as generated by RadProps -->   
                  <mix_mol_w_label       spec="OPTIONAL STRING"/> <!-- default is "mixture_molecular_weight" --> 
                </grey_gas>
                <particles               spec="OPTIONAL NO_DATA" need_applies_to="type radprops">
                  <model_type            spec="REQUIRED STRING 'planck, rossland'"/> <!-- Type of absorption coefficient --> 
                  <complex_ir_real       spec="REQUIRED DOUBLE 'positive'"/> <!-- Real part of the complex index of refraction --> 
                  <complex_ir_imag       spec="REQUIRED DOUBLE 'negative'"/> <!-- Imaginary part of the complex index of refraction --> 
                </particles>
                <opl                     spec="REQUIRED DOUBLE 'positive'" need_applies_to="type hottel_sarofim"/> <!-- Optical Path Length --> 
                <co2_name                spec="OPTIONAL STRING" need_applies_to="type hottel_sarofim"/> <!-- Default = CO2 --> 
                <h2o_name                spec="OPTIONAL STRING" need_applies_to="type hottel_sarofim"/> <!-- Default = H2O --> 
                <soot_name               spec="OPTIONAL STRING" need_applies_to="type hottel_sarofim"/> <!-- Default = soot --> 
              </property_calculator> 
              

              <algorithm                spec="OPTIONAL NO_DATA" attribute1="type REQUIRED STRING 'dataOnion RMCRT_coarseLevel'">
                                    
                <orderOfInterpolation   spec="REQUIRED INTEGER 'positive'" need_applies_to="type RMCRT_coarseLevel" />
                <halo                   spec="REQUIRED VECTOR  'positive'" need_applies_to="type dataOnion" />
        
                <ROI_extents            spec="OPTIONAL NO_DATA"
                                  attribute1="type REQUIRED STRING 'fixed dynamic patch_based'">
    
                  <abskg_threshold      spec="OPTIONAL DOUBLE  'positive'" need_applies_to="type dynamic"/>
                  <sigmaT4_threshold    spec="OPTIONAL DOUBLE  'positive'" need_applies_to="type dynamic"/>
          
                  <min                  spec="REQUIRED VECTOR" need_applies_to="type fixed"/>
                  <max                  spec="REQUIRED VECTOR" need_applies_to="type fixed"/>
                </ROI_extents>
              </algorithm>
              
            </RMCRT>

            <!-- Westbrook Dryer Global Hydrocarbon reaction rate model -->
            <!-- see Turns, pg. 156-157 -->
            <!-- A: pre-exponential factor.  Units for westbrook/dryer model are in (gmol/cm^3)^(1-m-n)/s and consistent with the choice of m and n. --> 
            <A                          spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer, bowman_nox"/> <!-- Pre-exponential factor. -->
            <!-- E/R: activiation temperature. Unit for westbrook/dryer model are in kelvin --> 
            <E_R                        spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer, bowman_nox"/> <!-- Activation temperature. Use same units as listed in Turns. --> 
            <X                          spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- C_xH_y --> 
            <Y                          spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- C_xH_y --> 
            <m                          spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- [C_xH_y]^m --> 
            <n                          spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- [O_2]^n --> 
            <fuel_mass_fraction         spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- Mass fraction of C_xH_y when f=1 --> 
            <stoich_fuel_O2_massratio   spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- Stoichiometric mass fuel/mass air for the slow step --> 
            <cstar_fraction_label       spec="REQUIRED STRING" need_applies_to="type westbrook_dryer"/> <!-- Name of the C*H mass fraction from the table --> 

            <!-- Use one set of the following two options: --> 
            <!-- set 1. --> 
            <eta_label                   spec="OPTIONAL STRING" need_applies_to="type westbrook_dryer"/> <!-- Eta mass fraction label --> 
            <fp_label                    spec="OPTIONAL STRING" need_applies_to="type westbrook_dryer"/> <!-- Fp  mass fraction label -->
            <!-- set 2. --> 
            <xi_label                    spec="OPTIONAL STRING" need_applies_to="type westbrook_dryer"/> <!-- Total fuel (conserved) mass fraction label --> 
            <!-- end --> 

            <temperature_clip           spec="OPTIONAL DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- Turns off the rate below this T --> 
            <flammability_limit         spec="OPTIONAL NO_DATA" need_applies_to="type westbrook_dryer"> <!-- Use "nose" plot to turn on/off source term. Noses are specified immediately below --> 
              <!-- lower and upper flammability limits are approximated as straight lines, y=mx+b, where x = amount if diluent and y = amount of fuel. --> 
              <!-- slopes and intercepts should be computed from volume % nose plots --> 
              <!-- USE one of the next two options (<diluent> or <const_diluent>) --> 
              <diluent                  spec="OPTIONAL NO_DATA"
                                        attribute1="label REQUIRED STRING"/> <!-- label pointing to the diluent mass fraction -->
              <const_diluent            spec="OPTIONAL DOUBLE 'positive'"/>  <!-- rather than transport a diluent, use a constant --> 
              <lower                    spec="REQUIRED NO_DATA"                    
                                        attribute1="slope REQUIRED DOUBLE"
                                        attribute2="intercept REQUIRED DOUBLE"/> <!-- Defines the line for the lower flammability limit --> 
              <upper                    spec="REQUIRED NO_DATA" 
                                        attribute1="slope REQUIRED DOUBLE"
                                        attribute2="intercept REQUIRED DOUBLE"/> <!-- Defines the line for the upper flammability limit --> 

            </flammability_limit>
            <n2_label                   spec="OPTIONAL STRING" need_applies_to="type bowman_nox"/> <!-- N2 label (default = O2) --> 
            <o2_label                   spec="OPTIONAL STRING" need_applies_to="type westbrook_dryer, bowman_nox"/> <!-- o2 label (default = O2) --> 
            <temperature_label          spec="OPTIONAL STRING" need_applies_to="type westbrook_dryer, bowman_nox"/> <!-- temperature label (default = temperature) --> 
            <density_label              spec="OPTIONAL STRING" need_applies_to="type westbrook_dryer, bowman_nox"/> <!-- density label (default = "density) --> 
            <hot_spot                   spec="OPTIONAL NO_DATA" need_applies_to="type westbrook_dryer"> <!-- pilot light --> 
              <geom_object/>                                                                            <!-- defines the location of the pilot --> 
              <start_time               spec="REQUIRED DOUBLE 'positive'"/>                             <!-- pilot turns on at this time -->  
              <stop_time                spec="REQUIRED DOUBLE 'positive'"/>                             <!-- pilot turns off at this time -->  
              <temperature              spec="REQUIRED DOUBLE 'positive'"/>                             <!-- defines the temperature of the pilot --> 
            </hot_spot>

            <!-- Bowman NOx rate expression --> 
            <!-- A, E_R, o2_label, density_label, temperature_label are defined above in the westbrook dryer model description but apply here as well --> 
            <no2_label                  spec="OPTIONAL STRING" need_applies_to="type bowman_nox"/> <!-- mass fraction label for NO2 (default = NO2) --> 
                                        
            <!-- Intrusion inlets --> 
            <intrusion                  spec="OPTIONAL NO_DATA">
              <geom_object/>
            </intrusion>
            <normal                     spec="OPTIONAL STRING '+X,-X,+Y,-Y,+Z,-Z'"/>
            <velocity                   spec="OPTIONAL DOUBLE"/>
            <density                    spec="OPTIONAL DOUBLE"/>
            <phi                        spec="OPTIONAL DOUBLE"/>

            <!-- manifold rxn --> 
            <manifold_label             spec="REQUIRED STRING" need_applies_to="type manifold_rxn"/> <!-- label for the manifold variable --> 
            <conv_scheme                spec="REQUIRED NO_DATA"
                                        attribute1="type REQUIRED STRING 'super_bee, roe_minmod, upwind, central'"
                                        need_applies_to="type manifold_rxn"/> <!-- choose a convection scheme --> 

                      
          </src>

        </Sources>

      </TransportEqns>

      <DQMOM                            spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'unweightedAbs, weightedAbs'">

        <!-- Tags for verification of DQMOM AX=B solution procedure -->
        <Verify_Linear_Solver           spec="OPTIONAL NO_DATA">
            <A                          spec="REQUIRED STRING" />
            <X                          spec="REQUIRED STRING" /> 
            <B                          spec="REQUIRED STRING" /> 
            <R                          spec="REQUIRED STRING" /> 
            <normR                      spec="REQUIRED STRING" /> 
            <norms                      spec="REQUIRED STRING" /> 
            <dimension                  spec="REQUIRED INTEGER 'positive'" />
            <tolerance                  spec="OPTIONAL DOUBLE 'positive'" />
        </Verify_Linear_Solver>

        <!-- Tags for verification of DQMOM A and B construction procedure -->
        <Verify_AB_Construction         spec="OPTIONAL NO_DATA">
            <A                          spec="REQUIRED STRING" />
            <B                          spec="REQUIRED STRING" />
            <inputs                     spec="REQUIRED STRING" />
            <moments                    spec="REQUIRED STRING" />
            <number_environments          spec="REQUIRED INTEGER 'positive'" />
            <number_internal_coordinates  spec="REQUIRED INTEGER 'positive'" />
            <tolerance                  spec="OPTIONAL DOUBLE 'positive'" />
        </Verify_AB_Construction>

        <!-- Block of tags for specifying the linear solver used for DQMOM -->
        <LinearSolver                   spec="OPTIONAL NO_DATA">
          <tolerance                    spec="OPTIONAL DOUBLE 'positive'" />
          <type                         spec="OPTIONAL STRING 'Lapack-invert, Lapack-svd, LU, Optimize, Simplest'" />
          <Optimization                 spec="OPTIONAL NO_DATA" >
            <Optimal_abscissas          spec="REQUIRED MULTIPLE_DOUBLES" />
          </Optimization>
          <maxConditionNumber           spec="OPTIONAL DOUBLE 'positive'" />
          <calcConditionNumber          spec="OPTIONAL BOOLEAN" /> <!-- this tag can be added if the linear solver you choose doesn't do an SVD, but you still want a condition number -->
                                                                   <!-- NOTE: this doesn't actually do anything if you're using a linear solver that uses SVD -->
        </LinearSolver>

        <!-- This block is (will be) used for coupled multiphysics coal calculations.
             It allows the CoalModelFactory to determine which internal coordinates correspond
             to which physical roles.  It may (should) replace the <Model> tags currently used
             (but only for coupled coal particle calculations, and only after a way of
             indicating models is added to this block!)
        -->
        <coalParticleCalculation        spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'coupled, separable'" >
            <Length                     spec="OPTIONAL STRING" /> <!-- Particle length internal coordinate label -->
            <RawCoal                    spec="OPTIONAL STRING" /> <!-- Particle raw coal internal coordinate label -->
            <Char                       spec="OPTIONAL STRING" /> <!-- Particle char internal coordinate label -->
            <ParticleTemperature        spec="OPTIONAL STRING" /> <!-- Particle temperature internal coordinate label -->
            <ParticleEnthalpy           spec="OPTIONAL STRING" /> <!-- Particle enthalpy internal coordinate label -->
            <Moisture                   spec="OPTIONAL STRING" /> <!-- Particle moisture internal coordinate label -->
            <Ash                        spec="OPTIONAL STRING" /> <!-- Particle ash internal coordinate label -->
            <!-- A method for indicating the combination of multiphysics models to use still needs to be added -->
        </coalParticleCalculation>

        <number_quad_nodes              spec="REQUIRED INTEGER 'positive'"/>
        <adiabGas_nonadiabPart          spec="OPTIONAL BOOLEAN"/> <!-- FIXME: What is this for? -->
        <save_moments                   spec="OPTIONAL BOOLEAN"/> <!-- Allows saving any moments being used for DQMOM -->

        <VelModel                       spec="MULTIPLE NO_DATA"
                                        attribute1="label OPTIONAL STRING"
                                        attribute2="type REQUIRED STRING 'Balachandar, Dragforce'">

          <kinematic_viscosity          spec="OPTIONAL DOUBLE 'positive'"/>
          <L                            spec="OPTIONAL DOUBLE 'positive'"/>
          <rho_ratio                    spec="OPTIONAL DOUBLE 'positive'"/>
          <regime                       spec="OPTIONAL INTEGER '1 3'"/>
          <eta                          spec="OPTIONAL DOUBLE 'positive'"/>

          <upper_limit_multiplier       spec="OPTIONAL DOUBLE"/>
          <clip_low                     spec="OPTIONAL DOUBLE"/>
          <partvelBC_eq_gasvelBC        spec="OPTIONAL BOOLEAN"/>
          <min_vel_ratio                spec="OPTIONAL DOUBLE 'positive'"/>

          <iter                         spec="OPTIONAL INTEGER 'positive'"/>
          <tol                          spec="OPTIONAL DOUBLE  'positive'"/>

        </VelModel>

        <Models                         spec="OPTIONAL NO_DATA">
        
          <model                        spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="type REQUIRED STRING 'KobayashiSarofimDevol, YamamotoDevol, ConstantModel, 
                                                                          SimpleHeatTransfer, 
                                                                          XDrag, YDrag, ZDrag, 
                                                                          ShaddixHeatTransfer, EnthalpyShaddix, CharOxidationShaddix'">

            <ICVars                     spec="OPTIONAL NO_DATA"> <!-- block containing list of internal coordinates the DQMOM model depends on -->
              <variable                 spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="role REQUIRED STRING"/>
            </ICVars>

            <scalarVars                 spec="OPTIONAL NO_DATA"> <!-- block containing list of scalar variables the DQMOM model depends on -->
              <variable                 spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="role REQUIRED STRING"/>
            </scalarVars>

            <low_clip                   spec="OPTIONAL DOUBLE 'positive'"/> <!-- lowest value the DQMOM model term can have -->
            <high_clip                  spec="OPTIONAL DOUBLE 'positive'"/> <!-- highest value the DQMOM model term can have -->

            <!-- Heat Transfer Model -->
            <noRadiation                spec="OPTIONAL NO_DATA"/>

            <!-- Constant Model -->
            <constant                   spec="OPTIONAL DOUBLE"/>

          </model>
        </Models>

        <Weights                        spec="REQUIRED NO_DATA">
          <doDiff                       spec="OPTIONAL BOOLEAN"/>
          <doConv                       spec="OPTIONAL BOOLEAN"/>
          <conv_scheme                  spec="OPTIONAL STRING 'upwind, roe_minmod, super_bee'"/>
          <turbulentPrandtlNumber       spec="OPTIONAL DOUBLE" />
          <molecular_diffusivity        spec="OPTIONAL DOUBLE 'positive'"/>
          <initialization               spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'env_constant, constant, env_step, step'">
            <!-- constant value initialization -->
            <constant                   spec="OPTIONAL DOUBLE"/>
            <env_constant               spec="MULTIPLE NO_DATA"
                                        attribute1="qn REQUIRED INTEGER 'positive'"
                                        attribute2="value REQUIRED DOUBLE" />
            <!-- step function initialization --> 
            <!-- Note: the only difference between 'step' and 'env_step' is the use of <step_value></step_value> or <env_step_value qn="" value=""/> -->
            <step_direction             spec="OPTIONAL STRING 'x,y,z'"/> <!-- direction in which the step occurs -->
            <step_value                 spec="OPTIONAL DOUBLE"/>         <!-- step from 0 to (value) -->
            <step_start                 spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should begin -->
            <step_end                   spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should end -->
            <step_cellstart             spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should begin -->
            <step_cellend               spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should end -->
            <env_step_value             spec="MULTIPLE NO_DATA"
                                        attribute1="qn REQUIRED INTEGER 'positive'"
                                        attribute2="value REQUIRED DOUBLE" />     <!-- for environment (qn), step from 0 to (value) -->
          </initialization>                              
          <scaling_const                spec="REQUIRED DOUBLE"/>                              
          <Clipping                     spec="OPTIONAL NO_DATA">
            <low                        spec="OPTIONAL DOUBLE"/> <!-- Low clipping value for SCALED value of DQMOM internal coordinate -->
            <high                       spec="OPTIONAL DOUBLE"/> <!-- High clipping value for SCALED value of DQMOM internal coordinate -->
            <tol                        spec="OPTIONAL DOUBLE"/> <!-- Tolerance on the clipping (low+tol, high-tol) --> 
          </Clipping>
        </Weights>


        <Ic                             spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING">
          <doDiff                       spec="OPTIONAL BOOLEAN"/>
          <doConv                       spec="OPTIONAL BOOLEAN"/>
          <conv_scheme                  spec="OPTIONAL STRING 'upwind, roe_minmod, super_bee'"/>
          <turbulentPrandtlNumber       spec="OPTIONAL DOUBLE" />
          <molecular_diffusivity        spec="OPTIONAL DOUBLE 'positive'"/>
          <initialization               spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'env_constant, constant, env_step'">
            <!-- environment constant value initialization -->
            <env_constant               spec="MULTIPLE NO_DATA"
                                        attribute1="qn REQUIRED INTEGER 'positive'"
                                        attribute2="value REQUIRED DOUBLE" />
            <constant                   spec="OPTIONAL DOUBLE"/>
            <!-- step function initialization --> 
            <step_direction             spec="OPTIONAL STRING 'x,y,z'"/> <!-- direction in which the step occurs -->
            <step_start                 spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should begin -->
            <step_end                   spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should end -->
            <step_cellstart             spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should begin -->
            <step_cellend               spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should end -->
            <env_step_value             spec="MULTIPLE NO_DATA"
                                        attribute1="qn REQUIRED INTEGER 'positive'"
                                        attribute2="value REQUIRED DOUBLE" />     <!-- for environment (qn), step from 0 to (value) -->
          </initialization>                              
          <scaling_const                spec="REQUIRED DOUBLE"/>                              
          <model                        spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"/>
          <Clipping                     spec="OPTIONAL NO_DATA">
            <low                        spec="OPTIONAL DOUBLE"/> <!-- Low clipping value for SCALED value of DQMOM internal coordinate -->
            <high                       spec="OPTIONAL DOUBLE"/> <!-- High clipping value for SCALED value of DQMOM internal coordinate -->
            <tol                        spec="OPTIONAL DOUBLE"/> <!-- Tolerance on the clipping (low+tol, high-tol) --> 
          </Clipping>
        </Ic>

        <Moment                         spec="MULTIPLE NO_DATA">
          <m                            spec="REQUIRED MULTIPLE_INTEGERS"/>
        </Moment>

      </DQMOM>

      <!-- Use this block for wasatch-in-arches builds only to create placeholders for arbitrary variables -->
      <ExtraWarchesVariables            spec="OPTIONAL NO_DATA">
        <NameTag                        spec="MULTIPLE"/>
      </ExtraWarchesVariables>
    </ARCHES>
  </CFD>

</Uintah_Include>
