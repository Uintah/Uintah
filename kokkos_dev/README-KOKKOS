How to build and run a kokkos enabled example.

1) Create the directories the build and third-party-libraries (TPLs)

  mkdir opt
  mkdir -p opt/TPLs
  mkdir -p opt/TPLs_src
  mkdir -p opt/TPLs_src/kokkos
  mkdir -p opt/TPLs_src/kokkos-build
  mkdir -p opt/TPLs_src/hwloc-build

2) Extract kokkos and hwloc tarballs to opt/TPLs_src
  
  tar -xvvf tarballs/hwloc-1.10.1.tar.gz -C opt/TPLs_src/
  tar -xvvf tarballs/kokkos.tar.bz2 -C opt/TPLs_src/kokkos

3) Export CC, CXX, and LINK (these need to be exported since the included kokkos version
   is fragile and does not correctly propagate these variables).

  export CC=gcc
  export CXX=g++
  export LINK=g++

4) Export TPL_PATH and the path to the Kokkos source

  export TPL_PATH=`pwd`/opt/TPLs
  export KOKKOS_PATH=`pwd`/opt/TPLs_src/kokkos

5) Configure and build hwloc

  cd opt/TPLs_src/hwloc-build
  ../hwloc-1.10.1/configure \
    --prefix=$TPL_PATH \
    --enable-static

  make -j 
  make install

6) Configure and build Kokkos (the included version of kokkos has a fragile build system
  so we also need to export and set CC, CXX, and LINK)

  cd ../kokkos-build
  $KOKKOS_PATH/generate_makefile.bash \
    --prefix=$TPL_PATH \
    --kokkos-path=$KOKKOS_PATH \
    --with-pthread \
    --with-hwloc=$TPL_PATH

  make -j CC=$CC CXX=$CXX LINK=$LINK
  make install CC=$CC CXX=$CXX LINK=$LINK

  # To test Kokkos run the following make commands
  # make -j build-test CC=$CC CXX=$CXX LINK=$LINK
  # make test CC=$CC CXX=$CXX LINK=$LINK

7) Configure and build Uintah

  cd ../..
  ../src/configure \
    --enable-64bit \
    --enable-optimize="-O3 -mt_mpi" \
    --enable-assertion-level=0 \
    --enable-static \
    --without-fortran \
    --with-mpi=/path/to/mpi \
    CC=mpicc \
    CXX=mpicxx \
    LDFLAGS="-L$TPL_PATH/lib -lkokkos -lhwloc"
    CXXFLAGS="-I$TPL_PATH/include"

  make -j sus

8) Setting up the threadpools to run the poisson example
  
   Export the KOKKOS_THREAD_POOLS env.  KOKKOS_THREAD_POOLS is a comma seperated
   list of hwloc generated cpu bitsets.  The length of the list determines the number
   of thread pools.  Assuming a machine with 16 cores and 2 hyperthreads per core
   here are a few different ways to set KOKKOS_THREAD_POOLS.

   #32 threadpools of 1 thread
   export KOKKOS_THREAD_POOLS="`hwloc-calc pu:0`,`hwloc-calc pu:1`,`hwloc-calc pu:2`,`hwloc-calc pu:3`,`hwloc-calc pu:4`,`hwloc-calc pu:5`,`hwloc-calc pu:6`,`hwloc-calc pu:7`,`hwloc-calc pu:8`,`hwloc-calc pu:9`,`hwloc-calc pu:10`,`hwloc-calc pu:11`,`hwloc-calc pu:12`,`hwloc-calc pu:13`,`hwloc-calc pu:14`,`hwloc-calc pu:15`,`hwloc-calc pu:16`,`hwloc-calc pu:17`,`hwloc-calc pu:18`,`hwloc-calc pu:19`,`hwloc-calc pu:20`,`hwloc-calc pu:21`,`hwloc-calc pu:22`,`hwloc-calc pu:23`,`hwloc-calc pu:24`,`hwloc-calc pu:25`,`hwloc-calc pu:26`,`hwloc-calc pu:27`,`hwloc-calc pu:28`,`hwloc-calc pu:29`,`hwloc-calc pu:30`,`hwloc-calc pu:31`"

   #16 threadpools of 2 threads (single core)
   export KOKKOS_THREAD_POOLS="`hwloc-calc core:0`,`hwloc-calc core:1`,`hwloc-calc core:2`,`hwloc-calc core:3`,`hwloc-calc core:4`,`hwloc-calc core:5`,`hwloc-calc core:6`,`hwloc-calc core:7`,`hwloc-calc core:8`,`hwloc-calc core:9`,`hwloc-calc core:10`,`hwloc-calc core:11`,`hwloc-calc core:12`,`hwloc-calc core:13`,`hwloc-calc core:14`,`hwloc-calc core:15`"

  #16 threadpools of 2 threads (1 thread per numa)
   export KOKKOS_THREAD_POOLS="`hwloc-calc numa:all.pu:0`,`hwloc-calc numa:all.pu:1`,`hwloc-calc numa:all.pu:2`,`hwloc-calc numa:all.pu:3`,`hwloc-calc numa:all.pu:4`,`hwloc-calc numa:all.pu:5`,`hwloc-calc numa:all.pu:6`,`hwloc-calc numa:all.pu:7`,`hwloc-calc numa:all.pu:8`,`hwloc-calc numa:all.pu:9`,`hwloc-calc numa:all.pu:10`,`hwloc-calc numa:all.pu:11`,`hwloc-calc numa:all.pu:12`,`hwloc-calc numa:all.pu:13`,`hwloc-calc numa:all.pu:14`,`hwloc-calc numa:all.pu:15`" 

   #8 threadpools of 4 threads (1 core per numa)
   export KOKKOS_THREAD_POOLS="`hwloc-calc numa:all.core:0`,`hwloc-calc numa:all.core:1`,`hwloc-calc numa:all.core:2`,`hwloc-calc numa:all.core:3`,`hwloc-calc numa:all.core:4`,`hwloc-calc numa:all.core:5`,`hwloc-calc numa:all.core:6`,`hwloc-calc numa:all.core:7`"

   #4 threadpools of 8 threads (2 cores per numa)
   export KOKKOS_THREAD_POOLS="`hwloc-calc numa:all.core:0-1`,`hwloc-calc numa:all.core:2-3`,`hwloc-calc numa:all.core:4-5`,`hwloc-calc numa:all.core:6-7`"

   #2 threadpools of 16 threads (4 cores per numa)
   export KOKKOS_THREAD_POOLS="`hwloc-calc numa:all.core:0-3`,`hwloc-calc numa:all.core:4-7`"

   #1 threadpools of 32 threads (entire machine)
   export KOKKOS_THREAD_POOLS="`hwloc-calc numa:all`"

9) Create a kokkos_poisson.ups (see example ups at the end of the readme)

10) Running the poisson example.  N equals the number of threadpools listed in KOKKOS_THREAD_POOLS
   

   mpirun -np 1 ./sus -mpi -nthreads N kokkos_poisson.ups


Example kokkos_poisson.ups:

<Uintah_specification>
  <Meta>
    <title>Poisson1 test</title>
  </Meta>

  <SimulationComponent type="poisson1" />
  <!--__________________________________-->
  <Time>
    <maxTime>       1.0       </maxTime>
    <initTime>      0.0       </initTime>
    <delt_min>      0.00001   </delt_min>
    <delt_max>      1         </delt_max>
    <max_Timesteps> 100       </max_Timesteps>
    <timestep_multiplier>  1  </timestep_multiplier>
  </Time>

  <!--__________________________________-->
  <DataArchiver>
    <filebase>test-poisson.uda</filebase>
    <outputTimestepInterval>0</outputTimestepInterval>
    <save label = "phi"/>
    <save label = "residual"/>
    <checkpoint cycle = "0" timestepInterval = "0"/>
  </DataArchiver>

  <!--__________________________________-->
  <Poisson>
    <delt>.01</delt>
    <maxresidual>.01</maxresidual>
  </Poisson>

  <!--__________________________________-->
  <Grid>
    <BoundaryConditions>
      <Face side = "x-">
        <BCType id = "0"   label = "Phi"     var = "Dirichlet"> 
          <value> 1. </value> 
        </BCType> 
      </Face>
      <Face side = "x+">
        <BCType id = "0"   label = "Phi"     var = "Dirichlet"> 
          <value> 0. </value> 
        </BCType> 
      </Face>
      <Face side = "y-">
        <BCType id = "0"   label = "Phi"     var = "Dirichlet"> 
          <value> 0. </value> 
        </BCType> 
      </Face>                  
      <Face side = "y+">
        <BCType id = "0"   label = "Phi"     var = "Dirichlet"> 
          <value> 0. </value> 
        </BCType> 
      </Face>
      <Face side = "z-">
        <BCType id = "0"   label = "Phi"     var = "Dirichlet"> 
          <value> 0. </value> 
        </BCType> 
      </Face>
      <Face side = "z+">
        <BCType id = "0"   label = "Phi"     var = "Dirichlet"> 
          <value> 0. </value> 
        </BCType> 
      </Face>
    </BoundaryConditions>

    <Level>
      <Box label = "1">                              
        <lower>      [0,0,0]          </lower>         
        <upper>      [1.0,1.0,1.0]    </upper>         
        <resolution> [128,128,128] </resolution>    
        <patches>    [4,4,4]       </patches>       
      </Box>                                         
    </Level>
  </Grid>

</Uintah_specification>
