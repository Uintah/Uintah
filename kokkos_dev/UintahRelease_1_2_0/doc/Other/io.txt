The following (very terse) information was compiled by Randy and Dav
when looking at how we would update Uintah to output floats instead of
doubles.  (Also how to read those floats back.)

Subject: IO in Uintah

Starts here:

void DataArchiver::output(const ProcessorGroup*,
			  const PatchSubset* patches,
			  const MaterialSubset* matls,
			  DataWarehouse* /*old_dw*/,
			  DataWarehouse* new_dw,
			  Dir* p_dir,
			  const VarLabel* var)

~/SCIRun/src/Packages/Uintah/CCA/Components/Schedulers/OnDemandDataWarehouse.h

These are the real data holders:  DWDatabase<NCVariableBase, Patch> d_ncDB;

This begins the output:

void OnDemandDataWarehouse::emit(OutputContext& oc, const VarLabel* label,
                                 int matlIndex, const Patch* patch)

and eventaully calls (tells each variable to output itself):

   var->emit(oc, l, h, label->getCompressionMode());

Look in here:

~/SCIRun/src/Packages/Uintah/Core/Grid/Variable.cc

emit():

These lines to the writing:

  const char* writebuffer = (*writeoutString).c_str();
  unsigned long writebufferSize = (*writeoutString).size();
  ssize_t s = ::write(oc.fd, writebuffer, writebufferSize);

Probably need a for loop to grab each double and then save it
individually as a float.

-------------------------------------------------------------------------

Particle thoughts:

In ParticleVariable.h

Maybe specialize "emitNormal()" for doubles?

Probably a Bad idea: Perhaps, check sizeof(T) and if it is 8 assume it
is a double?

Probably the best idea: Or use the TypeDescription (td variable) and
call getType and compare it with double_type.  (See
Core/Disclosure/TypeDescription.h)

------------------------------------------------------------------------

Labels used to get data from DW.  Only need to create the label
once... (could do it anytime you needed it, but wastes time and space.

From MPMLabel.cc/.h (Labels only need to be defined once):

eg: 
  pVolumeDeformedLabel = VarLabel::create( "p.volumedeformed",
			ParticleVariable<double>::getTypeDescription());

----------------------------------------------------------------------

Reading it back in:

~/SCIRun/src/Packages/Uintah/Dataflow/Modules/DataIO/ArchiveReader.cc

uda (Uintah Data Archive) creates an XML file that specifies all the
data in the uda.  Take a look at gold standards:

/usr/sci/projects/Uintah/tester/Linux/TestData/opt/MPM/disks/
  disks.uda/index.xml 

as an example.


----------------------------------------------------------------------

Questions:

  What percentage is ParticleVariable<Matrix3> data?  How to handle
this as read/write are memory dumps...

