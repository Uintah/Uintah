/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define pdtconst const
#else
#define pdtconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN pdt_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((pdt_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pdtrestart( pdtin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct pdt_buffer_state *YY_BUFFER_STATE;

extern int pdtleng;
extern FILE *pdtin, *pdtout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		pdtless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the pdtless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define pdtless(n) \
	do \
		{ \
		/* Undo effects of setting up pdttext. */ \
		*pdt_cp = pdt_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		pdt_c_buf_p = pdt_cp = pdt_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pdttext again */ \
		} \
	while ( 0 )

#define unput(c) pdtunput( c, pdttext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int pdt_size_t;


struct pdt_buffer_state
	{
	FILE *pdt_input_file;

	char *pdt_ch_buf;		/* input buffer */
	char *pdt_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	pdt_size_t pdt_buf_size;

	/* Number of characters read into pdt_ch_buf, not including EOB
	 * characters.
	 */
	int pdt_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int pdt_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int pdt_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int pdt_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int pdt_fill_buffer;

	int pdt_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pdtrestart()), so that the user can continue scanning by
	 * just pointing pdtin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE pdt_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER pdt_current_buffer


/* pdt_hold_char holds the character lost when pdttext is formed. */
static char pdt_hold_char;

static int pdt_n_chars;		/* number of characters read into pdt_ch_buf */


int pdtleng;

/* Points to current character in buffer. */
static char *pdt_c_buf_p = (char *) 0;
static int pdt_init = 1;		/* whether we need to initialize */
static int pdt_start = 0;	/* start state number */

/* Flag which is used to allow pdtwrap()'s to do buffer switches
 * instead of setting up a fresh pdtin.  A bit of a hack ...
 */
static int pdt_did_buffer_switch_on_eof;

void pdtrestart YY_PROTO(( FILE *input_file ));

void pdt_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void pdt_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE pdt_create_buffer YY_PROTO(( FILE *file, int size ));
void pdt_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void pdt_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void pdt_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER pdt_flush_buffer( pdt_current_buffer )

YY_BUFFER_STATE pdt_scan_buffer YY_PROTO(( char *base, pdt_size_t size ));
YY_BUFFER_STATE pdt_scan_string YY_PROTO(( pdtconst char *pdt_str ));
YY_BUFFER_STATE pdt_scan_bytes YY_PROTO(( pdtconst char *bytes, int len ));

static void *pdt_flex_alloc YY_PROTO(( pdt_size_t ));
static void *pdt_flex_realloc YY_PROTO(( void *, pdt_size_t ));
static void pdt_flex_free YY_PROTO(( void * ));

#define pdt_new_buffer pdt_create_buffer

#define pdt_set_interactive(is_interactive) \
	{ \
	if ( ! pdt_current_buffer ) \
		pdt_current_buffer = pdt_create_buffer( pdtin, YY_BUF_SIZE ); \
	pdt_current_buffer->pdt_is_interactive = is_interactive; \
	}

#define pdt_set_bol(at_bol) \
	{ \
	if ( ! pdt_current_buffer ) \
		pdt_current_buffer = pdt_create_buffer( pdtin, YY_BUF_SIZE ); \
	pdt_current_buffer->pdt_at_bol = at_bol; \
	}

#define YY_AT_BOL() (pdt_current_buffer->pdt_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *pdtin = (FILE *) 0, *pdtout = (FILE *) 0;
typedef int pdt_state_type;
extern char *pdttext;
#define pdttext_ptr pdttext

static pdt_state_type pdt_get_previous_state YY_PROTO(( void ));
static pdt_state_type pdt_try_NUL_trans YY_PROTO(( pdt_state_type current_state ));
static int pdt_get_next_buffer YY_PROTO(( void ));
static void pdt_fatal_error YY_PROTO(( pdtconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pdttext.
 */
#define YY_DO_BEFORE_ACTION \
	pdttext_ptr = pdt_bp; \
	pdtleng = (int) (pdt_cp - pdt_bp); \
	pdt_hold_char = *pdt_cp; \
	*pdt_cp = '\0'; \
	pdt_c_buf_p = pdt_cp;

#define YY_NUM_RULES 18
#define YY_END_OF_BUFFER 19
static pdtconst short int pdt_acclist[117] =
    {   0,
       19,   16,   17,   18,   17,   18,   14,   18,   13,   17,
       18,   16,   17,   18,   16,   17,   18,   16,   17,   18,
       16,   17,   18,   15,   17,   18,   10,   16,   17,   18,
       16,   16,   16,   16,   16,   16,   16,    8,   16,   16,
        9,   10,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   12,   16,   16,   16,   16,   16,   16,    1,   16,
       16,   16,   11,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,    7,   16,   16,   16,   16,   16,

       16,    6,   16,   16,   16,   16,    2,   16,   16,    4,
       16,   16,    3,   16,    5,   16
    } ;

static pdtconst short int pdt_accept[100] =
    {   0,
        1,    1,    1,    2,    5,    7,    9,   12,   15,   18,
       21,   24,   27,   31,   32,   33,   33,   34,   35,   36,
       37,   38,   40,   41,   42,   44,   44,   45,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   53,   54,   54,
       55,   56,   57,   58,   59,   61,   62,   62,   63,   64,
       65,   66,   67,   68,   69,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
       94,   95,   97,   98,   99,  100,  101,  102,  104,  105,
      106,  107,  109,  110,  112,  113,  115,  117,  117

    } ;

static pdtconst int pdt_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    7,    1,    1,    1,
        1,    1,    1,    1,    8,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,    1,    1,
        1,   12,    1,    1,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        1,    1,    1,    1,    9,    1,   14,   13,   15,   13,

       16,   17,   13,   13,   18,   13,   13,   13,   19,   20,
       21,   22,   13,   23,   13,   24,   25,   13,   13,   13,
       13,   13,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static pdtconst int pdt_meta[26] =
    {   0,
        1,    2,    3,    2,    4,    1,    1,    1,    1,    1,
        2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static pdtconst short int pdt_base[108] =
    {   0,
        0,    0,  171,    0,  172,  172,  172,   24,   26,  158,
      159,  156,   47,    0,   58,  156,   68,   11,  146,  151,
      139,    0,  160,  172,   79,   26,  151,   28,   35,  141,
      135,   25,  137,  134,  154,  172,  151,   53,  150,  151,
      135,  128,  131,  125,    0,  131,  145,  144,  172,  126,
      127,  120,  119,  122,  138,  116,  119,  122,   42,  113,
      120,  111,  111,  114,  116,  115,  107,  113,  111,  109,
      107,  102,   81,   71,   76,   64,   68,   61,   63,   59,
       60,    0,   52,   54,   52,   52,   48,    0,   35,   26,
       26,    0,   18,    0,   14,    0,    0,  172,   91,   95,

       98,  101,  104,  108,  112,  116,  120
    } ;

static pdtconst short int pdt_def[108] =
    {   0,
       98,    1,   98,   99,   98,   98,   98,   99,   99,   99,
       99,   98,  100,   99,   99,  101,   99,   99,   99,   99,
       99,   99,  102,   98,  100,  103,   17,  103,  104,   99,
       99,   99,   99,   99,  102,   98,  105,  104,  105,  106,
       99,   99,   99,   99,   99,   99,  107,  106,   98,   99,
       99,   99,   99,   99,  107,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,    0,   98,   98,

       98,   98,   98,   98,   98,   98,   98
    } ;

static pdtconst short int pdt_nxt[198] =
    {   0,
        4,    5,    6,    7,    4,    8,    9,   10,    4,   11,
        4,   12,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   15,   16,   15,   30,   97,
       37,   31,   37,   96,   17,   18,   26,   39,   98,   40,
       95,   94,   43,   19,   20,   44,   21,   14,   14,   93,
       14,   14,   14,   14,   14,   39,   14,   40,   14,   15,
       16,   15,   64,   92,   65,   91,   90,   89,   17,   27,
       28,   27,   29,   88,   87,   86,   85,   84,   17,   14,
       14,   83,   14,   14,   14,   14,   14,   82,   14,   81,
       14,   14,   14,   80,   14,   25,   25,   79,   25,   16,

       16,   35,   35,   35,   35,   28,   28,   28,   38,   38,
       38,   38,   39,   39,   39,   39,   48,   48,   48,   48,
       55,   55,   55,   55,   78,   77,   76,   75,   74,   73,
       72,   71,   70,   69,   68,   67,   66,   63,   62,   61,
       49,   60,   59,   58,   57,   56,   49,   49,   54,   53,
       52,   51,   50,   49,   47,   47,   36,   46,   45,   42,
       41,   14,   36,   34,   33,   32,   26,   24,   23,   22,
       98,    3,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98

    } ;

static pdtconst short int pdt_chk[198] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    8,    8,    8,   18,   95,
       26,   18,   28,   93,    8,    9,   26,   29,   28,   29,
       91,   90,   32,    9,    9,   32,    9,   13,   13,   89,
       13,   13,   13,   13,   13,   38,   13,   38,   13,   15,
       15,   15,   59,   87,   59,   86,   85,   84,   15,   17,
       17,   17,   17,   83,   81,   80,   79,   78,   17,   25,
       25,   77,   25,   25,   25,   25,   25,   76,   25,   75,
       25,   99,   99,   74,   99,  100,  100,   73,  100,  101,

      101,  102,  102,  102,  102,  103,  103,  103,  104,  104,
      104,  104,  105,  105,  105,  105,  106,  106,  106,  106,
      107,  107,  107,  107,   72,   71,   70,   69,   68,   67,
       66,   65,   64,   63,   62,   61,   60,   58,   57,   56,
       55,   54,   53,   52,   51,   50,   48,   47,   46,   44,
       43,   42,   41,   40,   39,   37,   35,   34,   33,   31,
       30,   27,   23,   21,   20,   19,   16,   12,   11,   10,
        3,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98

    } ;

static pdt_state_type pdt_state_buf[YY_BUF_SIZE + 2], *pdt_state_ptr;
static char *pdt_full_match;
static int pdt_lp;
#define REJECT \
{ \
*pdt_cp = pdt_hold_char; /* undo effects of setting up pdttext */ \
pdt_cp = pdt_full_match; /* restore poss. backed-over text */ \
++pdt_lp; \
goto find_rule; \
}
#define pdtmore() pdtmore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pdttext;
#line 1 "pdt/scanner.l"
#define INITIAL 0
/*
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/
#line 31 "pdt/scanner.l"
#include "../IR.h"
#include "parser.h"
#include <string.h>

int pdt_lineno;
char* pdt_curfile;
int rejectOL = 0; 
#define YY_DECL extern "C" int pdtlex (void)

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pdtwrap YY_PROTO(( void ));
#else
extern int pdtwrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void pdtunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef pdttext_ptr
static void pdt_flex_strncpy YY_PROTO(( char *, pdtconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int pdt_flex_strlen YY_PROTO(( pdtconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int pdtinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int pdt_start_stack_ptr = 0;
static int pdt_start_stack_depth = 0;
static int *pdt_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void pdt_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void pdt_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int pdt_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( pdttext, pdtleng, 1, pdtout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( pdt_current_buffer->pdt_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pdtin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pdtin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, pdtin )) == 0) \
		  && ferror( pdtin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "pdtterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef pdtterminate
#define pdtterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) pdt_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int pdtlex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after pdttext and pdtleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register pdt_state_type pdt_current_state;
	register char *pdt_cp = NULL, *pdt_bp = NULL;
	register int pdt_act;

#line 41 "pdt/scanner.l"



	if ( pdt_init )
		{
		pdt_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! pdt_start )
			pdt_start = 1;	/* first start state */

		if ( ! pdtin )
			pdtin = stdin;

		if ( ! pdtout )
			pdtout = stdout;

		if ( ! pdt_current_buffer )
			pdt_current_buffer =
				pdt_create_buffer( pdtin, YY_BUF_SIZE );

		pdt_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		pdt_cp = pdt_c_buf_p;

		/* Support of pdttext. */
		*pdt_cp = pdt_hold_char;

		/* pdt_bp points to the position in pdt_ch_buf of the start of
		 * the current run.
		 */
		pdt_bp = pdt_cp;

		pdt_current_state = pdt_start;
		pdt_state_ptr = pdt_state_buf;
		*pdt_state_ptr++ = pdt_current_state;
pdt_match:
		do
			{
			register YY_CHAR pdt_c = pdt_ec[YY_SC_TO_UI(*pdt_cp)];
			while ( pdt_chk[pdt_base[pdt_current_state] + pdt_c] != pdt_current_state )
				{
				pdt_current_state = (int) pdt_def[pdt_current_state];
				if ( pdt_current_state >= 99 )
					pdt_c = pdt_meta[(unsigned int) pdt_c];
				}
			pdt_current_state = pdt_nxt[pdt_base[pdt_current_state] + (unsigned int) pdt_c];
			*pdt_state_ptr++ = pdt_current_state;
			++pdt_cp;
			}
		while ( pdt_base[pdt_current_state] != 172 );

pdt_find_action:
		pdt_current_state = *--pdt_state_ptr;
		pdt_lp = pdt_accept[pdt_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( pdt_lp && pdt_lp < pdt_accept[pdt_current_state + 1] )
				{
				pdt_act = pdt_acclist[pdt_lp];
					{
					pdt_full_match = pdt_cp;
					break;
					}
				}
			--pdt_cp;
			pdt_current_state = *--pdt_state_ptr;
			pdt_lp = pdt_accept[pdt_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( pdt_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 43 "pdt/scanner.l"
{ rejectOL = pdt_lineno; return MAP; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 44 "pdt/scanner.l"
{ rejectOL = pdt_lineno; return ININTERFACE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 45 "pdt/scanner.l"
{ rejectOL = pdt_lineno; return OUTINTERFACE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 46 "pdt/scanner.l"
{ rejectOL = pdt_lineno; return CLOSEININTERFACE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 47 "pdt/scanner.l"
{ rejectOL = pdt_lineno; return CLOSEOUTINTERFACE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 48 "pdt/scanner.l"
{ rejectOL = pdt_lineno; return INOUTREMAP; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 49 "pdt/scanner.l"
{ rejectOL = pdt_lineno; return INOUTOMIT; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 50 "pdt/scanner.l"
return ARROW;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 51 "pdt/scanner.l"
{ rejectOL = pdt_lineno; return DBLANGLE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "pdt/scanner.l"
{ pdtlval.ident = strdup(pdttext);
             	         return IDENTIFIER;
		       }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 58 "pdt/scanner.l"
{
                     char * p;
                     pdt_lineno=strtol(pdttext+1, &p, 0);
                     while(*p != 0 && *p == '"' || *p == ' ' || *p == '\t' || *p == '\n'){
                         p++;
                     }
                     pdt_curfile=strdup(p);
                     p=pdt_curfile+strlen(pdt_curfile)-1;
                     while(p >= pdt_curfile && *p != '"'){
                         *p--=0;
                     }
                     while(p >= pdt_curfile && *p == '"' || *p == ' ' || *p == '\t' || *p == '\n'){
                         *p--=0;
                     }
                     }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 74 "pdt/scanner.l"
{
         pdt_lineno++;
     }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 78 "pdt/scanner.l"
{ }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 79 "pdt/scanner.l"
{ pdt_lineno++; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 80 "pdt/scanner.l"
{ rejectOL = pdt_lineno; return '>'; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 82 "pdt/scanner.l"
{ if(pdt_lineno == rejectOL) REJECT;
                    pdtlval.oline = pdttext;
                    return OTHERLINE;
                  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 87 "pdt/scanner.l"
{ fprintf(stderr, "Illegal character: %c (%d)\n", pdttext[0],
            pdttext[0]);
        }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 92 "pdt/scanner.l"
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
				pdtterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int pdt_amount_of_matched_text = (int) (pdt_cp - pdttext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*pdt_cp = pdt_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( pdt_current_buffer->pdt_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pdtin at a new source and called
			 * pdtlex().  If so, then we have to assure
			 * consistency between pdt_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			pdt_n_chars = pdt_current_buffer->pdt_n_chars;
			pdt_current_buffer->pdt_input_file = pdtin;
			pdt_current_buffer->pdt_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for pdt_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since pdt_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( pdt_c_buf_p <= &pdt_current_buffer->pdt_ch_buf[pdt_n_chars] )
			{ /* This was really a NUL. */
			pdt_state_type pdt_next_state;

			pdt_c_buf_p = pdttext_ptr + pdt_amount_of_matched_text;

			pdt_current_state = pdt_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * pdt_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			pdt_next_state = pdt_try_NUL_trans( pdt_current_state );

			pdt_bp = pdttext_ptr + YY_MORE_ADJ;

			if ( pdt_next_state )
				{
				/* Consume the NUL. */
				pdt_cp = ++pdt_c_buf_p;
				pdt_current_state = pdt_next_state;
				goto pdt_match;
				}

			else
				{
				pdt_cp = pdt_c_buf_p;
				goto pdt_find_action;
				}
			}

		else switch ( pdt_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				pdt_did_buffer_switch_on_eof = 0;

				if ( pdtwrap() )
					{
					/* Note: because we've taken care in
					 * pdt_get_next_buffer() to have set up
					 * pdttext, we can now set up
					 * pdt_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					pdt_c_buf_p = pdttext_ptr + YY_MORE_ADJ;

					pdt_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! pdt_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				pdt_c_buf_p =
					pdttext_ptr + pdt_amount_of_matched_text;

				pdt_current_state = pdt_get_previous_state();

				pdt_cp = pdt_c_buf_p;
				pdt_bp = pdttext_ptr + YY_MORE_ADJ;
				goto pdt_match;

			case EOB_ACT_LAST_MATCH:
				pdt_c_buf_p =
				&pdt_current_buffer->pdt_ch_buf[pdt_n_chars];

				pdt_current_state = pdt_get_previous_state();

				pdt_cp = pdt_c_buf_p;
				pdt_bp = pdttext_ptr + YY_MORE_ADJ;
				goto pdt_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of pdtlex */


/* pdt_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int pdt_get_next_buffer()
	{
	register char *dest = pdt_current_buffer->pdt_ch_buf;
	register char *source = pdttext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( pdt_c_buf_p > &pdt_current_buffer->pdt_ch_buf[pdt_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( pdt_current_buffer->pdt_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( pdt_c_buf_p - pdttext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (pdt_c_buf_p - pdttext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( pdt_current_buffer->pdt_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		pdt_current_buffer->pdt_n_chars = pdt_n_chars = 0;

	else
		{
		int num_to_read =
			pdt_current_buffer->pdt_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = pdt_current_buffer;

			int pdt_c_buf_p_offset =
				(int) (pdt_c_buf_p - b->pdt_ch_buf);

			if ( b->pdt_is_our_buffer )
				{
				int new_size = b->pdt_buf_size * 2;

				if ( new_size <= 0 )
					b->pdt_buf_size += b->pdt_buf_size / 8;
				else
					b->pdt_buf_size *= 2;

				b->pdt_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					pdt_flex_realloc( (void *) b->pdt_ch_buf,
							 b->pdt_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->pdt_ch_buf = 0;

			if ( ! b->pdt_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			pdt_c_buf_p = &b->pdt_ch_buf[pdt_c_buf_p_offset];

			num_to_read = pdt_current_buffer->pdt_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&pdt_current_buffer->pdt_ch_buf[number_to_move]),
			pdt_n_chars, num_to_read );

		pdt_current_buffer->pdt_n_chars = pdt_n_chars;
		}

	if ( pdt_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pdtrestart( pdtin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			pdt_current_buffer->pdt_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	pdt_n_chars += number_to_move;
	pdt_current_buffer->pdt_ch_buf[pdt_n_chars] = YY_END_OF_BUFFER_CHAR;
	pdt_current_buffer->pdt_ch_buf[pdt_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	pdttext_ptr = &pdt_current_buffer->pdt_ch_buf[0];

	return ret_val;
	}


/* pdt_get_previous_state - get the state just before the EOB char was reached */

static pdt_state_type pdt_get_previous_state()
	{
	register pdt_state_type pdt_current_state;
	register char *pdt_cp;

	pdt_current_state = pdt_start;
	pdt_state_ptr = pdt_state_buf;
	*pdt_state_ptr++ = pdt_current_state;

	for ( pdt_cp = pdttext_ptr + YY_MORE_ADJ; pdt_cp < pdt_c_buf_p; ++pdt_cp )
		{
		register YY_CHAR pdt_c = (*pdt_cp ? pdt_ec[YY_SC_TO_UI(*pdt_cp)] : 1);
		while ( pdt_chk[pdt_base[pdt_current_state] + pdt_c] != pdt_current_state )
			{
			pdt_current_state = (int) pdt_def[pdt_current_state];
			if ( pdt_current_state >= 99 )
				pdt_c = pdt_meta[(unsigned int) pdt_c];
			}
		pdt_current_state = pdt_nxt[pdt_base[pdt_current_state] + (unsigned int) pdt_c];
		*pdt_state_ptr++ = pdt_current_state;
		}

	return pdt_current_state;
	}


/* pdt_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = pdt_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static pdt_state_type pdt_try_NUL_trans( pdt_state_type pdt_current_state )
#else
static pdt_state_type pdt_try_NUL_trans( pdt_current_state )
pdt_state_type pdt_current_state;
#endif
	{
	register int pdt_is_jam;

	register YY_CHAR pdt_c = 1;
	while ( pdt_chk[pdt_base[pdt_current_state] + pdt_c] != pdt_current_state )
		{
		pdt_current_state = (int) pdt_def[pdt_current_state];
		if ( pdt_current_state >= 99 )
			pdt_c = pdt_meta[(unsigned int) pdt_c];
		}
	pdt_current_state = pdt_nxt[pdt_base[pdt_current_state] + (unsigned int) pdt_c];
	pdt_is_jam = (pdt_current_state == 98);
	if ( ! pdt_is_jam )
		*pdt_state_ptr++ = pdt_current_state;

	return pdt_is_jam ? 0 : pdt_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void pdtunput( int c, register char *pdt_bp )
#else
static void pdtunput( c, pdt_bp )
int c;
register char *pdt_bp;
#endif
	{
	register char *pdt_cp = pdt_c_buf_p;

	/* undo effects of setting up pdttext */
	*pdt_cp = pdt_hold_char;

	if ( pdt_cp < pdt_current_buffer->pdt_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = pdt_n_chars + 2;
		register char *dest = &pdt_current_buffer->pdt_ch_buf[
					pdt_current_buffer->pdt_buf_size + 2];
		register char *source =
				&pdt_current_buffer->pdt_ch_buf[number_to_move];

		while ( source > pdt_current_buffer->pdt_ch_buf )
			*--dest = *--source;

		pdt_cp += (int) (dest - source);
		pdt_bp += (int) (dest - source);
		pdt_current_buffer->pdt_n_chars =
			pdt_n_chars = pdt_current_buffer->pdt_buf_size;

		if ( pdt_cp < pdt_current_buffer->pdt_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--pdt_cp = (char) c;


	pdttext_ptr = pdt_bp;
	pdt_hold_char = *pdt_cp;
	pdt_c_buf_p = pdt_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int pdtinput()
#else
static int input()
#endif
	{
	int c;

	*pdt_c_buf_p = pdt_hold_char;

	if ( *pdt_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* pdt_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( pdt_c_buf_p < &pdt_current_buffer->pdt_ch_buf[pdt_n_chars] )
			/* This was really a NUL. */
			*pdt_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = pdt_c_buf_p - pdttext_ptr;
			++pdt_c_buf_p;

			switch ( pdt_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because pdt_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pdtrestart( pdtin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( pdtwrap() )
						return EOF;

					if ( ! pdt_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return pdtinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					pdt_c_buf_p = pdttext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) pdt_c_buf_p;	/* cast for 8-bit char's */
	*pdt_c_buf_p = '\0';	/* preserve pdttext */
	pdt_hold_char = *++pdt_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void pdtrestart( FILE *input_file )
#else
void pdtrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! pdt_current_buffer )
		pdt_current_buffer = pdt_create_buffer( pdtin, YY_BUF_SIZE );

	pdt_init_buffer( pdt_current_buffer, input_file );
	pdt_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void pdt_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void pdt_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( pdt_current_buffer == new_buffer )
		return;

	if ( pdt_current_buffer )
		{
		/* Flush out information for old buffer. */
		*pdt_c_buf_p = pdt_hold_char;
		pdt_current_buffer->pdt_buf_pos = pdt_c_buf_p;
		pdt_current_buffer->pdt_n_chars = pdt_n_chars;
		}

	pdt_current_buffer = new_buffer;
	pdt_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (pdtwrap()) processing, but the only time this flag
	 * is looked at is after pdtwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	pdt_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void pdt_load_buffer_state( void )
#else
void pdt_load_buffer_state()
#endif
	{
	pdt_n_chars = pdt_current_buffer->pdt_n_chars;
	pdttext_ptr = pdt_c_buf_p = pdt_current_buffer->pdt_buf_pos;
	pdtin = pdt_current_buffer->pdt_input_file;
	pdt_hold_char = *pdt_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE pdt_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE pdt_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) pdt_flex_alloc( sizeof( struct pdt_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pdt_create_buffer()" );

	b->pdt_buf_size = size;

	/* pdt_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->pdt_ch_buf = (char *) pdt_flex_alloc( b->pdt_buf_size + 2 );
	if ( ! b->pdt_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pdt_create_buffer()" );

	b->pdt_is_our_buffer = 1;

	pdt_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void pdt_delete_buffer( YY_BUFFER_STATE b )
#else
void pdt_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == pdt_current_buffer )
		pdt_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->pdt_is_our_buffer )
		pdt_flex_free( (void *) b->pdt_ch_buf );

	pdt_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void pdt_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void pdt_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	pdt_flush_buffer( b );

	b->pdt_input_file = file;
	b->pdt_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->pdt_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->pdt_is_interactive = 0;
#else
	b->pdt_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void pdt_flush_buffer( YY_BUFFER_STATE b )
#else
void pdt_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->pdt_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->pdt_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->pdt_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->pdt_buf_pos = &b->pdt_ch_buf[0];

	b->pdt_at_bol = 1;
	b->pdt_buffer_status = YY_BUFFER_NEW;

	if ( b == pdt_current_buffer )
		pdt_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE pdt_scan_buffer( char *base, pdt_size_t size )
#else
YY_BUFFER_STATE pdt_scan_buffer( base, size )
char *base;
pdt_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pdt_flex_alloc( sizeof( struct pdt_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pdt_scan_buffer()" );

	b->pdt_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->pdt_buf_pos = b->pdt_ch_buf = base;
	b->pdt_is_our_buffer = 0;
	b->pdt_input_file = 0;
	b->pdt_n_chars = b->pdt_buf_size;
	b->pdt_is_interactive = 0;
	b->pdt_at_bol = 1;
	b->pdt_fill_buffer = 0;
	b->pdt_buffer_status = YY_BUFFER_NEW;

	pdt_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE pdt_scan_string( pdtconst char *pdt_str )
#else
YY_BUFFER_STATE pdt_scan_string( pdt_str )
pdtconst char *pdt_str;
#endif
	{
	int len;
	for ( len = 0; pdt_str[len]; ++len )
		;

	return pdt_scan_bytes( pdt_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE pdt_scan_bytes( pdtconst char *bytes, int len )
#else
YY_BUFFER_STATE pdt_scan_bytes( bytes, len )
pdtconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	pdt_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) pdt_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pdt_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = pdt_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pdt_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->pdt_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void pdt_push_state( int new_state )
#else
static void pdt_push_state( new_state )
int new_state;
#endif
	{
	if ( pdt_start_stack_ptr >= pdt_start_stack_depth )
		{
		pdt_size_t new_size;

		pdt_start_stack_depth += YY_START_STACK_INCR;
		new_size = pdt_start_stack_depth * sizeof( int );

		if ( ! pdt_start_stack )
			pdt_start_stack = (int *) pdt_flex_alloc( new_size );

		else
			pdt_start_stack = (int *) pdt_flex_realloc(
					(void *) pdt_start_stack, new_size );

		if ( ! pdt_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	pdt_start_stack[pdt_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void pdt_pop_state()
	{
	if ( --pdt_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(pdt_start_stack[pdt_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int pdt_top_state()
	{
	return pdt_start_stack[pdt_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void pdt_fatal_error( pdtconst char msg[] )
#else
static void pdt_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine pdtless() so it works in section 3 code. */

#undef pdtless
#define pdtless(n) \
	do \
		{ \
		/* Undo effects of setting up pdttext. */ \
		pdttext[pdtleng] = pdt_hold_char; \
		pdt_c_buf_p = pdttext + n; \
		pdt_hold_char = *pdt_c_buf_p; \
		*pdt_c_buf_p = '\0'; \
		pdtleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef pdttext_ptr
#ifdef YY_USE_PROTOS
static void pdt_flex_strncpy( char *s1, pdtconst char *s2, int n )
#else
static void pdt_flex_strncpy( s1, s2, n )
char *s1;
pdtconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int pdt_flex_strlen( pdtconst char *s )
#else
static int pdt_flex_strlen( s )
pdtconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *pdt_flex_alloc( pdt_size_t size )
#else
static void *pdt_flex_alloc( size )
pdt_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *pdt_flex_realloc( void *ptr, pdt_size_t size )
#else
static void *pdt_flex_realloc( ptr, size )
void *ptr;
pdt_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void pdt_flex_free( void *ptr )
#else
static void pdt_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	pdtlex();
	return 0;
	}
#endif
#line 92 "pdt/scanner.l"

extern "C" {

int pdtwrap()
{
  return 1;
}

}




















