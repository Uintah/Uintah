<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "component.dtd">
<?xml-stylesheet href="component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
-->



<component name="BuildInterpolant" category="FieldsData">
  <overview>
    <authors>
      <author>Peter-Pike Sloan</author>
      <author>David Weinstein</author>
      <author>Michael Callahan</author>
    </authors>
    <summary>
      Build an interpolant field -- a field that says how to project
      the data from one field onto the data of a second field.
    </summary>
    <description>
      <p>
        This module builds an interpolant field which contains data
        about how to interpolate the data from the source field onto
        the geometry of the destination field.  The resulting
        interpolant field can then be used by the <modref package="SCIRun" name="ApplyInterpolant"/>
        module to interpolate the values from a field similar to the
        source field onto the destination field.
      </p>
      <p>
        The source field for BuildInterpolant and <modref package="SCIRun" name="ApplyInterpolant"/>
        must contain the same geometry and data locations.  However
        they do not have to contain the same data values or value
        types.  For instance, a TetVolField of doubles with data at the
        nodes can be passed into the Source port of BuildInterpolant,
        and a TetVolField of Vectors with data also at the nodes and with
        the same mesh can be passed into the source port of
        <modref package="SCIRun" name="ApplyInterpolant"/>.
      </p>
      <p>
        <modref package="SCIRun" name="DirectInterpolate"/> should be used instead of BuildInterpolant
        and <modref package="SCIRun" name="ApplyInterpolant"/> if the Interpolant is not to be reused,
        as it does the same interpolation without building the
        intermediate interpolant field.  This should be used if the
        source field changes much more often than the destination field.
      </p> 
    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <port>
	<name>Source</name>
	<datatype>SCIRun::Field</datatype>
      </port>
      <port>
	<name>Destination</name>
	<datatype>SCIRun::Field</datatype>
      </port>
    </inputs>
    <outputs>
      <port>
	<name>Interpolant</name>
	<datatype>SCIRun::Field</datatype>
      </port>
    </outputs>
  </io>
  <testing>
  </testing>
<nets>
<net id="BuildInterpolant">
<title>BuildInterpolant Regression Test</title>

<p>Build an interpolant from an input field onto a plane using
BuildInterpolant, and then apply the data from the input field back to
the interpolant field.</p>

<p>Note that the same thing could be done by replacing both
BuildInterpolant and <modref package="SCIRun" name="ApplyInterpolant"/> with a <modref package="SCIRun" name="DirectInterpolate"/> module.
ApplyInterpolate was meant primarily to be used in conjunction with
loops and time dependent data, such that the interpolant field could
be computed once and then applied multiple times.</p>

<p>See also <modref package="SCIRun" name="ApplyInterpolant"/>, <modref package="SCIRun" name="DirectInterpolate"/>, <modref package="SCIRun" name="ApplyInterpMatrix"/>.</p>

<p>This network can be found at src/nets/Modules/FieldsData/BuildInterpolant.net.</p>

</net>
</nets>
</component>
