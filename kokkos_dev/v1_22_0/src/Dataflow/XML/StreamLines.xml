<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "component.dtd">
<?xml-stylesheet href="component.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!--
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
-->



<component name="StreamLines" category="Visualization">
  <overview>
    <authors>
      <author>Chris Moulding</author>
      <author>Michael Callahan</author>
    </authors>
    <summary>
      <p>
        The StreamLines module visualizes vector fields by generating
curves that interpolate the flow of vectors in a Field. 
      </p>
    </summary>
    <description>
      <p>
The StreamLines module visualizes vector fields by
generating curves that interpolate the flow of vectors in a Field.
      </p>

<p> The Flow Field input port is the vector field on which the path
intergration of the seed points will be performed.  This may be a
vector field with any volume geometry type.  Surfaces and lower order
fields do not currently work due to numerical error.  The second input
port, Seeds, contains the initial values for which the flow will be
computed.  This may be a field of any type, as just the node positions
are used.  Seeds which are not contained within the flow field are
just discarded.  The module requires use of both field inputs in order
to execute.</p>

<p> The StreamLines module has one output, Streamlines, a CurveMesh,
representing a collection of stream lines computed for the Flow field
given the set of initial seed points.</p>

<p> This module uses one of several similar numeric integration
methods.  They are taken directly from Numerical Analysis by David
Kincaid and Ward Cheney, c1991.  Adams-Bashforth is a Multi-Step
method that offers the fastest performance by reusing existing samples
when possible.  It presents some interesting artifacts on
discontinuous models such that it is easy to visualize where those
discontinuities take place.  Heun is a second order Runge-Kutta
solver, and is sufficient for most smoothly varying fields, such as
linearly interpolated gradient fields over volume elements.  Classic
4th Order Runge-Kutta is presented for reference and provides
excellent results in general.  Adaptive Runge-Kutta-Fehlberg is a 5/6
order solver which provides the best overall results at the cost of
more computation time.  It is also the only adaptive method, meaning
the step size of the algorithm is adjusted dynamically as the stream
moves through the flow field. </p>


<p> All of the computation methods are similar in that they take a
step, (based upon the Step Size indicated) examine the derivative at
that point, and then procede in that new direction.  Adaptive
Runge-Kutta-Fehlberg also determines if a stepsize correction is
necessary. This determination is based upon the Error Tolerance
value. </p>

<p> The StreamLines GUI includes text fields for Error Tolerance, Step
Size, and Maximum Steps. The Error Tolerance text field represents the
margin of error when doing an adaptive calculation of the stream
lines.  Maximum Steps represents the maximum number of iterations.
</p>

<p>The user can specify whether streamlines are computed in negative
and/or, positive directions by changing the Direction radio
buttons. The Color Style options are Constant and Increment, both of
which affect how values are attached to the output field.  By
selecting Constant, the output field will range from zero to the
number of seed points so that every stream line has exactly one
value. The Increment option changes the value of output field such
that they start at zero where the seed point are, and go up by one on
each step away in either direction. </p>

<p> The Filter Colinear Points check box is a postprocess on the
streams.  It passes over the streams and removes all points that are
too close together, as well as points that are colinear.  It is useful
for rendering the streamlines as it greatly simplifies them while
retaining their visual appearance.</p>
    </description>
  </overview>
  <implementation>
  </implementation>
  <io>
    <inputs lastportdynamic="no">
      <port>
        <name>Flow field</name>
        <description>
          <p>
            Flow field is the field to be visualized.  It can be 
     	    2D or 3D and can be structured or unstructured.
	    StreamLines is more effective if Flow field represents the
	    flow present in a field rather than the gradient of a generic
	    field. 
          </p>
        </description>
        <datatype>SCIRun::Field</datatype>
        <componentname>GenField</componentname>
        <componentname>ReadField</componentname>
      </port>
      <port>
        <name>Seeds</name>
        <description>
          <p>
            Seeds is a field whose nodes will be used as seed points, or
            starting points, for the generation of the stream lines.
          </p>
        </description>
        <datatype>SCIRun::Field</datatype>
        <componentname>GenField</componentname>
        <componentname>ReadField</componentname>
      </port>
    </inputs>
    <outputs>
      <port>
        <name>Streamlines</name>
        <description>
          <p>
            Streamlines is a CurveMesh&lt;double&gt;
          </p>
        </description>
        <datatype>SCIRun::Field</datatype>
        <componentname>Render3D</componentname>
        <componentname>WriteGeometry</componentname>
      </port>
    </outputs>
  </io>
  <gui>
    <description>
      <p>
        The GUI for StreamLines allows the user to control the 
        parameters for the advection algorithm (Runge-Kutta-Fehlberg)
        used to extract the streamlines. 
      </p>
    </description>
    <img>../Modules/Visualization/doc/StreamLinesGUI.jpg</img>
    <parameter>
      <widget>Button</widget>
      <label>Execute</label>
      <description>
        <p>
          Sends a request to the scheduler to have this component
          executed.
        </p>
      </description>
    </parameter>
    <parameter>
      <widget>Entry</widget>
      <label>Error Tolerance</label>
      <description>
        <p>
          The value entered here will control the RKF step-size
          variable.  It will adaptively change the step-size based on
          how close the local truncation error is to this value.
        </p>
      </description>
    </parameter>
    <parameter>
      <widget>Entry</widget>
      <label>Step Size</label>
      <description>
        <p>
          The value entered here will provide RKF with the initial
          step size.
        </p>
      </description>
    </parameter>
    <parameter>
      <widget>Entry</widget>
      <label>Maximum Steps</label>
      <description>
        <p>
          The value entered here will be the maximum number of nodes
          allowed in a single stream line (to prevent infinite run
          time). 
        </p>
      </description>
    </parameter>
  </gui>
  <testing>
    <plan>
      <description>
        <p>
        </p>
      </description>
      <step>
        <p>
          nothing yet.
        </p>
      </step>
    </plan>
  </testing>
<nets>
<net id="StreamLines-cellwalk">
<title>StreamLines-cellwalk Regression Test</title>

<p>Test the StreamLine cellwalk code by making a synthetic cell centered
lattice vortex data set and then computing a set of streamlines
through that data set.</p>

<p>This network can be found at src/nets/Modules/Visualization/StreamLines-cellwalk.net.</p>

</net>
<net id="StreamLines-lic">
<title>StreamLines-lic Regression Test</title>

<p>Use the StreamLines module to create a line interval convolution like
visualization of a vector data set.  First the scalar voltages for the
utahtorso-lowres model are loaded in and then the gradient is taken of
that data set.  Then 1000 seeds are randomly picked from inside the
torso.  These are then streamlined and colored according to which seed
they are.  Since the seeds are randomly distributed this results in
a random but unique color per streamline.  Finally all of the 1000
streamlines are displayed as transparent lines along with a reference
torso boundary and the heart model.  For full 3D effect the model should
be rotated interactively.</p>

<p>This network can be found at src/nets/Modules/Visualization/StreamLines-lic.net.</p>

</net>
</nets>
</component>







