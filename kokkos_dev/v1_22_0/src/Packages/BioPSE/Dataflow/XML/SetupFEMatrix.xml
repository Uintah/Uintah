<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE component SYSTEM "../../../../Dataflow/XML/component.dtd">

<!--
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2004 Scientific Computing and Imaging Institute,
   University of Utah.

   License for the specific language governing rights and limitations under
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
-->



<component name="SetupFEMatrix" category="Forward">
  <overview>
    <authors>
      <author>Alexei Samsonov</author>
      <author>Ruth Nicholson Klepfer</author>
    </authors>
    
    <summary>The module sets up a mesh with conductivity tensors and
      Dirichlet boundary conditions specifically for bioelectric field
      problems.
    </summary>
    
    <description>
      <p>Version Date: March 2001</p><p>Version: 1.0</p>

      <p>The module provides basic means for construction of the FE
      matrix with linear elements for bioelectric field problems
      (discretization of Poisson equation for volume conductor
      problem). The input field should have properties with lookup
      names that correspondend to the bioelectric field problem. The
      module conventions appear below:</p>
      
      <orderedlist>
	<listitem>
	  <p>The Field containing a mesh should be a TetVolField(char) type,
	  which contains indices to the property 'table'; actual values of the 
	  conductivity tensors, optimizing
	  storage.</p>
	</listitem>
	<listitem>
	  <p>The property of the conductivity mesh name 'table' should
	  have the associated data object Array1(Tensor) type. Any
	  lookup into the table is done by dereferencing indices of
	  conductivity mesh, the module performs any lookup into the table.</p>
	</listitem>
	<listitem>
	  <p>Dirichlet boundary conditions, if any, should be
	  represented as a property with the name "dirichlet" and be
	  of a vector(pair(int, double)) type, where "int" field
	  corresponds to node index, and "double" field is the value
	  of potential at the node.</p>
	</listitem>
      </orderedlist>
      
      <note>
	<p>BioPSE::Algorithm::BuildFEMatrix::build_FEMatrix() performs
	the actual computation of the matrix. Other modules or any
	other code may use the algorithm for other kinds of problems
	involving discretization of the Poisson equation in 3D by
	linear finite elements.</p>
      </note>
      
      <developer>
	<p>The discretization of the Poisson equation on the supplied
	mesh is performed by linear finite elements using Galerkin
	approach.</p>
      </developer>
    </description>
  </overview>
  <io>
    <inputs lastportdynamic="no">
      <!-- one of (device port file) -->
      <port>
	<name>Mesh</name>
	<description>
	  <p>Takes a handle to Field object containing properties
	  described in overview section</p>
	</description>
	<datatype>SCIRun::Field</datatype>
      </port>
    </inputs>
    <outputs>
      <!-- one of (device port file) -->
      <port>
	<name>Stiffness Matrix</name>
	<description>
	  <p>Sends a handle to the sparse matrix obtained from
	  discretization of the problem by finite elements</p>
	  <note>
	    <p>The handle is to base class of SparseRowMatrix, namely,
	    Matrix</p>
	  </note>
	</description>
	<datatype>SCIRun::Matrix</datatype>
      </port>
    </outputs>
  </io>
  <gui>
    <description>
      <p>The SetupFEMatrix GUI contains three elements.  </p>
    </description>
    <parameter>
      <widget>Entry</widget>
      <datatype>Integer</datatype>
      <label>Number of Threads</label>
      <description>
	<p></p>
      </description>
    </parameter>
    <parameter>
      <widget>Check Button</widget>
      <datatype>N/A</datatype>
      <label>Use Conductivities</label>
      <description>
	<p>
          The "Use Conductivities" box tells the module to look up the
          conductivity for each element and to use that information
          when constructing the stiffness matrices.  If it is not
          checked, the module will use the identity matrix for each
          element instead (i.e. what was div(sigma x grad(phi)) turns
          into div(grad(phi))).  This is useful for demonstrating the
          effects of volumetric inhomogeneities on the electric field.
          And in practice, it's also a useful debugging tools -- you
          can immediately see if a solution that isn't converging or
          is giving strange results is getting screwed up because of
          bad conductivity values or because of something else
          (e.g. something is wrong with the mesh).
        </p>
      </description>
    </parameter>
    <parameter>
      <widget>Check Button</widget>
      <datatype>N/A</datatype>
      <label>Use Conductivity Basis Matrices</label>
      <description>
	<p>
          The "Use Conductivity Basis Matrices" is just an efficiency
          option for the case where the user wants to experiment with
          varying the conductivity for some of the materials.  Note:
          it only works with isotropic materials, and when we have an
          indexed table of Tensors (i.e. a Field&lt;int> with a
          conductivity_table Property, rather than a Field&lt;Tensor>
          where each element has a unique Tensor).  This option will
          precompute a decomposition of A into:

          A = sigma_1 x A'_1 + sigma_2 x A'_2 + ... sigma_N x A'_N 

          where the A'_n matrices are the same size and structure (in
          the sparse matrix sense) as A, but just contain
          contributions from elements of material type n.  The sigma_n
          values are just the isotropic conductivities of the
          different materials.  If this box is checked, we build this
          decomposition.  Then, when a new Field comes in, the module
          will check to make sure that only the conductivity_table has
          changed, and will regenerate A by adding together weighted
          contributions from the basis matrices, A'_n.  In practice
          this approach is extremely useful for the parameterized
          conductivity search application that's implement in
          Packages/BioPSE/nets/conductivity-search.net
        </p>
      </description>
    </parameter>
  </gui>
</component>

