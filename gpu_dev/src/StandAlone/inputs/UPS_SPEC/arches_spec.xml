<?xml version='1.0' encoding='ISO-8859-1' ?>
<Uintah_Include>

  <Wasatch                             spec="OPTIONAL NO_DATA" >
    <include href="wasatch_spec.xml" section="Wasatch"/>
  </Wasatch>

  <CFD>

    <ARCHES                             spec="OPTIONAL NO_DATA" >

      <new_BC_on_restart                spec="OPTIONAL NO_DATA" />
      <turnonMixedModel                 spec="OPTIONAL BOOLEAN" /> <!-- Move to Properties? not sure what this model is-->
      <recompileTaskgraph               spec="OPTIONAL BOOLEAN" />

      <VarID                            spec="OPTIONAL NO_DATA"> <!-- matches variables to specific CFD roles --> 
        <var                            spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="role REQUIRED STRING 'temperature, density, enthalpy, mixture_fraction, 
                                                                          co2, h2o, soot, specific_heat'"/>
      </VarID>

      <PropertyModelsV2                 spec="OPTIONAL NO_DATA">
        <model                          spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="type REQUIRED STRING 'wall_heatflux_variable'">

          <frequency                    spec="OPTIONAL INTEGER 'positive'"
                                        need_applies_to="type wall_heatflux_variable"/> <!-- How often should the fluxes be computed (frequency = every N timesteps). 
                                                                                             Otherwise it just copies old fluxes forward. Default = 1. -->

        </model>
      </PropertyModelsV2>
      <PropertyModels                   spec="OPTIONAL NO_DATA" >
        <model                          spec="MULTIPLE NO_DATA" 
                                        attribute1="label REQUIRED STRING"
                                        attribute2="type REQUIRED STRING 'cc_constant, fx_constant, 
                                                                          laminar_pr, 
                                                                          extent_rxn, tab_strip_factor, 
                                                                          particle_absorption_coefficient, 
                                                                          empirical_soot, 
                                                                          algebraic_scalar_diss,
                                                                          scalsim_variance, 
                                                                          heat_loss,
                                                                          norm_scalar_var,
                                                                          scalar_diss, 
                                                                          radiation_properties'">

          <initialization               spec="REQUIRED NO_DATA"
                                        attribute1="type REQUIRED STRING 'constant, gaussian'">

            <!-- Constant initialization -->
            <constant                   spec="REQUIRED DOUBLE" need_applies_to="type constant"/>

            <!-- gaussian initialization --> 
            <!-- computes: y = a*exp( -1 * (x-b)^2/(2c^2) ) + shift --> 
            <!-- a = amplitude, b = center, c = std --> 
            <direction                  spec="REQUIRED STRING 'x,y,z,X,Y,Z'" need_applies_to="type gaussian"/> <!-- direction of the gaussian --> 
            <amplitude                  spec="REQUIRED DOUBLE" need_applies_to="type gaussian"/>               <!-- height of the gaussian --> 
            <center                     spec="REQUIRED DOUBLE" need_applies_to="type gaussian"/>               <!-- center of the gaussian --> 
            <std                        spec="REQUIRED DOUBLE" need_applies_to="type gaussian"/>               <!-- width of the gaussian --> 
            <shift                      spec="OPTIONAL DOUBLE" need_applies_to="type gaussian"/>               <!-- shift the gaussian by a constant --> 

          </initialization>


          <!-- constant property model and scalar dissipation rate model --> 
          <constant                     spec="OPTIONAL DOUBLE"
                                        need_applies_to="type cc_constant, scalar_diss"/>

          <!-- extent of reaction model --> 
          <scalar_label                 spec="OPTIONAL STRING"/>
          <fuel_mass_fraction           spec="OPTIONAL DOUBLE"/>

          <!-- scalar dissipation rate model --> 
          <constant_diss                spec="OPTIONAL NO_DATA"/>

          <!-- algebraic scalar dissipation rate model --> 
          <mixture_fraction_label       spec="REQUIRED STRING"
                                        need_applies_to="type algebraic_scalar_diss, norm_scalar_var"/>
          <turbulent_Sc                 spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type algebraic_scalar_diss"/>
          <D                            spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type algebraic_scalar_diss, scalar_diss"/>
          <!-- scalar dissipation model for 2-eqn -->   
          <!-- D                        spec above -->
          <grad_mixfrac2_label          spec="REQUIRED STRING"
                                        need_applies_to="type scalar_diss"/>
                                        

          <!-- laminar pr --> 
          <atm_pressure                 spec="OPTIONAL DOUBLE"/>
          <mix_frac_label               spec="OPTIONAL STRING"/>
          <D                            spec="OPTIONAL DOUBLE"/>

          <fuel                         spec="OPTIONAL NO_DATA">
            <!-- laminar pr --> 
            <molar_mass                 spec="OPTIONAL DOUBLE 'positive'"/>
            <critical_pressure          spec="OPTIONAL DOUBLE 'positive'"/>
            <critical_temperature       spec="OPTIONAL DOUBLE 'positive'"/>
            <dipole_moment              spec="OPTIONAL DOUBLE 'positive'"/>
            <viscosity                  spec="OPTIONAL DOUBLE 'positive'"/>
          </fuel>
          <oxidizer                     spec="OPTIONAL NO_DATA">
            <!-- laminar pr --> 
            <molar_mass                 spec="OPTIONAL DOUBLE 'positive'"/>
            <critical_temperature       spec="OPTIONAL DOUBLE 'positive'"/>
            <critical_pressure          spec="OPTIONAL DOUBLE 'positive'"/>
            <dipole_moment              spec="OPTIONAL DOUBLE 'positive'"/>
            <viscosity                  spec="OPTIONAL DOUBLE 'positive'"/>
          </oxidizer>

          <!-- Tabulated stripping factor --> 
          <X                            spec="OPTIONAL DOUBLE 'positive'"/>
          <Y                            spec="OPTIONAL DOUBLE 'positive'"/>
          <co2_label                    spec="OPTIONAL STRING 'co2IN, CO2'"/>
          <ch4_label                    spec="OPTIONAL STRING 'ch4IN, CH4'"/>
          <small                        spec="OPTIONAL DOUBLE 'positive'"/>

          <!-- Emperical soot --> 
          <carbon_content_fuel          spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- carbon content, mass of carbon atoms/mass of fuel --> 
          <carbon_content_ox            spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- carbon content, mass of carbon atoms/mass of oxidizer --> 
          <opl                          spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- make sure that you use the same value as in the radiation properties if appropriate --> 
          <C1                           spec="OPTIONAL DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- default of 0.1, valid values range between 0-0.2 (see Hottel & Sarofim, 1978) --> 
          <E_cr                         spec="OPTIONAL DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- Critical equivilence ratio, default 1.0 --> 
          <E_inf                        spec="OPTIONAL DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- Equivilence ratio at infinity, default = 2*E_cr --> 
          <E_st                         spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- Equivilence ratio at stoich --> 
          <soot_density                 spec="OPTIONAL DOUBLE 'positive'"
                                        need_applies_to="type empirical_soot"/> <!-- default of 1950.0 --> 
          <density_label                spec="OPTIONAL STRING"
                                        need_applies_to="type empirical_soot, scalsim_variance"/> <!-- default of "density" --> 
          <temperature_label            spec="OPTIONAL STRING"
                                        need_applies_to="type empirical_soot"/> <!-- default of "temperature" --> 
          <absorption_label             spec="OPTIONAL STRING"
                                        need_applies_to="type empirical_soot"/> <!-- default of "absorpIN" --> 
          <mixture_fraction_label       spec="OPTIONAL STRING"
                                        need_applies_to="type empirical_soot, scalsim_variance"/> <!-- default of "mixture_fraction" --> 

          <!-- Heat loss --> 
          <enthalpy_label               spec="REQUIRED STRING"
                                        need_applies_to="type heat_loss"/>  <!-- point to the enthalpy transport equation... optional because you can choose constant value--> 
          <adiabatic_enthalpy_label     spec="OPTIONAL STRING"
                                        need_applies_to="type heat_loss"/>  <!-- point to the tabulated adiabatic enthalpy, default = "adiabaticenthalpy" --> 
          <sensible_enthalpy_label      spec="OPTIONAL STRING"
                                        need_applies_to="type heat_loss"/>  <!-- point to the tabulated sensible enthalpy, default = "sensibleenthalpy" --> 
          <hl_bounds                    spec="OPTIONAL NO_DATA" 
                                        attribute1="low REQUIRED DOUBLE"
                                        attribute2="high REQUIRED DOUBLE"
                                        need_applies_to="type heat_loss"/>  <!-- bounds on heat loss.  default = [-1,1]. NOTE: when using ClassicTable, the bounds are 
                                                                                 automatically set from the table itself so there is no need to use this option unless
                                                                                 you are interested in overriding the table bounds. Note that the table doesn't do well 
                                                                                 when extrapolating outside the limits of any IV. --> 
          <noisy_hl_warning             spec="OPTIONAL NO_DATA"
                                        need_applies_to="type heat_loss"/>  <!-- warn when heat loss is exceeded --> 
          <constant_heat_loss           spec="OPTIONAL NO_DATA"
                                        need_applies_to="type heat_loss"/>  <!-- set heat loss to a static constant.  Uses the intialization value (or field).
                                                                                 Note that you can save the actual computed heat loss by saving out: "*_actual", where * = property label 
                                                                                 you assigned this model. This allows you to see the value of heat loss as computed from enthalpy without
                                                                                 actually using it. Note also that if you are after a constant heat loss and don't care to know the value 
                                                                                 as computed from enthalpy, then you are better off just using the cc_constant model. --> 
          <use_Ha_lookup                spec="OPTIONAL BOOLEAN" 
                                        need_applies_to="type heat_loss"/>  <!-- Rather than compute adiabatic enthalpy from the mixture fractions, lookup from the table the 
                                                                                 adiabatic enthalpy. Note this will be slower than the default --> 

          <!-- Scale Similarity Variance --> 
          <!-- mixture_fraction_label   spec above --> 
          <!-- density_label            spec above --> 
          <variance_coefficient         spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type scalsim_variance"/> <!-- Multiplier (Cf) on the variance, var = Cf * (filter(z^2)- filter(z)^2) --> 

          <filter_width                 spec="OPTIONAL INTEGER" 
                                        need_applies_to="type scalsim_variance"/> <!-- Test filter width in # of cells. Default: 3 --> 
          <filter_type                  spec="OPTIONAL STRING 'moin98, box'"
                                        need_applies_to="type scalsim_variance"/> <!-- Filter type. See Filter.h. Default: moin98 --> 
                                        
          <!-- Normalized Scalar Variance for use with transport eqn models -->                              
          <!-- mixture_fraction_label    spec above -->
          <second_moment_label          spec="REQUIRED STRING"
                                        need_applies_to="type norm_scalar_var"/>
          <Clip spec="OPTIONAL BOOLEAN" need_applies_to="type norm_scalar_var"/>                              

          <!-- Radiation Properties -->
          <!-- NOTE: The property label (ie, the total abs coeff) cannot be abskg OR abskp as these names are used as defaults by the calculator -->
          <calculator                   spec="REQUIRED NO_DATA" 
                                        attribute1="type REQUIRED STRING 'constant, burns_christon, radprops, hottel_sarofim'"
                                        need_applies_to="type radiation_properties">

            <abskg                        spec="REQUIRED NO_DATA" 
                                          attribute1="label REQUIRED STRING"/> <!-- the name you want to give the abskg (gas only) variable.  Default value is abskg. -->
            <temperature                  spec="OPTIONAL NO_DATA"
                                          attribute1="label REQUIRED STRING"/> <!-- The label (table) name of temperature -->
            <!-- RadiationProperties: burns christon -->
            <min                          spec="OPTIONAL VECTOR 'positive'" need_applies_to="type burns_christon" />
            <max                          spec="OPTIONAL VECTOR 'positive'" need_applies_to="type burns_christon" />
            <!-- RadiationProperties: constant -->
            <abskg_value                  spec="REQUIRED DOUBLE" need_applies_to="type constant" />
            <!-- RadiationProperties: rad props -->
            <grey_gas                     spec="OPTIONAL NO_DATA" need_applies_to="type radprops">
              <inputfile                  spec="REQUIRED STRING"/> <!-- the input file as generated by RadProps -->   
              <mix_mol_w_label            spec="OPTIONAL STRING"/> <!-- default is "mixture_molecular_weight" --> 
            </grey_gas>
            <particles                    spec="OPTIONAL NO_DATA" 
                                          attribute1="type REQUIRED STRING"> <!-- The name of the abskp variable (most likely from a property model) --> 
            <abskp                        spec="OPTIONAL NO_DATA" 
                                          attribute1="label REQUIRED STRING"/> <!-- The name of the abskp variable (most likely from a property model) --> 
              <part_temp_label            spec="REQUIRED STRING"                                />    <!--base label used for particle temp in DQMOM-->                      
              <part_size_label            spec="REQUIRED STRING"                                />    <!--base label used for particle size in DQMOM-->                     
              <model_type                 spec="REQUIRED STRING 'planck, rossland'" need_applies_to="type coal constantCIF"/> <!-- Type of absorption coefficient model--> 
              <complex_ir_real            spec="REQUIRED DOUBLE 'positive'" need_applies_to="type constantCIF"/> <!-- Real part of the complex index of refraction --> 
              <complex_ir_imag            spec="REQUIRED DOUBLE 'negative'" need_applies_to="type constantCIF"/> <!-- Imaginary part of the complex index of refraction --> 
              <const_asymmFact            spec="OPTIONAL DOUBLE " need_applies_to="type constantCIF"/> <!-- assymetry parameter used  for scattering --> 
              <Qabs                       spec="OPTIONAL DOUBLE 'positive'" need_applies_to="type basic"/> <!-- fudge parameter for partcle absorption coefficient model "basic" default is 0.8 tested for SUFCO coal --> 
              <radiateAtGasTemp           spec="OPTIONAL BOOLEAN"/> <!-- forces particles and gas temperatures to be the same, in terms of radiation --> 

            </particles>
            <!-- RadiationProperties: Hottel Sarofim -->
            <opl                          spec="REQUIRED DOUBLE 'positive'" need_applies_to="type hottel_sarofim"/> <!-- Optical Path Length --> 
            <co2                          spec="OPTIONAL NO_DATA" 
                                          attribute1="label REQUIRED STRING"
                                          need_applies_to="type hottel_sarofim"/> <!-- Default = CO2 --> 
            <h2o                          spec="OPTIONAL NO_DATA" 
                                          attribute1="label REQUIRED STRING"
                                          need_applies_to="type hottel_sarofim"/> <!-- Default = H2O --> 
            <soot                         spec="OPTIONAL NO_DATA" 
                                          attribute1="label REQUIRED STRING"
                                          need_applies_to="type hottel_sarofim"/> <!-- Default = soot --> 
          </calculator>
                                          
        </model>
      </PropertyModels>

      <EfficiencyCalculator             spec="OPTIONAL NO_DATA">

        <calculator                     spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="type REQUIRED STRING 'combustion_efficiency, mass_balance'">

          <mixture_fraction             spec="REQUIRED NO_DATA"
                                        attribute1="mf_label_1 REQUIRED STRING"
                                        attribute2="mf_label_2 OPTIONAL STRING"
                                        attribute3="N          REQUIRED INTEGER 'positive'"
                                        need_applies_to="type combustion_efficiency"/>
          <phi_label                    spec="REQUIRED STRING"
                                        need_applies_to="type combustion_efficiency"/>
          <phi_at_feq1                  spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type combustion_efficiency"/>

          <scalar                       spec="OPTIONAL NO_DATA" 
                                        attribute1="label REQUIRED STRING"
                                        need_applies_to="type mass_balance"/>   <!-- computes the balance on eta.  If not used, it computes the total mass balance --> 
          <one_minus_scalar             spec="OPTIONAL NO_DATA"   
                                        need_applies_to="type mass_balance"/>   <!-- computes the balance on (1-eta) where eta is the scalar rather than on eta --> 
          <source                       spec="OPTIONAL NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        need_applies_to="type mass_balance"/>   <!-- consider a mass source term in the balance --> 

                                     

        </calculator>

      </EfficiencyCalculator>

      <!-- Gobal Information for eulerian particle methods -->
      <EulerianParticles                   spec="OPTIONAL NO_DATA">
        <ParticleVariables                 spec="OPTIONAL NO_DATA">
          <variable                        spec="MULTIPLE NO_DATA"
                                           attribute1="role REQUIRED STRING 'raw_coal, 
                                                                             char, 
                                                                             size, 
                                                                             density, 
                                                                             uvel, vvel, wvel, 
                                                                             enthalpy, 
                                                                             temperature, 
                                                                             dTdt, 
                                                                             total_number_density'"
                                           attribute2="label REQUIRED STRING"/>
          
        </ParticleVariables>
      </EulerianParticles>

      <!-- Coal specifics -->
      <Coal                             spec="OPTIONAL NO_DATA">

        <!-- Coal Properties -->
        <Properties                     spec="REQUIRED NO_DATA">
          <diameter_distribution        spec="REQUIRED MULTIPLE_DOUBLES" />    <!-- Initial particle size distribution in particle diameter --> 
          <small_weights                spec="OPTIONAL MULTIPLE_DOUBLES" />    <!-- small value for each scaled weight (used in temperature calculation --> 
          <density                      spec="REQUIRED DOUBLE" />              <!-- Initial coal density -->
          <temperature                  spec="REQUIRED DOUBLE" />              <!-- Initial coal temperature -->
          <ultimate_analysis            spec="REQUIRED NO_DATA">               <!-- Ultimate analysis. Specified as mass fractions. -->
            <C                          spec="REQUIRED DOUBLE"/>            
            <H                          spec="REQUIRED DOUBLE"/>            
            <O                          spec="REQUIRED DOUBLE"/>            
            <N                          spec="REQUIRED DOUBLE"/>            
            <S                          spec="REQUIRED DOUBLE"/>            
            <H2O                        spec="REQUIRED DOUBLE"/>            
            <CHAR                       spec="REQUIRED DOUBLE"/>            
            <ASH                        spec="REQUIRED DOUBLE"/>            
          </ultimate_analysis>
          
          <!-- as received mass fractions C+H+O+N+S+char+ash+moisture=1 -->
          <ksi                            spec="OPTIONAL DOUBLE" /> <!-- Fraction of heat released by char oxidation that goes to the particle, default = 1.0 -->
          <raw_coal_enthalpy              spec="REQUIRED DOUBLE" /> <!-- Enthalpy of formation for raw coal at 298.15 K -->
          <char_enthalpy                  spec="REQUIRED DOUBLE" /> <!-- Enthalpy of formation for char at 298.15 K -->
          <ash_enthalpy                   spec="REQUIRED DOUBLE" /> <!-- Enthalpy of formation for ash at 298.15 K -->
          <Yamamoto_coefficients          spec="OPTIONAL MULTIPLE_DOUBLES" /> 
          <!-- Yamamto 1 step rate coefficients in the following order:  -->
          <!-- Av[1/s], Ev[J/mole], Yv[-], c0[-], c1[-], c2[-] c3[-], c4[-], c5[-]  -->
          <KobayashiSarofim_coefficients          spec="OPTIONAL MULTIPLE_DOUBLES" />
          <!-- KobayashiSarofim 2 step rate coefficients in the following order:  -->
          <!-- A1[1/s], A2[1/s], E1[kcal/kmol], E2[kcal/kmol], Y1[volatile fraction from prox analysis], Y2[fraction devolatilzed at higher temperatures]  --> 
          <RichardsFletcher_coefficients          spec="OPTIONAL MULTIPLE_DOUBLES" />
          <!-- RichardsFletcher 2 step rate coefficients in the following order:  -->
          <!-- A1[1/s], A2[1/s], E1[kcal/kmol], E2[kcal/kmol], Y1[volatile fraction from prox analysis], Y2[fraction devolatilzed at higher temperatures], c0_1-c5_1, c0_2-c5_2  --> 
          <BTDevol                        spec="OPTIONAL NO_DATA">
            <v_hiT                        spec="REQUIRED DOUBLE" />
            <Tig                          spec="REQUIRED DOUBLE" />
            <c                            spec="REQUIRED DOUBLE" />
            <A                            spec="REQUIRED DOUBLE" />
            <Ta                           spec="REQUIRED DOUBLE" />
            <d                            spec="REQUIRED DOUBLE" />
          </BTDevol>
          <Shaddix_char_coefficients      spec="OPTIONAL MULTIPLE_DOUBLES" /> 
          <!-- Shaddix char oxidation coefficients in the following order:  -->
          <!-- D1[O2/CO2 m2/s], D2[O2/H2O m2/s], D3[O2/CO2 m2/s], T0[K], As[mol/s.m^2.atm^n], Es[J/mol] n[], HF_CO2[J/mol], HF_CO[J/mol]  -->

          <optics                       spec="OPTIONAL NO_DATA" >
            <RawCoal_real            spec="REQUIRED DOUBLE 'positive'"/> <!-- Real part of the complex index of refraction --> 
            <RawCoal_imag            spec="REQUIRED DOUBLE 'negative'"/> <!-- Imaginary part of the complex index of refraction --> 
            <Ash_real                spec="REQUIRED DOUBLE 'positive'"/> <!-- This is a range, the high and low applies to the real component --> 
            <Ash_imag                spec="REQUIRED DOUBLE 'negative'"/>  
          </optics>

        </Properties>

        <!-- Helper python information -->
        <Python                         spec="OPTIONAL NO_DATA">
          <HHV                            spec="OPTIONAL DOUBLE" /> <!-- used in python script only -->
          <use_HHV_est                    spec="OPTIONAL STRING" /> <!-- used in python script only -->
          <compute_scaling_const          spec="OPTIONAL STRING" /> <!-- used in python script only -->
          <particle_weights               spec="OPTIONAL MULTIPLE_DOUBLES" /> <!-- used in python script only -->
          <particle_temperature           spec="OPTIONAL DOUBLE" /> <!-- used in python script only -->
        </Python>

      </Coal>
      
      <Turbulence                       spec="OPTIONAL NO_DATA"
                                        attribute1="model REQUIRED STRING 'compdynamicprocedure, dynamicprocedure, 
                                                                           smagorinsky, none'" >

        <!--smagorinsky -->
        <cf                             spec="OPTIONAL DOUBLE 'positive'" />  
        <fac_mesh                       spec="OPTIONAL DOUBLE 'positive'" />
        <filterl                        spec="OPTIONAL DOUBLE 'positive'" />

        <!--dyn. smagorinsky -->
        <filter_cs_squared              spec="OPTIONAL BOOLEAN" /> <!-- filter the dynamic Cs constant --> 


        <!-- setup filter for dynamic filtering --> 
        <ignore_filter_bc               spec="OPTIONAL NO_DATA"/> <!-- Don't adjust filter weights near boundaries. Default: FALSE --> 
        <filter_width                   spec="OPTIONAL INTEGER"/> <!-- Test filter width in # of cells. Default: 3 --> 
        <filter_type                    spec="OPTIONAL STRING 'moin98, box'"/> <!-- Filter type. See Filter.h. Default: moin98 [for historic reasons] --> 

      </Turbulence>

      <Properties                       spec="REQUIRED NO_DATA"
                                          children1="ONE_OF(CHILD TabProps, ClassicTable, ColdFlow, ConstantProps)" >

        <filter_drhodt                  spec="OPTIONAL BOOLEAN" />
        <first_order_drhodt             spec="OPTIONAL BOOLEAN" />
        <inverse_density_average        spec="OPTIONAL BOOLEAN" />

        <ColdFlow                       spec="OPTIONAL NO_DATA" >
          <ignore_iv_density_check      spec="OPTIONAL NO_DATA"/>  <!-- don't force an algorithmic change on the transported iv's to use density guess --> 
          <mixture_fraction_label       spec="REQUIRED STRING"/>
          <temperature_label_name       spec="OPTIONAL STRING"/>   <!-- The string label identifier from the table for temperature --> 
          <Stream_1                     spec="MULTIPLE NO_DATA">
            <density                    spec="REQUIRED DOUBLE 'positive'"/>
            <temperature                spec="REQUIRED DOUBLE 'positive'"/>
            <species                    spec="MULTIPLE NO_DATA" 
                                        attribute1="label REQUIRED STRING"
                                        attribute2="value REQUIRED DOUBLE 'positive'"/>
          </Stream_1>
          <Stream_2                     spec="MULTIPLE NO_DATA">
            <density                    spec="REQUIRED DOUBLE 'positive'"/>
            <temperature                spec="REQUIRED DOUBLE 'positive'"/>
            <species                    spec="MULTIPLE NO_DATA" 
                                        attribute1="label REQUIRED STRING"
                                        attribute2="value REQUIRED DOUBLE 'positive'"/>
          </Stream_2>
          <post_mix                     spec="OPTIONAL NO_DATA">
            <!-- Notes on post stream mixing: 
              1) Dependent variables that are not specified are assumed to be ZERO (even density)
              2) If specifying density, specify the INVERSE value 
              3) If specifying mixture molecular weight, specify the INVERSE value 
              4) Dont forget to set thermodynamic properties if you are computing heat loss. 
            --> 
            <stream                     spec="OPTIONAL NO_DATA"
                                        attribute1="transport_label REQUIRED STRING">
              <var                      spec="MULTIPLE NO_DATA"   
                                        attribute1="label REQUIRED STRING" 
                                        attribute2="value REQUIRED DOUBLE"/>
            </stream> 
          </post_mix>
          <!-- NOTE on the REFERENCE DENSITY --> 
          <!-- The reference density sets the fluid density for the relative buoyant force.  Specifically, the 
          buoyant term on the RHS of the momentum equation is computed as: F = (rho_ref - rho_local)*g 
          In general, one would choose the heaviest stream as the reference state, but one is encouraged to think 
          carefully about this --> 
          <reference_density            spec="OPTIONAL NO_DATA"
                                        attribute1="value REQUIRED DOUBLE 'positive'"/>
        </ColdFlow>

        <TabProps                       spec="OPTIONAL NO_DATA" >
          <ignore_iv_density_check      spec="OPTIONAL NO_DATA"/>  <!-- don't force an algorithmic change on the transported iv's to use density guess --> 
          <inputfile                    spec="REQUIRED STRING" /> <!-- table to be opened --> 
          <cold_flow                    spec="OPTIONAL BOOLEAN"/> <!-- used for simple stream mixing (no rxn) --> 
          <noisy_hl_warning             spec="OPTIONAL NO_DATA"/> <!-- warn when heat loss is clipped to bounds --> 
          <lower_hl_bound               spec="OPTIONAL DOUBLE"/> <!-- In the property table, the lower bound for heat loss.  default = -1 --> 
          <upper_hl_bound               spec="OPTIONAL DOUBLE"/> <!-- In the property table, the upper bound for heat loss.  default = +1 --> 
          <coal                         spec="OPTIONAL NO_DATA" 
                                        attribute1="fp_label REQUIRED STRING"     
                                        attribute2="eta_label REQUIRED STRING"/> <!-- Attributes must match the transported IVs specified in the TransportEqn node --> 
        </TabProps>

        <ClassicTable                   spec="OPTIONAL NO_DATA">
          <ignore_iv_density_check      spec="OPTIONAL NO_DATA"/>  <!-- don't force an algorithmic change on the transported iv's to use density guess --> 
          <inputfile                    spec="REQUIRED STRING" />  <!-- table to be opened --> 
          <cold_flow                    spec="OPTIONAL BOOLEAN"/>  <!-- force adiabatic condition --> 
          <noisy_hl_warning             spec="OPTIONAL NO_DATA"/>  <!-- warn when heat loss is clipped to bounds --> 
          <mf_for_hl                    spec="OPTIONAL NO_DATA"/>  <!-- DEVELOPER SWITCH --> 
          <enthalpy_label               spec="OPTIONAL STRING" />  <!-- Pointer to the enthalpy equation.  default = enthalpySP -->
          <temperature_label_name       spec="OPTIONAL STRING"/>   <!-- The string label identifier from the table for temperature --> 

          <!-- IV specs for various table types --> 
          <!-- Single mixture (or other indep. var.) fraction table --> 
          <single_iv                    spec="OPTIONAL NO_DATA"
                                        attribute1="iv_label REQUIRED STRING"/>
          <!-- IV ordering for table write: (1) mixture fraction (2) scalar variance (3) heat loss --> 
          <standard_flamelet            spec="OPTIONAL NO_DATA"
                                        attribute1="f_label   REQUIRED STRING"
                                        attribute2="var_label REQUIRED STRING"
                                        attribute3="hl_label  REQUIRED STRING"/>
          <!-- IV ordering for table write: (1) mixture fraction (2) scalar variance (3) heat loss --> 
          <standard_equilibrium         spec="OPTIONAL NO_DATA"
                                        attribute1="f_label   REQUIRED STRING"
                                        attribute2="var_label REQUIRED STRING"
                                        attribute3="hl_label  REQUIRED STRING"/>
          <!-- IV ordering for table write: (1) eta (2) heat loss (3) f --> 
          <coal                         spec="OPTIONAL NO_DATA" 
                                        attribute1="fp_label REQUIRED STRING"     
                                        attribute2="eta_label REQUIRED STRING"
                                        attribute3="hl_label REQUIRED STRING"/> 
          <rcce                         spec="OPTIONAL NO_DATA"
                                        attribute1="fp_label REQUIRED STRING"
                                        attribute2="eta_label REQUIRED STRING"
                                        attribute3="hl_label REQUIRED STRING"/> 
          <rcce_fp                      spec="OPTIONAL NO_DATA"
                                        attribute1="xi_label REQUIRED STRING"
                                        attribute2="hl_label REQUIRED STRING"
                                        attribute3="fp_label REQUIRED STRING"/> 
          <rcce_eta                     spec="OPTIONAL NO_DATA"
                                        attribute1="xi_label REQUIRED STRING"
                                        attribute2="eta_label REQUIRED STRING"
                                        attribute3="hl_label REQUIRED STRING"/> 
          <inert_mixing                 spec="OPTIONAL NO_DATA"
                                        attribute1="fp_label REQUIRED STRING"
                                        attribute2="eta_label REQUIRED STRING"
                                        attribute3="inert_label REQUIRED STRING"
                                        attribute4="hl_label REQUIRED STRING"/> 
          <!-- IV ordering for table write: (1) mixture fraction (2) rxn extent --> 
          <acidbase                     spec="OPTIONAL NO_DATA" 
                                        attribute1="f_label REQUIRED STRING"     
                                        attribute2="extent_label REQUIRED STRING"/> 

          <mixfrac_with_heatloss        spec="OPTIONAL NO_DATA"
                                        attribute1="f_label REQUIRED STRING"
                                        attribute2="hl_label REQUIRED STRING"/>

          <post_mix                     spec="OPTIONAL NO_DATA">
            <!-- Notes on post stream mixing: 
              1) Dependent variables that are not specified are assumed to be ZERO (even density)
              2) If specifying density, specify the INVERSE value 
              3) If specifying mixture molecular weight, specify the INVERSE value 
              4) Dont forget to set thermodynamic properties if you are computing heat loss. 
            --> 
            <stream                     spec="OPTIONAL NO_DATA"
                                        attribute1="transport_label REQUIRED STRING">
              <var                      spec="MULTIPLE NO_DATA"   
                                        attribute1="label REQUIRED STRING" 
                                        attribute2="value REQUIRED DOUBLE"/>
            </stream> 
          </post_mix>
          <!-- NOTE on the REFERENCE DENSITY --> 
          <!-- The reference density sets the fluid density for the relative buoyant force.  Specifically, the 
          buoyant term on the RHS of the momentum equation is computed as: F = (rho_ref - rho_local)*g 
          Here the user has two options: 1. specify the reference density directly using <reference_density> or 
                                         2. specify the table independent variables resulting a table lookup on the
                                            reference density. 
          In general, one would choose the heaviest stream as the reference state, but one is encouraged to think 
          carefully about this --> 
          <reference_density            spec="OPTIONAL NO_DATA"
                                        attribute1="value REQUIRED DOUBLE 'positive'"/> <!-- Set the reference density directly: Better to use reference_state --> 
          <reference_state              spec="OPTIONAL NO_DATA"
                                        attribute1="fp OPTIONAL DOUBLE 'positive'"
                                        attribute2="eta OPTIONAL DOUBLE 'positive'"
                                        attribute3="xi OPTIONAL DOUBLE 'positive'"
                                        attribute4="hl OPTIONAL DOUBLE"
                                        attribute5="f OPTIONAL DOUBLE"
                                        attribute6="var OPTIONAL DOUBLE 'positive'"
                                        attribute7="extent OPTIONAL DOUBLE 'positive'"
                                        attribute8="iv OPTIONAL DOUBLE 'positive'"/> <!-- Set the reference state from a fix set of IV --> 
        </ClassicTable>

        <ConstantProps                  spec="OPTIONAL NO_DATA">
          <density                      spec="REQUIRED DOUBLE 'positive'"/>
          <temperature                  spec="REQUIRED DOUBLE 'positive'"/>
          <temperature_label_name       spec="OPTIONAL STRING"/> <!-- default = temperature -->
          <!-- no reference density specified here since the entire world is considered constant --> 
        </ConstantProps>

      </Properties>

      <BoundaryConditions               spec="OPTIONAL NO_DATA" > 

        <ignore_invalid_celltype        spec="OPTIONAL NO_DATA"/> <!-- If present, the code will not exit with error 
                                                                       when a celltype of 999 (invalid) is present in 
                                                                       the simulation -->

        <suppress_corner_recirculation  spec="OPTIONAL NO_DATA"/> <!-- This flag zeros out corner velocity cells to try 
                                                                       to discourage artificial recirculation caused by 
                                                                       pressure and outlet boundaries. Default = false. --> 

        <intrusions                 spec="OPTIONAL NO_DATA">
         <!-- NOTES: --> 
         <!-- velocity components are specified using simple [u,v,w] labels and NOT uVelocitySPBC, etc... --> 
         <!-- variable = mass_flow_rate is a specific variable that sets the velocity components based
         on a specified mass flow rate. -->   
         <!-- If multiple directions are entered, then the mass flow rate is divided across 
         all valid face directions with non-zero velocity normal to that face. --> 
         <!-- Enthalpy is computed based on independ. table variables, including heat loss --> 
         <intrusion                     spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING">       <!-- type = how bc is applied, 
                                                                                       label= unique name for this intrusion boundary --> 
           <geom_object/>                                                         <!-- geometry object associated with this intrusion --> 
           <flux_dir                    spec="MULTIPLE STRING 'x-,X-,x+,X+,
                                                               y-,Y-,y+,Y+,
                                                               z-,Z-,z+,Z+"/>     <!-- direction to apply type of BC, otherwise treated as wall --> 
           <!--variable                    spec="MULTIPLE NO_DATA"                     
                                        attribute1="label REQUIRED STRING"       
                                        attribute2="value REQUIRED DOUBLE"/-->      <!-- label= variable name, 
                                                                                       value= variable boundary value -->

           <velocity                    spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'flat, from_file, massflow'">

            <!-- flat velocity profile [m/s] -->                             
            <u                          spec="OPTIONAL DOUBLE" 
                                        need_applies_to="type flat"/>
            <v                          spec="OPTIONAL DOUBLE" 
                                        need_applies_to="type flat"/>
            <w                          spec="OPTIONAL DOUBLE" 
                                        need_applies_to="type flat"/>
            <!-- from input file --> 
            <input_file                 spec="REQUIRED STRING"
                                        need_applies_to="type from_file"/>

            <!-- mass flow [kg/sec]--> 
            <flow_rate                  spec="REQUIRED DOUBLE"
                                        need_applies_to="type massflow"/> 


           </velocity>
           <scalars                     spec="OPTIONAL NO_DATA">

            <scalar                     spec="MULTIPLE NO_DATA"
                                        attribute1="label OPTIONAL STRING"
                                        attribute2="type REQUIRED STRING 'flat, from_file, tabulated'">
              <input_file               spec="OPTIONAL STRING"
                                        need_applies_to="type from_file"/>
              <constant                 spec="OPTIONAL DOUBLE"
                                        need_applies_to="type flat"/>
              <depend_varname           spec="REQUIRED STRING"
                                        need_applies_to="type tabulated"/>
            </scalar>

           </scalars>
           <inverted                    spec="OPTIONAL NO_DATA"/>                 <!-- inverts the solid def. so that points inside the solid 
                                                                                       are actually outside the solid and vice versa --> 

           <constant_temperature        spec="OPTIONAL NO_DATA"
                                        attribute1="T REQUIRED DOUBLE 'positive'"/>       <!-- Set the intrusion to a constant temperature --> 
           <mpm_temperature             spec="OPTIONAL NO_DATA"/> <!-- This tag turns on two-way energy exchange between the solid and gas --> 
                                                                                                                                                             
           
         </intrusion>
        </intrusions>

        <wall_slip                      spec="OPTIONAL NO_DATA"/> <!-- Use a slip wall BC --> 
        <wall_csmag                     spec="OPTIONAL DOUBLE 'positive'"/> <!-- Constant coefficient for the wall closure model.  default = 0.17. Set to zero for laminar conditions. --> 
        
        <TurbulentInlet                 spec="OPTIONAL NO_DATA" >
          <cell_low                     spec="REQUIRED INTEGER"/>
          <cell_high                    spec="REQUIRED INTEGER"/>
          <Ntimestep                    spec="REQUIRED INTEGER"/>
          <turbulence_intensity         spec="REQUIRED DOUBLE"/>
        </TurbulentInlet>

      <WallHT                           spec="OPTIONAL NO_DATA">
        <temperature_label              spec="OPTIONAL STRING"/> <!-- tabluated name for temperature.  Default: temperature --> 
        <model                          spec="MULTIPLE NO_DATA"
                                        attribute1="type REQUIRED STRING 'simple_ht, region_ht'">
          <!-- simple heat transfer 
                  Solves for the gas side wall temperature by solving the discrete form of: 
                  q = - k dT/dy
                  for all domain solid walls everywhere. Excludes intrusions.  
          --> 
          <k                            spec="REQUIRED DOUBLE" need_applies_to="type simple_ht"/> <!-- thermal conductivity, [W/(m K)] --> 
          <wall_thickness               spec="REQUIRED DOUBLE 'positive'" need_applies_to="type simple_ht"/> <!-- thickness of the wall in meters, [meters] --> 
          <tube_side_T                  spec="REQUIRED DOUBLE 'positive'" need_applies_to="type simple_ht"/> <!-- temperature of the fluid on the tube side (constant), [K] --> 
          <T_wall_min                   spec="OPTIONAL DOUBLE 'positive'" need_applies_to="type simple_ht"/> <!-- minimum allowed wall temperature [K]. Default = 373 --> 
          <T_wall_max                   spec="OPTIONAL DOUBLE 'positive'" need_applies_to="type simple_ht"/> <!-- maximum allowed wall temperature [K]. Default = 373 --> 
          <relaxation_coef              spec="OPTIONAL DOUBLE 'positive'" need_applies_to="type simple_ht"/> <!-- relaxation to help with wildy varying wall temperatures 
                                                                                                                  because we have assumed (with this model) that the wall comes to 
                                                                                                                  instant equilibrium with the gas heat flux. Range 0 < relax < 1. Default = 1 (no relaxation).  --> 

          <!-- region ht 
                Like simple_ht model but only applies the model in the geometry region as specified by the geom_object. 
                May specify several different regions, each with a unique set of properties. 
                This includes all wall types (domain walls and intrusions). 
          --> 
          <max_it                       spec="OPTIONAL INTEGER 'positive'"/> <!-- max iterations allowed for temperature solve, default = 50 --> 
          <initial_tol                  spec="OPTIONAL DOUBLE 'positive'"/>  <!-- tolerance check on before starting the iteration loop, default = 1e-3 --> 
          <tol                          spec="OPTIONAL DOUBLE 'positive'"/>  <!-- iterator tolerance on temperature, default = 1e-5 --> 
          <region                       spec="MULTIPLE NO_DATA" need_applies_to="type region_ht">
            <k                          spec="REQUIRED DOUBLE"/>  <!-- thermal conductivity, [W/(m K)] -->
            <wall_thickness             spec="REQUIRED DOUBLE"/>  <!-- thickness of the wall in meters, [meters] --> 
            <wall_emissivity            spec="OPTIONAL DOUBLE 'positive'"/>  <!-- emissivity of the wall with default of 1.0 --> 
            <tube_side_T                spec="REQUIRED DOUBLE"/>  <!-- temperature of the fluid on the tube side (constant), [K] -->
            <max_TW                     spec="REQUIRED DOUBLE"/>  <!-- the upper limit of the wall temperature -->
            <min_TW                     spec="REQUIRED DOUBLE"/>  <!-- the lower limit of the wall temperature -->
            <relaxation_coef              spec="OPTIONAL DOUBLE 'positive'"/> <!-- relaxation to help with wildy varying wall temperatures 

                       because we have assumed (with this model) that the wall comes to 
                                                                                                                  instant equilibrium with the gas heat flux. Range 0 < relax < 1. Default = 1 no relaxation. for wall with large thermal resistance, recommend relaxation_coef=0.1, for small thermal resisitance, recommend relaxation_coef=1.0 --> 

            <geom_object/>
          </region> 

        </model>
      </WallHT>
      </BoundaryConditions> 

      <ExplicitSolver                   spec="REQUIRED NO_DATA" >

        <initial_dt                     spec="OPTIONAL DOUBLE 'positive'"/>  <!-- Sets the initial timestep of the simulation.  Note that this value will 
                                                                                  be superceded if the CFL condition determines a smaller timestep as determined
                                                                                  from the BC's and initial condition.  --> 
                                               

        <print_total_ke 								spec="OPTIONAL NO_DATA" />  <!-- prints the total kinetic energy to STDIO --> 
        <max_ke_allowed                 spec="OPTIONAL DOUBLE"/>    <!-- Exit the case if the kinetic energy exceeds this upper threshhold --> 
        <extraProjection                spec="OPTIONAL BOOLEAN" /> 
        <scalarUnderflowCheck           spec="OPTIONAL NO_DATA" />  <!-- Uses dt = 0.5*rho/div(rhoU)*dx for timestep. Note: only used positive (outbound) div -->  

        <kineticEnergy_fromFC           spec="OPTIONAL BOOLEAN" /> <!-- FIXME: what does this default to? -->

        <maxDensityLag                  spec="OPTIONAL DOUBLE" />

        <extra_table_lookup             spec="OPTIONAL NO_DATA"/> <!-- perform an extra table lookup at Stage 2 of the algorithm --> 

        <MomentumSolver                 spec="REQUIRED NO_DATA" >
          <use_wasatch_momentum_rhs spec="OPTIONAL NO_DATA" />
          <filter_divergence_constraint spec="OPTIONAL BOOLEAN" />
          <convection_scheme            spec="REQUIRED STRING 'central, upwind, wall_upwind, old_central, old_upwind'" /> 
          <!-- wallupwind = upwinding on walls, central otherwise (cheap wall model)--> 
          <Re_limit                     spec="OPTIONAL DOUBLE 'positive'"/> <!-- for Upwind and Wallupwind: Upwind > this Re, Central < this Re --> 
          <src                          spec="MULTIPLE NO_DATA" 
                                        attribute1="label REQUIRED STRING"/>

          <initialization               spec="OPTIONAL NO_DATA"           
                                        attribute1="type REQUIRED STRING 'constant, 
                                        taylor-green, almgren, exponentialvortex, StABL,
                                        input'">

           <const_u                     spec="REQUIRED DOUBLE" need_applies_to="type constant"/>
           <const_v                     spec="REQUIRED DOUBLE" need_applies_to="type constant"/>
           <const_w                     spec="REQUIRED DOUBLE" need_applies_to="type constant"/>

           <c                           spec="REQUIRED DOUBLE" need_applies_to="type taylor-green"/> 

           <A                           spec="OPTIONAL DOUBLE" need_applies_to="type almgren"/> <!-- amplitude --> 
           <B                           spec="OPTIONAL DOUBLE" need_applies_to="type almgren"/> <!-- amplitude --> 
           <plane                       spec="OPTIONAL STRING 'x-y, y-z, z-x'" need_applies_to="type almgren, exponentialvortex"/>
           
           <x0                          spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>
           <y0                          spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>
           <z0                          spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>           
           <G                           spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>                      
           <R                           spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>
           <U                           spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>           
           <V                           spec="REQUIRED DOUBLE" need_applies_to="type exponentialvortex"/>           

           <which_bc                    spec="REQUIRED STRING" need_applies_to="type StABL"/>

           <input_file                  spec="REQUIRED STRING" need_applies_to="type input"/> <!-- reads a simple input file for u,v,w --> 
           
          </initialization>
        </MomentumSolver>

        <PressureSolver                 spec="REQUIRED NO_DATA" >
          <do_only_last_projection      spec="OPTIONAL BOOLEAN" />
          <normalize_pressure           spec="OPTIONAL BOOLEAN" /> 
          <src                          spec="MULTIPLE NO_DATA" 
                                        attribute1="label REQUIRED STRING"/>
          <use_ref_point                spec="OPTIONAL NO_DATA"
                                        attribute1="value REQUIRED DOUBLE"/> 
        <Parameters                     spec="OPTIONAL NO_DATA"
                                          attribute1="variable OPTIONAL STRING 'implicitPressure'" >
          <initial_tolerance            spec="OPTIONAL DOUBLE 'positive'"/>
          <criteria                     spec="OPTIONAL STRING 'Absolute relative'" />                     
          <jump                         spec="OPTIONAL INTEGER" />                                        
          <logging                      spec="OPTIONAL INTEGER 'positive'" />                             
          <maxiterations                spec="OPTIONAL INTEGER 'positive'" />                             
          <norm                         spec="OPTIONAL STRING 'LInfinity linfinity L1 l1 L2 l2'" />       
          <npost                        spec="OPTIONAL INTEGER" />                                        
          <npre                         spec="OPTIONAL INTEGER" />                                        
          <preconditioner               spec="OPTIONAL STRING 'none, pfmg, smg jacobi'" />                            
          <outputEquations              spec="OPTIONAL BOOLEAN" />                                        
          <skip                         spec="OPTIONAL INTEGER" />                                        
          <setupFrequency               spec="OPTIONAL INTEGER" />                                        
          <solver                       spec="REQUIRED STRING 'smg, SMG, PFMG, pfmg, SparseMSG, sparsemsg, CG, cg, Hybrid, hybrid, GMRES, gmres'" />                         
          <tolerance                    spec="REQUIRED DOUBLE 'positive'" /> 
          <relax_type                   spec="OPTIONAL INTEGER '0,3'"/> <!-- 0=jacobi,1=weighted jacobi,2=rb symmetric,3=rb non-symmetric --> 
        </Parameters>
        </PressureSolver>

        <restartOnNegativeDensityGuess  spec="OPTIONAL BOOLEAN" /> <!--default = false-->
        <NoisyDensityGuess              spec="OPTIONAL BOOLEAN" /> <!--default = false-->
        <turbModelCalcForAllRKSteps     spec="OPTIONAL BOOLEAN" />
        <turbModelCalcFreq              spec="OPTIONAL INTEGER" />
      </ExplicitSolver>

      <TimeIntegrator                   spec="REQUIRED NO_DATA" 
                                        attribute1="order OPTIONAL INTEGER '1,3'"> <!-- this optional order spec isnt used yet -->
        <ExplicitIntegrator             spec="REQUIRED NO_DATA"
                                        attribute1="order REQUIRED STRING 'first, second, third'"/>
      </TimeIntegrator>  


<!-- 

         NEW STUFF

-->

      <LagrangianParticles              spec="OPTIONAL NO_DATA">
      
			  <ParticlesPerCell               spec="OPTIONAL DOUBLE"/>
			  <MaximumParticles               spec="OPTIONAL INTEGER"/>

        <!-- Position, Velocity, and Size are the min. spec -->
			  <ParticlePosition               spec="REQUIRED NO_DATA"
			  									              attribute1="x REQUIRED STRING"
			  									              attribute2="y REQUIRED STRING"
			  									              attribute3="z REQUIRED STRING"/>	

        <ParticleVelocity               spec="REQUIRED NO_DATA"
                                        attribute1="u REQUIRED STRING"
                                        attribute2="v REQUIRED STRING"
                                        attribute3="w REQUIRED STRING"/>

        <ParticleSize                   spec="REQUIRED NO_DATA"
                                        attribute1="label REQUIRED STRING"/>

        <!-- these are additional particle variable (besides position and velocity that
            are loaded onto the particles -->
        <ParticleVariables spec="OPTIONAL NO_DATA">

          <variable       spec="MULTIPLE NO_DATA"
                          attribute1="label REQUIRED STRING"/>

        </ParticleVariables> 
      
      </LagrangianParticles>


      <!-- New Task interface transport for CC-scalars -->
      <ScalarTransport                  spec="OPTIONAL NO_DATA">
        <!-- Multiple cell-centered scalars can be added to the simulation -->
        <eqn                            spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING">
          <!--If this tag is present, diffusion is computed.--> 
          <diffusion                    spec="OPTIONAL NO_DATA"/>            
          <!-- If this tag is present, convection is computed. 
           The type refers to the scheme: upwind, central, superbee, roe_minmod.-->
          <convection                   spec="OPTIONAL NO_DATA"
                                        attribute1="scheme REQUIRED STRING"/> 
          <!-- Clip the scalar to maintain specified low and high bounds -->                               
          <clip                         spec="OPTIONAL NO_DATA"
                                        attribute1="low  REQUIRED DOUBLE"
                                        attribute2="high REQUIRED DOUBLE"/>
          <!-- reference a source (defined in the <Sources> block) to add it to the RHS -->
          <src                          spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"/>
        </eqn>
      </ScalarTransport>

      <!-- New Task interface for Momentum -->
      <MomentumTransport                spec="OPTIONAL NO_DATA">

        <convection                     spec="REQUIRED NO_DATA"
                                        attribute1="scheme REQUIRED STRING 'central'"/>

      </MomentumTransport>

      <!-- Initialization tasks -->
      <Initialization                   spec="OPTIONAL NO_DATA"> 
        <!-- label = unique label for this task 
             eqn   = pointer to the scalartransport or momentumtransport eqn name 
             type  = type of initialization -->
        <task                           spec="MULTIPLE NO_DATA" 
                                        attribute1="label REQUIRED STRING" 
                                        attribute2="eqn   OPTIONAL STRING"
                                        attribute3="type  REQUIRED STRING 'wave, random_lagrangian_particles, 
                                                                           lagrangian_particle_velocity, lagrangian_particle_size'">

          <!-- 1D WAVE FORM -->
          <wave                         spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'sine,square'">

            <grid                       spec="REQUIRED NO_DATA"
                                        attribute1="dependent_type REQUIRED STRING 'svol, xvol, yvol, zvol'"
                                        attribute2="independent_type REQUIRED STRING 'svol, xvol, yvol, zvol'"/>


            <independent_variable       spec="REQUIRED NO_DATA"
                                        attribute1="label REQUIRED STRING"/>

            <sine                       spec="REQUIRED NO_DATA"
                                        attribute1="A REQUIRED DOUBLE"
                                        attribute2="f REQUIRED DOUBLE"
                                        attribute3="offset REQUIRED DOUBLE"
                                        need_applies_to="type sine"/>
            <square                     spec="REQUIRED NO_DATA"
                                        attribute1="min REQUIRED DOUBLE"
                                        attribute2="max REQUIRED DOUBLE"
                                        attribute3="f REQUIRED DOUBLE"
                                        attribute4="offset REQUIRED DOUBLE"
                                        need_applies_to="type square"/>

          </wave>

          <!-- LAGRANGIAN PARTICLE POSITION -->
          <!-- nothing here yet -->

          <!-- LAGRANGIAN PARTICLE VELOCITY -->
          <velocity_init              spec="REQUIRED NO_DATA"
                                      attribute1="type REQUIRED STRING 'as_gas_velocity'"
                                      need_applies_to="type lagrangian_particle_velocity"/>

          <!-- LAGRANGIAN PARTICLE SIZE -->
          <size_init                  spec="REQUIRED NO_DATA"
                                      attribute1="type REQUIRED STRING 'fixed, random'"
                                      need_applies_to="type lagrangian_particle_size"/>
          <fixed_diameter             spec="OPTIONAL DOUBLE 'positive'"
                                      need_applies_to="type lagrangian_particle_size"/>
          <max_diameter               spec="OPTIONAL DOUBLE 'positive'"
                                      need_applies_to="type lagrangian_particle_size"/>
                                    



        </task>
      </Initialization>

      <ParticleModels                 spec="OPTIONAL NO_DATA">

        <model                        spec="MULTIPLE NO_DATA"
                                      attribute1="label REQUIRED STRING"
                                      attribute2="type REQUIRED STRING 'simple_rate, 
                                                                        drag, 
                                                                        gravity, 
                                                                        constant, 
                                                                        coal_density, 
                                                                        coal_temperature_nebo, 
                                                                        coal_temperature, 
                                                                        coal_mass_clip, 
                                                                        total_number_density'">

            <!-- The grid parameter is used for templated properties -->
            <grid                       spec="REQUIRED NO_DATA"
                                        attribute1="dependent_type REQUIRED STRING 'svol'"
                                        attribute2="independent_type REQUIRED STRING 'svol'"
                                        need_applies_to="type drag, gravity, constant"/>

            <IC                         spec="OPTIONAL STRING" />      <!-- base label for which internal coordiante this model affects -->


            <!-- Simple rate expression -->
            <A                          spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type simple_rate"/>       <!-- Pre-exponential factor -->
            <ER                         spec="REQUIRED DOUBLE 'positive'"
                                        need_applies_to="type simple_rate"/>       <!-- E/R -->
            <m                          spec="REQUIRED DOUBLE"
                                        need_applies_to="type simple_rate"/>       <!-- Concentration raised to the m power -->
            <temperature                spec="REQUIRED NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        need_applies_to="type simple_rate"/>       <!-- label for the "temperature" -->
            <concentration              spec="REQUIRED NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        need_applies_to="type simple_rate"/>       <!-- label for the "concentration" -->
            
            <!-- drag model -->
            <particle_density           spec="REQUIRED NO_DATA"
                                        attribute1="type REQUIRED STRING 'constant, node_specific'"
                                        need_applies_to="type drag, gravity"> <!-- use a constant density for all particles, or use a model for each-->
              <constant                 spec="REQUIRED DOUBLE"
                                        need_applies_to="type constant"/>
              <density_label            spec="REQUIRED STRING"
                                        need_applies_to="type node_specific"/> <!-- base density label -->
            </particle_density>
            
            <diameter                   spec="REQUIRED NO_DATA"
                                        attribute1="type REQUIRED STRING 'constant, node_specific"
                                        need_applies_to="type drag"> <!-- use a constant diameter for all particles, or use a model for each-->
              <constant                 spec="REQUIRED DOUBLE"
                                        need_applies_to="type constant"/>
              <diameter_label           spec="REQUIRED STRING"
                                        need_applies_to="type node_specific"/> <!-- base radius label -->
            </diameter>
            
            <direction                  spec="REQUIRED STRING 'x,y,z'"
                                        need_applies_to="type drag"/>         <!-- apply this source to which velocity -->
            <u_velocity_label           spec="REQUIRED STRING"
                                        need_applies_to="type drag"/>         <!-- base u velocity label for IC -->
            <v_velocity_label           spec="OPTIONAL STRING"
                                        need_applies_to="type drag"/>         <!-- base v velocity label for IC -->
            <w_velocity_label           spec="OPTIONAL STRING"
                                        need_applies_to="type drag"/>         <!-- base w velocity label for IC -->

            <!-- constant property model: set a constant/environment -->
            <constant                   spec="REQUIRED MULTIPLE_DOUBLES"
                                        need_applies_to="type constant"/>
        </model>

      </ParticleModels>

<!-- 

    END NEW STUFF

-->


      <TransportEqns                    spec="OPTIONAL NO_DATA" >

        <Eqn                            spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="type  REQUIRED STRING 'CCscalar'">
          <!--restart_from                 spec="OPTIONAL NO_DATA"
                                        attribute1="label REQUIRED STRING"/--> <!-- BEING TESTED: Allows this equation to restart from a predefined variable other than itself --> 
          <turbulentPrandtlNumber       spec="OPTIONAL DOUBLE" /> <!-- Turbulence closure (D_T = mu_t/(Sc_t or Pr_t)), default = 0.4 -->    
          <doDiff                       spec="OPTIONAL BOOLEAN"/> <!-- Turn diffusion on/off --> 
          <doConv                       spec="OPTIONAL BOOLEAN"/> <!-- Turn convection on/off --> 
          <conv_scheme                  spec="OPTIONAL STRING 'upwind, 
                                                               2upwind,
                                                               quick,
                                                               roe_minmod, 
                                                               super_bee, 
                                                               vanleer, 
                                                               central, 
                                                               old_super_bee, 
                                                               super_bee_wall_upwind,
                                                               vanleer_wall_upwind, 
                                                               roe_minmod_wall_upwind'"/> <!-- VAN LEER not working?? --> 
          <!--use_laminar_pr               spec="OPTIONAL NO_DATA"
                                        attribute1="label REQUIRED STRING"/-->
          <scaling_const                spec="OPTIONAL MULTIPLE_DOUBLES"/>  <!-- Not used at the moment -->                               
          <!-- Regarding the density guess (next two specs): If the equation is enthalpy or a table parameter, then density_guess=true is automatically set for you.
               You don't need to set it again if you don't want to. --> 
          <use_density_guess            spec="OPTIONAL NO_DATA"/> <!-- Uses a guessed density to get \phi^{n+1}, default=false -->
          <determines_properties        spec="OPTIONAL NO_DATA"/> <!-- Forces use_density_guess = true. Has the same effect as <use_density_guess> --> 
          <stage                        spec="OPTIONAL NO_DATA"
                                        attribute1="value REQUIRED INTEGER '0,2'"/> <!-- at which algorithmic stage should this be computed. 0=before table lookup, 
                                                                                           1=after table lookup, 2=after RK averaging (performs a separate RK averaging)--> 
          <!--                                                -->
          <src                          spec="MULTIPLE NO_DATA" 
                                        attribute1="label REQUIRED STRING"> <!-- Pointer to sources defined elsewhere --> 
            <weight                     spec="OPTIONAL DOUBLE"/>            <!-- Multiply by this weight when adding source to the RHS. Default is +1.0. --> 
          </src>
          <D_mol                        spec="OPTIONAL NO_DATA" 
                                        attribute1="label REQUIRED STRING"/> <!-- [m^2/s] --> <!-- label pointing the molecular diffusivity --> 
          <D_mol_constant               spec="OPTIONAL NO_DATA"
                                        attribute1="value REQUIRED DOUBLE"/> <!-- [m^2/s] --> <!-- for constant diffusivity --> 
          <initialization               spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'constant, step, geometry_fill, 
                                                                          sine-x, sine-y, sine-z, gaussian, 
                                                                          tabulated, linear-x'">
            <!-- constant value initialization -->
            <constant                   spec="OPTIONAL DOUBLE"/>
            <!-- constant within a geometry piece (geometry_fill) -->
            <geom_object                spec="OPTIONAL"/>
            <constant_inside            spec="REQUIRED DOUBLE" need_applies_to="type geometry_fill"/> <!-- fills this value inside the geometry --> 
            <constant_outside           spec="OPTIONAL DOUBLE" need_applies_to="type geometry_fill"/> <!-- fills this value outside the geometry. default = 0.0 --> 

            <!-- step function initialization --> 
            <step_direction             spec="OPTIONAL STRING 'x,y,z'"/> <!-- direction in which the step occurs -->
            <step_value                 spec="OPTIONAL DOUBLE"/>         <!-- step from 0 to (value) - VALUE IS UNSCALED!!! -->
            <step_start                 spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should begin -->
            <step_end                   spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should end -->
            <step_cellstart             spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should begin -->
            <step_cellend               spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should end -->
            <!-- gaussian initialization --> 
            <!-- computes: y = a*exp( -1 * (x-b)^2/(2c^2) ) + shift --> 
            <!-- a = amplitude, b = center, c = std --> 
            <direction                  spec="REQUIRED STRING 'x,y,z,X,Y,Z'" need_applies_to="type gaussian"/> <!-- direction of the gaussian --> 
            <amplitude                  spec="REQUIRED DOUBLE" need_applies_to="type gaussian"/>               <!-- height of the gaussian --> 
            <center                     spec="REQUIRED DOUBLE" need_applies_to="type gaussian"/>               <!-- center of the gaussian --> 
            <std                        spec="REQUIRED DOUBLE" need_applies_to="type gaussian"/>               <!-- width of the gaussian --> 
            <shift                      spec="OPTIONAL DOUBLE" need_applies_to="type gaussian"/>               <!-- shift the gaussian by a constant --> 

            <!-- Initialize a variable using table lookup --> 
            <depend_varname             spec="REQUIRED STRING" need_applies_to="type tabulated"/> <!-- the name of the variable from the table --> 

          </initialization>                              

          <Clipping                     spec="OPTIONAL NO_DATA">
            <low                        spec="OPTIONAL DOUBLE"/> <!-- Low clipping value for SCALED value of DQMOM internal coordinate -->
            <high                       spec="OPTIONAL DOUBLE"/> <!-- High clipping value for SCALED value of DQMOM internal coordinate -->
            <tol                        spec="OPTIONAL DOUBLE"/> <!-- Tolerance on the clipping (low+tol, high-tol) --> 
<!--            
            <ind_var					          spec="REQUIRED NO_DATA"
            							              attribute1="label REQUIRED STRING" need_applies_to="type variable_constrained"/>
            <clip_dep_file			      	spec="REQUIRED STRING" need_applies_to="type variable_constrained"/>
            <clip_dep_low_file			    spec="REQUIRED STRING" need_applies_to="type variable_constrained"/>            
            <clip_ind_file				      spec="REQUIRED STRING" need_applies_to="type variable_constrained"/>	
 -->            
          </Clipping>

        </Eqn>

        <Sources                        spec="OPTIONAL NO_DATA">
          <src                          spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="type REQUIRED STRING  'constant_src, 
                                                                           westbrook_dryer, 
                                                                           coal_gas_oxi,                                                         
                                                                           coal_gas_heat,                                                        
                                                                           coal_gas_devol,                                                       
                                                                           coal_gas_momentum,                                                    
                                                                           cc_inject_src,                                                        
                                                                           fx_inject_src,                                                        
                                                                           fy_inject_src,                                                          
                                                                           fz_inject_src,                                                          
                                                                           tab_rxn_rate,                                                           
                                                                           cc_intrusion_inlet,                                                     
                                                                           fx_intrusion_inlet,                                                     
                                                                           fy_intrusion_inlet,                                                     
                                                                           fz_intrusion_inlet,                                                     
                                                                           do_radiation,                                                           
                                                                           rmcrt_radiation, 
                                                                           bowman_nox,
                                                                           wasatch_expr,
                                                                           pc_transport,
                                                                           moment2_mixture_fraction_src,
                                                                           dissipation_src,
                                                                           manifold_rxn,
                                                                           momentum_drag_src'">

            <!-- Specs for coal gas devol model -->
            <devol_model_name           spec="REQUIRED STRING" need_applies_to="type coal_gas_devol" />

            <!-- Spec for the heat transfer source --> 
            <heat_model_name            spec="REQUIRED STRING" need_applies_to="type coal_gas_heat"/>

            <!-- Tabulated reaction rate --> 
            <rxn_rate                   spec="REQUIRED STRING" need_applies_to="type tab_rxn_rate" />
            
            <!-- Wasatch expression as a source - needs ForceOnGraph in Wasatch block -->
            <expr                       spec="REQUIRED STRING" need_applies_to="type wasatch_expr" />

            <!-- Spec for constant and multi-point constant source term model -->
            <constant                   spec="OPTIONAL DOUBLE" need_applies_to="type constant_src, fx_inject_src, fy_inject_src, fz_inject_src, cc_inject_src" />

            <!-- Density weighting for the constant source --> 
            <density_weighted           spec="OPTIONAL NO_DATA" need_applies_to="type constant_src"/>

            <!-- Spec for the char oxidation source --> 
            <char_oxidation_model_name  spec="REQUIRED STRING" need_applies_to="type coal_gas_oxi" />

            <!-- Multi-point constant injection --> 
            <injector_region            spec="REQUIRED NO_DATA" need_applies_to="type fx_inject_src, fy_inject_src, fz_inject_src, cc_inject_src">
              <geom_object/>
            </injector_region>
            
            <!-- specs nneded for second moment of mixture fraction source-->
            <density_label              spec="OPTIONAL STRING" need_applies_to="type moment2_mixture_fraction_src, dissipation_src"/>
            <scalar_dissipation_label   spec="REQUIRED STRING" need_applies_to="type moment2_mixture_fraction_src"/> 
            
            <!-- specs needed for the dissipation term for 2eqn scalr var model -->
            <mixture_fraction_label     spec="REQUIRED STRING" need_applies_to="type dissipation_src"/> <!-- mixture fraction label -->
            <gradmixfrac_label          spec="REQUIRED STRING" need_applies_to="type dissipation_src"/> <!-- label for the gradient of the mixture fraction -->
            <D                          spec="REQUIRED DOUBLE" need_applies_to="type dissipation_src"/> <!-- Molecular diffusivity (?) -->
            <turb_visc_label            spec="OPTIONAL STRING" need_applies_to="type dissipation_src"/> <!-- label for the turbulent viscosity. Default = turb_viscosity -->

            <!-- inject_type = constant : constant value in every cell that is contained within the geom object (use <constant> spec)--> 
            <!-- inject_type = fromfile : reads an input file and assigns value at each i,j,k matching the inputfile 
                                          within the geom_oject (use <inputfile> spec)--> 
            <inject_type                spec="REQUIRED STRING 'constant, fromfile'" need_applies_to="type fx_inject_src, fy_inject_src, fz_inject_src, cc_inject_src" />
            <inputfile                  spec="OPTIONAL STRING" need_applies_to="type fx_inject_src, fy_inject_src, fz_inject_src, cc_inject_src" />

            <!-- Radiation models --> 
            <calc_frequency             spec="OPTIONAL INTEGER" need_applies_to="type do_radiation rmcrt_radiation" /> <!-- calculate radiation every N steps, default = 3 --> 
            <checkForMissingIntensities spec="OPTIONAL BOOLEAN" need_applies_to="type do_radiation" /> <!-- This flag is designed to assist users using DOR with scattering, and changing their ordinate number on a restart --> 
            <!--abskp_label                spec="OPTIONAL STRING"  need_applies_to="type do_radiation rmcrt_radiation" /--> <!-- Derek -->  
            <calc_on_all_RKsteps        spec="OPTIONAL BOOLEAN" need_applies_to="type do_radiation rmcrt_radiation" /> <!-- calculate radiation every RK step, default = false --> 
            <abskg                      spec="OPTIONAL NO_DATA"  
                                        attribute1="label REQUIRED STRING"
                                        need_applies_to="type do_radiation rmcrt_radiation" />                         <!-- string label of abskg, default = abskg. NOTE: This is referenced to the 
                                                                                                                            total absorption coeffient. When using particles, the abskg label defined there
                                                                                                                            includes the effect of the abskp. abskg = abskg(gas only) + abskp -->
            <DORadiationModel           spec="OPTIONAL NO_DATA" need_applies_to="type do_radiation" >
              <ordinates                  spec="OPTIONAL INTEGER" />                                   <!-- number of ordinants, default = 2 --> 
              <ReflectOn                  spec="OPTIONAL BOOLEAN" /> <!-- reflections are off by default.-->
              <initialGuess               spec="OPTIONAL STRING 'zeros, prevDir, prevRadSolve'"/> <!-- prevRadSolvei -> use previous radiation solve as previous guess.  prevDir= use previous direction for initial guess.  zeros=use zeros as initial guess (default)-->
              <ScatteringOn               spec="OPTIONAL BOOLEAN" /> <!-- turn on scattering -->
              <LinearSolver               spec="OPTIONAL NO_DATA"                                      
                                          attribute1="type REQUIRED STRING 'hypre, petsc'">
                <res_tol                  spec="REQUIRED DOUBLE" />
                <ksptype                  spec="REQUIRED STRING 'gmres, cg'" />
                <pctype                   spec="REQUIRED STRING 'jacobi, blockjacobi'" />
                <max_iter                 spec="REQUIRED INTEGER" />
              </LinearSolver>
              <spherical_harmonics        spec="OPTIONAL BOOLEAN" />                                   <!-- Spherical harmonics, default = false (works?) --> 
            </DORadiationModel>

            <!--pc transport--> 
            <pc_scal_file                spec="REQUIRED STRING" need_applies_to="type pc_transport"/> <!-- ..... --> 
            <pc_st_scal_file             spec="REQUIRED STRING" need_applies_to="type pc_transport"/>
            <svm_model_base_name         spec="REQUIRED STRING" need_applies_to="type pc_transport"/>
            <n_pcs                       spec="REQUIRED INTEGER" need_applies_to="type pc_transport"/>
            <n_sts                       spec="REQUIRED INTEGER" need_applies_to="type pc_transport"/>
            <n_ind                       spec="REQUIRED INTEGER" need_applies_to="type pc_transport"/>
            <n_tot                       spec="REQUIRED INTEGER" need_applies_to="type pc_transport"/>
            <pc                          spec="MULTIPLE NO_DATA" 
                                         attribute1="label REQUIRED STRING"
                                         attribute2="score_number REQUIRED INTEGER"
                                         need_applies_to="type pc_transport"/>

            
            <!-- RMCRT -->
            <RMCRT                       spec="OPTIONAL NO_DATA" need_applies_to="type rmcrt_radiation" >
              <randomSeed                spec="OPTIONAL BOOLEAN"/>
              <Temperature               spec="OPTIONAL DOUBLE  'positive'"/>      <!-- needed by RMCRT_test -->
              <abskg                     spec="OPTIONAL DOUBLE  'positive'"/>                   
              <sigmaScat                 spec="OPTIONAL DOUBLE  'positive'"/>
              <nDivQRays                 spec="OPTIONAL INTEGER 'positive'"/>        
              <Threshold                 spec="OPTIONAL DOUBLE  'positive'"/>        
              <Slice                     spec="OPTIONAL DOUBLE"/>                    
              <StefanBoltzmann           spec="OPTIONAL DOUBLE  'positive'"/>        
              <benchmark                 spec="OPTIONAL INTEGER 'positive'"/>                    
              <solveBoundaryFlux         spec="OPTIONAL BOOLEAN"/>                   
              <CCRays                    spec="OPTIONAL BOOLEAN"/>
              <VirtRadiometer            spec="OPTIONAL BOOLEAN"/>
              <VRViewAngle               spec="OPTIONAL DOUBLE 'positive'"/>
              <VROrientation             spec="OPTIONAL VECTOR"/>
              <VRLocationsMin            spec="OPTIONAL VECTOR 'positive'"/>
              <VRLocationsMax            spec="OPTIONAL VECTOR 'positive'"/>
              <nRadRays                  spec="OPTIONAL INTEGER 'positive'"/>        
              <nFluxRays                 spec="OPTIONAL INTEGER 'positive'"/>        
              <halo                      spec="OPTIONAL VECTOR 'positive'"/>
              <ScatteringOn              spec="OPTIONAL BOOLEAN" /> <!-- turn on scattering -->
              <allowReflect              spec="OPTIONAL BOOLEAN"/>
              <solveDivQ                 spec="OPTIONAL BOOLEAN"/>
              <applyFilter               spec="OPTIONAL BOOLEAN"/>
              <ignore_BC_bulletproofing  spec="OPTIONAL BOOLEAN"/>
 
              <algorithm                spec="OPTIONAL NO_DATA" attribute1="type REQUIRED STRING 'dataOnion RMCRT_coarseLevel singleLevel'">
                                    
                <orderOfInterpolation   spec="REQUIRED INTEGER 'positive'" need_applies_to="type RMCRT_coarseLevel" />
                <halo                   spec="REQUIRED VECTOR  'positive'" need_applies_to="type dataOnion" />
        
                <ROI_extents            spec="OPTIONAL NO_DATA"
                                  attribute1="type REQUIRED STRING 'fixed dynamic patch_based'">
    
                  <abskg_threshold      spec="OPTIONAL DOUBLE  'positive'" need_applies_to="type dynamic"/>
                  <sigmaT4_threshold    spec="OPTIONAL DOUBLE  'positive'" need_applies_to="type dynamic"/>
          
                  <min                  spec="REQUIRED VECTOR" need_applies_to="type fixed"/>
                  <max                  spec="REQUIRED VECTOR" need_applies_to="type fixed"/>
                </ROI_extents>
              </algorithm>
              
            </RMCRT>

            <!-- Westbrook Dryer Global Hydrocarbon reaction rate model -->
            <!-- see Turns, pg. 156-157 -->
            <!-- A: pre-exponential factor.  Units for westbrook/dryer model are in (gmol/cm^3)^(1-m-n)/s and consistent with the choice of m and n. --> 
            <A                          spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer, bowman_nox"/> <!-- Pre-exponential factor. -->
            <!-- E/R: activiation temperature. Unit for westbrook/dryer model are in kelvin --> 
            <E_R                        spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer, bowman_nox"/> <!-- Activation temperature. Use same units as listed in Turns. --> 
            <X                          spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- C_xH_y --> 
            <Y                          spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- C_xH_y --> 
            <m                          spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- [C_xH_y]^m --> 
            <n                          spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- [O_2]^n --> 
            <fuel_mass_fraction         spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- Mass fraction of C_xH_y when f=1 --> 
            <stoich_fuel_O2_massratio   spec="REQUIRED DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- Stoichiometric mass fuel/mass air for the slow step --> 
            <cstar_fraction_label       spec="REQUIRED STRING" need_applies_to="type westbrook_dryer"/> <!-- Name of the C*H mass fraction from the table --> 

            <!-- Use one set of the following two options: --> 
            <!-- set 1. --> 
            <eta_label                   spec="OPTIONAL STRING" need_applies_to="type westbrook_dryer"/> <!-- Eta mass fraction label --> 
            <fp_label                    spec="OPTIONAL STRING" need_applies_to="type westbrook_dryer"/> <!-- Fp  mass fraction label -->
            <!-- set 2. --> 
            <xi_label                    spec="OPTIONAL STRING" need_applies_to="type westbrook_dryer"/> <!-- Total fuel (conserved) mass fraction label --> 
            <!-- end --> 

            <temperature_clip           spec="OPTIONAL DOUBLE" need_applies_to="type westbrook_dryer"/> <!-- Turns off the rate below this T --> 
            <flammability_limit         spec="OPTIONAL NO_DATA" need_applies_to="type westbrook_dryer"> <!-- Use "nose" plot to turn on/off source term. Noses are specified immediately below --> 
              <!-- lower and upper flammability limits are approximated as straight lines, y=mx+b, where x = amount if diluent and y = amount of fuel. --> 
              <!-- slopes and intercepts should be computed from volume % nose plots --> 
              <!-- USE one of the next two options (<diluent> or <const_diluent>) --> 
              <diluent                  spec="OPTIONAL NO_DATA"
                                        attribute1="label REQUIRED STRING"/> <!-- label pointing to the diluent mass fraction -->
              <const_diluent            spec="OPTIONAL DOUBLE 'positive'"/>  <!-- rather than transport a diluent, use a constant --> 
              <lower                    spec="REQUIRED NO_DATA"                    
                                        attribute1="slope REQUIRED DOUBLE"
                                        attribute2="intercept REQUIRED DOUBLE"/> <!-- Defines the line for the lower flammability limit --> 
              <upper                    spec="REQUIRED NO_DATA" 
                                        attribute1="slope REQUIRED DOUBLE"
                                        attribute2="intercept REQUIRED DOUBLE"/> <!-- Defines the line for the upper flammability limit --> 

            </flammability_limit>
            <o2_label                   spec="OPTIONAL STRING" need_applies_to="type westbrook_dryer, bowman_nox"/> <!-- o2 label (default = O2) --> 
            <temperature_label          spec="OPTIONAL STRING" need_applies_to="type westbrook_dryer, bowman_nox"/> <!-- temperature label (default = temperature) --> 
            <density_label              spec="OPTIONAL STRING" need_applies_to="type westbrook_dryer, bowman_nox"/> <!-- density label (default = "density) --> 
            <hot_spot                   spec="OPTIONAL NO_DATA" need_applies_to="type westbrook_dryer"> <!-- pilot light --> 
              <geom_object/>                                                                            <!-- defines the location of the pilot --> 
              <start_time               spec="REQUIRED DOUBLE 'positive'"/>                             <!-- pilot turns on at this time -->  
              <stop_time                spec="REQUIRED DOUBLE 'positive'"/>                             <!-- pilot turns off at this time -->  
              <temperature              spec="REQUIRED DOUBLE 'positive'"/>                             <!-- defines the temperature of the pilot --> 
            </hot_spot>

            <!-- Bowman NOx rate expression --> 
            <!-- A, E_R, o2_label, density_label, temperature_label are defined above in the westbrook dryer model description but apply here as well --> 
            <no2_label                  spec="OPTIONAL STRING" need_applies_to="type bowman_nox"/> <!-- mass fraction label for NO2 (default = NO2) --> 
                                        
            <!-- Intrusion inlets --> 
            <intrusion                  spec="OPTIONAL NO_DATA">
              <geom_object/>
            </intrusion>
            <normal                     spec="OPTIONAL STRING '+X,-X,+Y,-Y,+Z,-Z'"/>
            <velocity                   spec="OPTIONAL DOUBLE"/>
            <density                    spec="OPTIONAL DOUBLE"/>
            <phi                        spec="OPTIONAL DOUBLE"/>

            <!-- manifold rxn --> 
            <manifold_label             spec="REQUIRED STRING" need_applies_to="type manifold_rxn"/> <!-- label for the manifold variable --> 
            <conv_scheme                spec="REQUIRED NO_DATA"
                                        attribute1="type REQUIRED STRING 'super_bee, roe_minmod, upwind, central'"
                                        need_applies_to="type manifold_rxn"/> <!-- choose a convection scheme --> 


            <!-- momentum drag src -->
            <N                          spec="REQUIRED INTEGER 'positive'" need_applies_to="type momentum_drag_src"/> <!-- number of quad nodes -->
            <base_x_label               spec="OPTIONAL STRING" need_applies_to="type momentum_drag_src"/>  <!-- base labels for the quad node srcs -->
            <base_y_label               spec="OPTIONAL STRING" need_applies_to="type momentum_drag_src"/>
            <base_z_label               spec="OPTIONAL STRING" need_applies_to="type momentum_drag_src"/>
            
          </src>

        </Sources>

      </TransportEqns>

      <DQMOM                            spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'unweightedAbs, weightedAbs'">

        <!-- Tags for verification of DQMOM AX=B solution procedure -->
        <Verify_Linear_Solver           spec="OPTIONAL NO_DATA">
            <A                          spec="REQUIRED STRING" />
            <X                          spec="REQUIRED STRING" /> 
            <B                          spec="REQUIRED STRING" /> 
            <R                          spec="REQUIRED STRING" /> 
            <normR                      spec="REQUIRED STRING" /> 
            <norms                      spec="REQUIRED STRING" /> 
            <dimension                  spec="REQUIRED INTEGER 'positive'" />
            <tolerance                  spec="OPTIONAL DOUBLE 'positive'" />
        </Verify_Linear_Solver>

        <!-- Tags for verification of DQMOM A and B construction procedure -->
        <Verify_AB_Construction         spec="OPTIONAL NO_DATA">
            <A                          spec="REQUIRED STRING" />
            <B                          spec="REQUIRED STRING" />
            <inputs                     spec="REQUIRED STRING" />
            <moments                    spec="REQUIRED STRING" />
            <number_environments          spec="REQUIRED INTEGER 'positive'" />
            <number_internal_coordinates  spec="REQUIRED INTEGER 'positive'" />
            <tolerance                  spec="OPTIONAL DOUBLE 'positive'" />
        </Verify_AB_Construction>

        <!-- Block of tags for specifying the linear solver used for DQMOM -->
        <LinearSolver                   spec="OPTIONAL NO_DATA">
          <tolerance                    spec="OPTIONAL DOUBLE 'positive'" />
          <type                         spec="OPTIONAL STRING 'Lapack-invert, Lapack-svd, LU, Optimize, Simplest'" />
          <Optimization                 spec="OPTIONAL NO_DATA" >
            <Optimal_abscissas          spec="REQUIRED MULTIPLE_DOUBLES" />
          </Optimization>
          <maxConditionNumber           spec="OPTIONAL DOUBLE 'positive'" />
          <calcConditionNumber          spec="OPTIONAL BOOLEAN" /> <!-- this tag can be added if the linear solver you choose doesn't do an SVD, but you still want a condition number -->
                                                                   <!-- NOTE: this doesn't actually do anything if you're using a linear solver that uses SVD -->
        </LinearSolver>

        <!-- This block is (will be) used for coupled multiphysics coal calculations.
             It allows the CoalModelFactory to determine which internal coordinates correspond
             to which physical roles.  It may (should) replace the <Model> tags currently used
             (but only for coupled coal particle calculations, and only after a way of
             indicating models is added to this block!)
        -->
        <coalParticleCalculation        spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'coupled, separable'" >
            <Length                     spec="OPTIONAL STRING" /> <!-- Particle length internal coordinate label -->
            <RawCoal                    spec="OPTIONAL STRING" /> <!-- Particle raw coal internal coordinate label -->
            <Char                       spec="OPTIONAL STRING" /> <!-- Particle char internal coordinate label -->
            <ParticleTemperature        spec="OPTIONAL STRING" /> <!-- Particle temperature internal coordinate label -->
            <ParticleEnthalpy           spec="OPTIONAL STRING" /> <!-- Particle enthalpy internal coordinate label -->
            <Moisture                   spec="OPTIONAL STRING" /> <!-- Particle moisture internal coordinate label -->
            <Ash                        spec="OPTIONAL STRING" /> <!-- Particle ash internal coordinate label -->
            <!-- A method for indicating the combination of multiphysics models to use still needs to be added -->
        </coalParticleCalculation>

        <number_quad_nodes              spec="REQUIRED INTEGER 'positive'"/>
        <adiabGas_nonadiabPart          spec="OPTIONAL BOOLEAN"/> <!-- FIXME: What is this for? -->
        <save_moments                   spec="OPTIONAL BOOLEAN"/> <!-- Allows saving any moments being used for DQMOM -->

        <VelModel                       spec="MULTIPLE NO_DATA"
                                        attribute1="label OPTIONAL STRING"
                                        attribute2="type REQUIRED STRING 'Balachandar, 
                                                                          Dragforce'">

          <kinematic_viscosity          spec="OPTIONAL DOUBLE 'positive'"/>
          <L                            spec="OPTIONAL DOUBLE 'positive'"/>
          <rho_ratio                    spec="OPTIONAL DOUBLE 'positive'"/>
          <regime                       spec="OPTIONAL INTEGER '1 3'"/>
          <eta                          spec="OPTIONAL DOUBLE 'positive'"/>

          <upper_limit_multiplier       spec="OPTIONAL DOUBLE"/>
          <clip_low                     spec="OPTIONAL DOUBLE"/>
          <partvelBC_eq_gasvelBC        spec="OPTIONAL BOOLEAN"/>
          <min_vel_ratio                spec="OPTIONAL DOUBLE 'positive'"/>

          <iter                         spec="OPTIONAL INTEGER 'positive'"/>
          <tol                          spec="OPTIONAL DOUBLE  'positive'"/>

        </VelModel>

        <Models                         spec="OPTIONAL NO_DATA">
        
          <model                        spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="type REQUIRED STRING 'BTDevol, 
                                                                          RichardsFletcherDevol, 
                                                                          KobayashiSarofimDevol, 
                                                                          YamamotoDevol, 
                                                                          ConstantModel, 
                                                                          Drag,
                                                                          ShaddixHeatTransfer, 
                                                                          EnthalpyShaddix, 
                                                                          CharOxidationShaddix, 
                                                                          SimpleBirth'">

            <ICVars                     spec="OPTIONAL NO_DATA"> <!-- block containing list of internal coordinates the DQMOM model depends on -->
              <variable                 spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="role REQUIRED STRING"/>
            </ICVars>

            <scalarVars                 spec="OPTIONAL NO_DATA"> <!-- block containing list of scalar variables the DQMOM model depends on -->
              <variable                 spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        attribute2="role REQUIRED STRING"/>
            </scalarVars>

            <low_clip                   spec="OPTIONAL DOUBLE 'positive'"/> <!-- lowest value the DQMOM model term can have -->
            <high_clip                  spec="OPTIONAL DOUBLE 'positive'"/> <!-- highest value the DQMOM model term can have -->

            <!-- Heat Transfer Model -->
            <noRadiation                spec="OPTIONAL NO_DATA"/>

            <!-- Constant Model -->
            <constant                   spec="OPTIONAL DOUBLE"/>

            <!-- Drag -->
            <direction                  spec="REQUIRED STRING 'x,X,y,Y,z,Z'" 
                                        need_applies_to="type Drag"/>

            <!-- Simple Birth -->
            <small_weight               spec="REQUIRED DOUBLE"
                                        need_applies_to="type SimpleBirth"/> <!-- The smallest weight value allowed -->
            <is_weight                  spec="OPTIONAL NO_DATA"
                                        need_applies_to="type SimpleBirth"/> <!-- Model birth term for the weight -->
            <abscissa                   spec="OPTIONAL NO_DATA"
                                        attribute1="label REQUIRED STRING"
                                        need_applies_to="type SimpleBirth"/> <!-- If not a weight, then the root of the abscissa name -->


          </model>
        </Models>

        <Weights                        spec="REQUIRED NO_DATA">
          <doDiff                       spec="OPTIONAL BOOLEAN"/>
          <doConv                       spec="OPTIONAL BOOLEAN"/>
          <conv_scheme                  spec="OPTIONAL STRING 'upwind,
                                                               2upwind,
                                                               quick,
                                                               roe_minmod, 
                                                               vanleer, 
                                                               super_bee, 
                                                               central, 
                                                               old_super_bee, 
                                                               super_bee_wall_upwind, 
                                                               vanleer_wall_upwind,
                                                               roe_minmod_wall_upwind'"/> <!-- VAN LEER not working?? --> 
          <turbulentPrandtlNumber       spec="OPTIONAL DOUBLE" />
          <molecular_diffusivity        spec="OPTIONAL DOUBLE 'positive'"/>
          <initialization               spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'env_constant, constant, env_step, step'">
            <!-- constant value initialization -->
            <constant                   spec="OPTIONAL DOUBLE"/>
            <env_constant               spec="MULTIPLE NO_DATA"
                                        attribute1="qn REQUIRED INTEGER 'positive'"
                                        attribute2="value REQUIRED DOUBLE" /> <!-- this is the unscaled initial value for the weight -->
            <!-- step function initialization --> 
            <!-- Note: the only difference between 'step' and 'env_step' is the use of <step_value></step_value> or <env_step_value qn="" value=""/> -->
            <step_direction             spec="OPTIONAL STRING 'x,y,z'"/> <!-- direction in which the step occurs -->
            <step_value                 spec="OPTIONAL DOUBLE"/>         <!-- step from 0 to (value) -->
            <step_start                 spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should begin -->
            <step_end                   spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should end -->
            <step_cellstart             spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should begin -->
            <step_cellend               spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should end -->
            <env_step_value             spec="MULTIPLE NO_DATA"
                                        attribute1="qn REQUIRED INTEGER 'positive'"
                                        attribute2="value REQUIRED DOUBLE" />     <!-- for environment (qn), step from 0 to (value) -->
          </initialization>                              
          <scaling_const                spec="REQUIRED MULTIPLE_DOUBLES"/>                              
          <Clipping                     spec="OPTIONAL NO_DATA">
            <low                        spec="OPTIONAL DOUBLE"/> <!-- Low clipping value for SCALED value of DQMOM internal coordinate -->
            <high                       spec="OPTIONAL DOUBLE"/> <!-- High clipping value for SCALED value of DQMOM internal coordinate -->
            <tol                        spec="OPTIONAL DOUBLE"/> <!-- Tolerance on the clipping (low+tol, high-tol) --> 
          </Clipping>
          <model                        spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"/>
        </Weights>


        <Ic                             spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING">
          <doDiff                       spec="OPTIONAL BOOLEAN"/>
          <doConv                       spec="OPTIONAL BOOLEAN"/>
          <conv_scheme                  spec="OPTIONAL STRING 'upwind,
                                                               2upwind,
                                                               quick,
                                                               roe_minmod, 
                                                               vanleer, 
                                                               super_bee, 
                                                               central, 
                                                               old_super_bee, 
                                                               super_bee_wall_upwind, 
                                                               vanleer_wall_upwind,
                                                               roe_minmod_wall_upwind'"/> <!-- VAN LEER not working?? --> 
          <turbulentPrandtlNumber       spec="OPTIONAL DOUBLE" />
          <molecular_diffusivity        spec="OPTIONAL DOUBLE 'positive'"/>
          <nominal_values               spec="REQUIRED MULTIPLE_DOUBLES"/> <!-- nominal values for each of the internal coordinates when the weight goes to zero -->

          <!-- developer note: When you add a new descriptor here, make sure you add it in the 
               enum definition and the constructor of the DQMOMEqnFactory -->
          <!--<ndf_descriptor               spec="REQUIRED STRING 'size,-->
                                                               <!--mass, -->
                                                               <!--temperature, -->
                                                               <!--enthalpy, -->
                                                               <!--coal_gas_mix_frac,-->
                                                               <!--uvel, -->
                                                               <!--vvel, -->
                                                               <!--wvel'"/> [> This is a fix descriptor that indicates what function this IC takes <]-->

          <initialization               spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'env_constant, constant, env_step'">
            <!-- environment constant value initialization -->
            <env_constant               spec="MULTIPLE NO_DATA"
                                        attribute1="qn REQUIRED INTEGER 'positive'"
                                        attribute2="value REQUIRED DOUBLE" />
            <constant                   spec="OPTIONAL DOUBLE"/>
            <!-- step function initialization --> 
            <step_direction             spec="OPTIONAL STRING 'x,y,z'"/> <!-- direction in which the step occurs -->
            <step_start                 spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should begin -->
            <step_end                   spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should end -->
            <step_cellstart             spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should begin -->
            <step_cellend               spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should end -->
            <env_step_value             spec="MULTIPLE NO_DATA"
                                        attribute1="qn REQUIRED INTEGER 'positive'"
                                        attribute2="value REQUIRED DOUBLE" />     <!-- for environment (qn), step from 0 to (value) -->
          </initialization>                              
          <scaling_const                spec="REQUIRED MULTIPLE_DOUBLES"/>                              
          <model                        spec="MULTIPLE NO_DATA"
                                        attribute1="label REQUIRED STRING"/>
          <Clipping                     spec="OPTIONAL NO_DATA">
            <low                        spec="OPTIONAL DOUBLE"/> <!-- Low clipping value for SCALED value of DQMOM internal coordinate -->
            <high                       spec="OPTIONAL DOUBLE"/> <!-- High clipping value for SCALED value of DQMOM internal coordinate -->
            <tol                        spec="OPTIONAL DOUBLE"/> <!-- Tolerance on the clipping (low+tol, high-tol) --> 
          </Clipping>
        </Ic>

        <Moment                         spec="MULTIPLE NO_DATA">
          <m                            spec="REQUIRED MULTIPLE_INTEGERS"/>
        </Moment>

      </DQMOM>

      <!--CQMOM Block -->
      <CQMOM                            spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'normalized, unweighted'"
                                        attribute2="partvel REQUIRED BOOLEAN"> <!-- USE PARTICLE VELOCITY OR USE ST << 1-->
        <Models                         spec="OPTIONAL NO_DATA">
          <!-- insert future source terms/models here -->
        </Models>
        <NumberInternalCoordinates      spec="REQUIRED INTEGER"/>
        <QuadratureNodes                spec="REQUIRED MULTIPLE_INTEGERS"/> <!-- this is per direction -->
        <CutOff                         spec="OPTIONAL DOUBLE"/>
        <Adaptive                       spec="OPTIONAL BOOLEAN"/>
        <UseLapack                      spec="OPTIONAL BOOLEAN"/>
        <WeightRatio                    spec="OPTIONAL DOUBLE"/>  <!-- minimum ratio of maximum to minimum weight in adaptive method -->
        <AbscissaRatio                  spec="OPTIONAL DOUBLE"/>  <!-- minimum ratio of difference between abscissas -->
        <OperatorSplitting              spec="OPTIONAL BOOLEAN"/> <!-- turn on operator splitting for convective fluxes -->
        <RestitutionCoefficient         spec="OPTIONAL DOUBLE"/>  <!-- determines how much energy is lost in wall collision default = 1 - elastic-->
        <ConvectionWeightLimit          spec="OPTIONAL DOUBLE"/>  <!-- minimum value of the weight for the quadrature node to actually do convection, scale this value up for higher number densities of population balance-->
        
        <!-- order these same as index moment order -->
        <InternalCoordinate             spec="MULTIPLE NO_DATA"
                                        attribute1="name REQUIRED STRING"
                                        attribute2="type REQUIRED STRING 'uVel, vVel, wVel, scalar'">
          <Clipping                     spec="OPTIONAL NO_DATA"> <!-- This clipping applys to the abscissa for this internal coordinate -->
            <low                        spec="OPTIONAL DOUBLE"/>
            <high                       spec="OPTIONAL DOUBLE"/>
            <tol                        spec="OPTIONAL DOUBLE"/>
            <clip_zero                  spec="OPTIONAL BOOLEAN"/> <!-- clip an out of bounds abscissa to 0 instead of the limit -->
            <min_weight                 spec="OPTIONAL DOUBLE"/>  <!-- minimum weight with zero clip on to also clip weight to 0-->
          </Clipping>
        </InternalCoordinate>
        
        <!-- all moment eqns should keep these params the same-->
        <doDiff                         spec="OPTIONAL BOOLEAN"/>
        <doConv                         spec="OPTIONAL BOOLEAN"/>
        <conv_scheme                    spec="OPTIONAL STRING 'upwind, roe_minmod, super_bee, first, second'"/>
        <turbulentPrandtlNumber         spec="OPTIONAL DOUBLE" />
        <molecular_diffusivity          spec="OPTIONAL DOUBLE 'positive'"/>
        
        <Moment                         spec="MULTIPLE NO_DATA">
          <m                            spec="REQUIRED MULTIPLE_INTEGERS"/>
          <initialization               spec="OPTIONAL NO_DATA"
                                        attribute1="type REQUIRED STRING 'constant, step'">
            <!-- constant value initialization -->
            <constant                   spec="OPTIONAL DOUBLE"/>

            <!-- step function initialization -->
            <!-- Note: the only difference between 'step' and 'env_step' is the use of <step_value></step_value> or <env_step_value qn="" value=""/> -->
            <step_direction             spec="OPTIONAL STRING 'x,y,z'"/> <!-- direction in which the step occurs -->
            <step_value                 spec="OPTIONAL DOUBLE"/>         <!-- step from 0 to (value) -->
            <step_start                 spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should begin -->
            <step_end                   spec="OPTIONAL DOUBLE"/>         <!-- physical location (in specified direction) at which the step should end -->
            <step_cellstart             spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should begin -->
            <step_cellend               spec="OPTIONAL DOUBLE"/>         <!-- cell location (in specified direction) at which the step should end -->

          </initialization>
          
          <scaling_const                spec="OPTIONAL DOUBLE"/>
          <Clipping                     spec="OPTIONAL NO_DATA">
            <low                        spec="OPTIONAL DOUBLE"/> <!-- Low clipping value for SCALED value of DQMOM internal coordinate -->
            <high                       spec="OPTIONAL DOUBLE"/> <!-- High clipping value for SCALED value of DQMOM internal coordinate -->
            <tol                        spec="OPTIONAL DOUBLE"/> <!-- Tolerance on the clipping (low+tol, high-tol) -->
          </Clipping>
        </Moment>
        
      </CQMOM>

      <!-- Use this block for wasatch-in-arches builds only to create placeholders for arbitrary variables -->
      <ExtraWarchesVariables            spec="OPTIONAL NO_DATA">
        <NameTag                        spec="MULTIPLE"/>
      </ExtraWarchesVariables>
    </ARCHES>
  </CFD>

</Uintah_Include>
