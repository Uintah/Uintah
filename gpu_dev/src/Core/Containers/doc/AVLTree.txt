/*
 * The MIT License
 *
 * Copyright (c) 1997-2015 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



AVLTree is a parameterized type (template class) that implements a
Key/Data interface to an AVL tree (a dynamically balancing binary
tree).  The type used for Key must have the <, > and == operators
implemented.

The AVL tree is accessed through the following methods:

// Inserts the key/data pair into the tree
void insert(const Key& key, const Data& data);

// Looks up key in the tee.  Returns 0 if not found.
// Returns 1, and places the data item in data if it is found.
// If more than one of "key" exist, it is undefined which it
// will return.
int lookup(const Key& key, Data& data);

// Removes all items with key "key" from the tree
void remove(const Key& key);

// Removes all items with key "key" and data "data" from the tree.
void remove(const Key& key, const Data& data);

// Remove the item pointer to by the iterator
void remove(const AVLTreeIter<Key, Data>&);

// Empties the tree
void remove_all();

// Returns how many items are stored in the tree
int size() const;

// For the current implementation, items are not actually deleted,
// but are marked for deletion.  When there are too many deleted
// nodes, the tree will be cleaned up, and the marked nodes actually
// deleted.  This function will force a clean up of the tree.
void cleanup()

// Return the data item from the first member of the tree, and delete
// it.  This is used for implementing a priority queue.
Data pop();

In addition, the tree may be walked through using the
AVLTreeIter class.  The items will be accessed in ascending order.  If
two items have the same key, then they may appear in random order.
Removing and adding items while iterating through the tree may produce
unpredictable results.

// Build a AVL tree iterator for a specific AVL tree
AVLTreeIter(AVLTree<Key, Data>*);

// Reset the iterator to the first item
void first();

// Does the iterator point to a valid item?
int ok();

// Advance to the next item
void operator++();

// Get the key from the current item
Key& get_key();

// Get the data from the current item
Data& get_data();
