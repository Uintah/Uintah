/*
 * The MIT License
 *
 * Copyright (c) 1997-2015 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */



HashTable is a parameterized type (template class) that implements a
Key/Data interface to a hash table.

The hash table in accessed through the following methods:

// Inserts the key/data pair into the hash table
void insert(const Key& key, const Data& data);

// Looks up key in the hashtable.  Returns 0 if not found.
// Returns 1, and places the data item in data if it is found.
// If more than one of "key" exist, it is undefined which it
// will return.
int lookup(const Key& key, Data& data);

// Removes all items with key "key" from the hash table.
// Returns the number actually removed
int remove(const Key& key);

// Empties the hash table
void remove_all();

// Returns how many items are stored in the hash table
int size() const;


In addition, the hash table may be walked through using the
HashTableIter class.  The order in which the items are accessed is not
defined and may change drasticly as items are added.  Removing
and adding items while iterating through a hash table may produce
unpredictable results.

// Build a hash table iterator for a specific hash table
HashTableIter(HashTable<Key, Data>*);

// Reset the iterator to the first item
void first();

// Does the iterator point to a valid item?
int ok();

// Advance to the next item
void operator++();

// Get the key from the current item
Key& get_key();

// Get the data from the current item
Data& get_data();
