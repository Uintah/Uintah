/*
 * The MIT License
 *
 * Copyright (c) 1997-2015 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#ifndef SCI_MAGMA_DEFS_H
#define SCI_MAGMA_DEFS_H

@DEF_MAGMA@

#ifdef HAVE_MAGMA
#  include <magma.h>

#ifdef __cplusplus
extern "C" {
#endif

// MAGMA error handling wrapper for CUDA and CUBLAS API calls
#define MAGMA_CUDA_INIT()                                            \
  CUdevice  dev;                                                     \
  CUcontext context;                                                 \
  if( CUDA_SUCCESS != cuInit( 0 ) ) {                                \
    fprintf(stderr, "CUDA: Not initialized\n" ); exit(-1);           \
  }                                                                  \
  if( CUDA_SUCCESS != cuDeviceGet( &dev, 0 ) ) {                     \
    fprintf(stderr, "CUDA: Cannot get the device\n"); exit(-1);      \
  }                                                                  \
  if( CUDA_SUCCESS != cuCtxCreate( &context, 0, dev ) ) {            \
    fprintf(stderr, "CUDA: Cannot create the context\n"); exit(-1);  \
  }                                                                  \
  if( CUBLAS_STATUS_SUCCESS != cublasInit( ) ) {                     \
    fprintf(stderr, "CUBLAS: Not initialized\n"); exit(-1);          \
  }                                                                  \


#define MAGMA_CUDA_FINALIZE()                                        \
  cuCtxDetach( context );                                            \
  cublasShutdown();


#define MAGMA_MALLOC(__ptr, __type, __size)                          \
  __ptr = (__type*)malloc((__size) * sizeof(__type));                \
  if (__ptr == 0) {                                                  \
    fprintf (stderr, "malloc failed for: %s\n", #__ptr );            \
    exit(-1);                                                        \
  }

#define MAGMA_HOSTALLOC(__ptr, __type, __size)        \
  if( cudaSuccess != cudaMallocHost( (void**)&__ptr, (__size)*sizeof(__type) ) ) {  \
    fprintf (stderr, "cudaMallocHost failed for: %s\n", #__ptr );                   \
    exit(-1);                                                                       \
  }

#define MAGMA_DEVALLOC(__ptr, __type, __size)                                       \
  if( cudaSuccess != cudaMalloc( (void**)&__ptr, (__size)*sizeof(__type) ) ){       \
    fprintf (stderr, "cublasAlloc failed for: %s\n", #__ptr );                      \
    exit(-1);                                                                       \
  }


#define MAGMA_FREE(__ptr)         \
  free(__ptr);

#define MAGMA_HOSTFREE(__ptr)     \
  cudaFreeHost( __ptr );

#define MAGMA_DEVFREE(__ptr)      \
  cudaFree( __ptr );

#ifdef __cplusplus
}
#endif

#endif

#endif
