#!/bin/csh
#______________________________________________________________________
#  This script parses the output file from sus and 
#  generates a data file used for scaling plots.  The data file is layed out
#     
#  fileName  #procs  startWallTime  endWallTime  totalSolve+SetupTime  totalSolveTime  AveTimePerTimeStep  aveTotalSolve+setup  aveSolveTime
#    1         2         3             4                  5                  6                7                     8                9
#  usage:
#      extractSolverScalingData  <sus_output.1, sus_output_2, sus_output_3 >
#  
#______________________________________________________________________

if ( $#argv < 3 ) then
  echo "    Usage:  extractSolverScalingData  <sus_output.1, sus_output_2, sus_output_3 >"
  exit
endif

#__________________________________
# DEFAULTS:  Edit these
set startTimestep = "3"
set endTimestep   = "50"  # timestep to extract elapsed time from.
set nThreads      = 1     # number of threads per mpi process.
#__________________________________

set out = ($argv)

set here = .tmpFiles

/bin/rm -rf $here >& /dev/null
mkdir $here
touch $here/data

foreach X ( $out[*] )

  grep -q "(timestep $endTimestep)" $X
  
  if ($status == 0 ) then
    echo $X > $here/file

    grep "Patch layout:" $X | cut -d"(" -f2 > $here/patches
    grep processors $X | awk '{ print $2 }' > $here/processors
    
    grep "(timestep $startTimestep)" $X | awk -F "=" '{print $4}' | cut -d "," -f1 > $here/startTime
    grep "(timestep $endTimestep)"   $X | awk -F "=" '{print $4}' | cut -d "," -f1 > $here/endTime

    #__________________________________
    # compute time spent in solver
    @ endTimeStep = $endTimestep + 1 
    
    sed -n /"(timestep $startTimestep) *"/,/"(timestep $endTimeStep)"/p $X | grep Solve > $here/tmp
    awk 'NR==1 {sum=$9}  ; NR > 1 {sum = sum + $9 };  END {print sum}'  $here/tmp >$here/totalSolveTime
    awk 'NR==1 {sum=$13} ; NR > 1 {sum = sum + $13 }; END {print sum}'  $here/tmp >$here/solveTime

    paste -d " " $here/file $here/processors $here/startTime $here/endTime $here/totalSolveTime $here/solveTime >> $here/data

    echo "working on $X"
  else
    echo "---------------------$X did not run to completion"
  endif
  
end
#__________________________________
# compute the average times

@ n = 1 + $endTimestep - $startTimestep

echo " computing average mean time per timestep for $n timesteps"
echo "#file procs startWallTime endWallTime totalSolve+SetupTime totalSolveTime AveTimePerTimeStep aveTotalSolve+setup aveSolveTime"> $here/data2

awk -vnSteps=$n '{print ($4-$3)/nSteps}' $here/data >> $here/aveMeanTime
awk -vnSteps=$n '{print ($5)/nSteps}'    $here/data >> $here/aveTotalSolveTime
awk -vnSteps=$n '{print ($6)/nSteps}'    $here/data >> $here/aveSolveTime  

paste -d " " $here/data $here/aveMeanTime $here/aveTotalSolveTime $here/aveSolveTime>> $here/data2
sort -n -k2 $here/data2 >sortedData

more sortedData


/bin/rm -rf $here
exit
